Index: get_src.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nimport json\r\n\r\nasync def get_pic():\r\n    headears = {\r\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36\"\r\n    }\r\n    req_url = \"https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/common-api/course/current\"\r\n    try:\r\n        response = requests.get(req_url,headears)\r\n        response.encoding = response.apparent_encoding\r\n        json_obj = json.loads(response.text)\r\n        cover = json_obj['result']['cover']\r\n        try:\r\n            url = json_obj['result']['uri'].replace('m.html', 'images/end.jpg')\r\n        except:\r\n            url = json_obj['result']['uri'][:-6] + 'images/end.jpg'\r\n        starttime = json_obj['result']['startTime']\r\n        title = json_obj['result']['title']\r\n        return [title,starttime,cover,url]\r\n    except:\r\n        return ['标题获取失败！','开始时间获取失败！','','']\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/get_src.py b/get_src.py
--- a/get_src.py	(revision 1202e59b21e0cd1c232a0e33dfa93adf6dfb9c8a)
+++ b/get_src.py	(date 1651245033110)
@@ -1,13 +1,15 @@
-import requests
 import json
 
+import requests
+
+
 async def get_pic():
     headears = {
         "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36"
     }
     req_url = "https://qczj.h5yunban.com/qczj-youth-learning/cgi-bin/common-api/course/current"
     try:
-        response = requests.get(req_url,headears)
+        response = requests.get(req_url, headears)
         response.encoding = response.apparent_encoding
         json_obj = json.loads(response.text)
         cover = json_obj['result']['cover']
@@ -17,6 +19,6 @@
             url = json_obj['result']['uri'][:-6] + 'images/end.jpg'
         starttime = json_obj['result']['startTime']
         title = json_obj['result']['title']
-        return [title,starttime,cover,url]
+        return [title, starttime, cover, url]
     except:
-        return ['标题获取失败！','开始时间获取失败！','','']
+        return ['标题获取失败！', '开始时间获取失败！', '', '']
Index: __init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport time\r\nimport nonebot\r\nimport pathlib\r\nfrom nonebot.permission import SUPERUSER\r\nfrom nonebot.plugin import on_command, on_request\r\nfrom nonebot.typing import T_State\r\nfrom nonebot.adapters.onebot.v11 import Bot, MessageSegment, Event, FriendRequestEvent\r\nfrom nonebot.log import logger\r\nfrom .getdata import get_answer\r\nfrom datetime import datetime\r\nfrom .get_src import get_pic\r\nfrom nonebot import require\r\n\r\nscheduler = require('nonebot_plugin_apscheduler').scheduler\r\n# 获取超管id\r\nsuper_id = nonebot.get_driver().config.superusers\r\n\r\n\r\n# 每周一10:00开始检测是否更新，每3分检测一次，觉得检测间隔太久，请手动修改time.sleep()，获取到答案后终止检测。\r\n@scheduler.scheduled_job('cron', day_of_week='0', hour=10, minute=0, id='a')\r\nasync def remind():\r\n    try:\r\n        num = 0\r\n        for i in range(960):\r\n            img = await get_answer()\r\n            if img is None or img == '未找到答案':\r\n                time.sleep(180)\r\n                num += 1\r\n            else:\r\n                content = await get_pic()\r\n                title = content[0]\r\n                starttime = content[1]\r\n                cover = content[2]\r\n                end_url = content[3]\r\n                message = [\r\n                    {\r\n                        \"type\": \"text\",\r\n                        \"data\": {\r\n                            \"text\": '本周的青年大学习开始喽！\\n' + title + '\\n开始时间：' + starttime + '\\n答案见图二、完成截图见图三\\nPs:如果学校会查后台记录，\\n请前往相应平台观看1分钟，\\n确保在后台留下观看记录！！！ '\r\n                        }\r\n                    },\r\n                    {\r\n                        \"type\": \"image\",\r\n                        \"data\": {\r\n                            \"file\": cover\r\n                        }\r\n                    },\r\n                    {\r\n                        \"type\": \"image\",\r\n                        \"data\": {\r\n                            \"file\": img\r\n                        }\r\n                    },\r\n\r\n                    {\r\n                        \"type\": \"image\",\r\n                        \"data\": {\r\n                            \"file\": end_url\r\n                        }\r\n                    }\r\n                ]\r\n                # 读取需要推送的群和好友\r\n                with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n                    obj = json.load(f)\r\n                qq_friend_list = obj['qq_friend_list']\r\n                qq_group_list = obj['qq_group_list']\r\n                # 给配置的列表里的qq好友发通知\r\n                for qq in qq_friend_list:\r\n                    await nonebot.get_bot().send_private_msg(user_id=qq, message=message)\r\n                    time.sleep(1)\r\n                    # 给群发送通知\r\n                for qq_group in qq_group_list:\r\n                    await nonebot.get_bot().send_group_msg(group_id=qq_group,\r\n                                                           message=\"[CQ:at,qq={}]{}\".format(\"all\", message))\r\n                    time.sleep(1)\r\n                break\r\n            if num >= 200:\r\n                message1 = [\r\n                    {\r\n                        \"type\": \"text\",\r\n                        \"data\": {\r\n                            \"text\": '本周没有大学习哦！'\r\n                        }\r\n                    }\r\n                ]\r\n                # 读取需要推送的群和好友\r\n                with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n                    obj = json.load(f)\r\n                qq_friend_list = obj['qq_friend_list']\r\n                qq_group_list = obj['qq_group_list']\r\n                # 给配置的列表里的qq好友发通知\r\n                for qq in qq_friend_list:\r\n                    await nonebot.get_bot().send_private_msg(user_id=qq, message=message1)\r\n                    time.sleep(1)\r\n                    # 给群发送通知\r\n                for qq_group in qq_group_list:\r\n                    await nonebot.get_bot().send_group_msg(group_id=qq_group,\r\n                                                           message=\"[CQ:at,qq={}]{}\".format(\"all\", message1))\r\n                    time.sleep(1)\r\n\r\n                break\r\n    except Exception as e:\r\n        for qq in super_id:\r\n            await nonebot.get_bot().send_msg(user_id=int(qq), message=f'机器人出错了\\n错误信息：{e}')\r\n\r\n\r\n# 以下指令为机器人主人指令\r\n# 机器人主人使用，用于关闭所有大学习自动更新推送\r\nclose_time_task = on_command('全局关闭大学习推送', aliases={'全局关闭推送'}, permission=SUPERUSER)\r\n\r\n\r\n@close_time_task.handle()\r\nasync def close_time_task(state: T_State, event: Event):\r\n    try:\r\n        scheduler.pause_job(job_id='a')\r\n        await nonebot.get_bot().send(message=\"已全局关闭青年大学习自动检查更新推送。\", at_sender=True, event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'出错了!\\n错误日志:{e}', at_sender=True, event=event)\r\n\r\n\r\n# 机器人主人使用，用于开启所有大学习自动更新推送\r\nrecover_time_task = on_command('全局开启大学习推送', aliases={'全局开启推送'}, permission=SUPERUSER)\r\n\r\n\r\n@recover_time_task.handle()\r\nasync def recover_time_task(state: T_State, event: Event):\r\n    try:\r\n        scheduler.resume_job(job_id='a')\r\n        await nonebot.get_bot().send(message='已全局开启青年大学习自动检查更新推送。', at_sender=True, event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'出错了!\\n错误日志:{e}', at_sender=True, event=event)\r\n\r\n\r\n# 机器人主人使用，用于添加推送好友\r\nadd_friend_list = on_command('添加推送好友', permission=SUPERUSER)\r\n\r\n\r\n@add_friend_list.handle()\r\nasync def add_friend_list(event: Event):\r\n    try:\r\n        # 读取需要推送的好友\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_friend_list = obj['qq_friend_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        add_qq = int(str(event.get_message()).split('#')[-1])\r\n        if add_qq not in qq_friend_list:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'已将好友：{add_qq}加入推送列表', event=event)\r\n            qq_friend_list.append(add_qq)\r\n            obj['qq_friend_list'] = qq_friend_list\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n        else:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'加入失败！\\n好友：{add_qq}已经在推送列表中了', event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'出错了!\\n错误日志:{e}', at_sender=True, event=event)\r\n\r\n\r\n# 机器人主人使用，用于删除推送好友\r\ndel_friend_list = on_command('删除推送好友', permission=SUPERUSER)\r\n\r\n\r\n@del_friend_list.handle()\r\nasync def del_friend_list(event: Event):\r\n    try:\r\n        # 读取需要推送的好友\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_friend_list = obj['qq_friend_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        del_qq = int(str(event.get_message()).split('#')[-1])\r\n        if del_qq not in qq_friend_list:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'删除失败!\\n好友：{del_qq}不在好友推送列表', event=event)\r\n        else:\r\n            qq_friend_list.remove(del_qq)\r\n            obj['qq_friend_list'] = qq_friend_list\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'已将好友：{del_qq}移出推送列表！', event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'出错了!\\n错误日志:{e}', at_sender=True, event=event)\r\n\r\n\r\n# 机器人主人使用，用于添加推送群聊\r\nadd_group_list = on_command('添加推送群聊', permission=SUPERUSER)\r\n\r\n\r\n@add_group_list.handle()\r\nasync def add_group_list(event: Event):\r\n    try:\r\n        # 读取需要推送的群\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_group_list = obj['qq_group_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        add_group = int(str(event.get_message()).split('#')[-1])\r\n        if add_group not in qq_group_list:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'已将群：{add_group}加入推送列表', event=event)\r\n            qq_group_list.append(add_group)\r\n            obj['qq_group_list'] = qq_group_list\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n        else:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'加入失败！\\n群：{add_group}已经在推送列表中了', event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'出错了!\\n错误日志:{e}', at_sender=True, event=event)\r\n\r\n\r\n# 机器人主人使用，用于删除推送群聊\r\ndel_group_list = on_command('删除推送群聊', permission=SUPERUSER)\r\n\r\n\r\n@del_group_list.handle()\r\nasync def del_group_list(event: Event):\r\n    try:\r\n        # 读取需要推送的群\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_group_list = obj['qq_group_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        del_group = int(str(event.get_message()).split('#')[-1])\r\n        if del_group not in qq_group_list:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'删除失败！\\n群：{del_group}不在推送列表', event=event)\r\n        else:\r\n            qq_group_list.remove(del_group)\r\n            obj['qq_group_list'] = qq_group_list\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'已将群：{del_group}移出推送列表！', event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'出错了!\\n错误日志:{e}', at_sender=True, event=event)\r\n\r\n\r\n# 机器人主人使用，用于查询推送群聊列表\r\nindex_group_list = on_command('查询推送群聊列表', permission=SUPERUSER)\r\n\r\n\r\n@index_group_list.handle()\r\nasync def index_group_list(event: Event):\r\n    try:\r\n        # 读取需要推送的群\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_group_list = obj['qq_group_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        if qq_group_list:\r\n            group = ''\r\n            for i in qq_group_list:\r\n                group = group + '群：' + str(i) + '\\n' + ''\r\n            await nonebot.get_bot().send(user_id=user_id, message=group, at_sender=True, event=event)\r\n        else:\r\n            await nonebot.get_bot().send(user_id=user_id, message='暂无推送群聊！', event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'查询失败！\\n错误日志：{e}', event=event)\r\n\r\n\r\n# 机器人主人使用，用于查询推送好友列表\r\nindex_qq_list = on_command('查询推送好友列表', permission=SUPERUSER)\r\n\r\n\r\n@index_qq_list.handle()\r\nasync def index_qq_list(event: Event):\r\n    try:\r\n        # 读取需要推送的好友\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_friend_list = obj['qq_friend_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        if qq_friend_list:\r\n            group = ''\r\n            for i in qq_friend_list:\r\n                group = group + '好友：' + str(i) + '\\n' + ''\r\n            await nonebot.get_bot().send(user_id=user_id, message=group, at_sender=True, event=event)\r\n        else:\r\n            await nonebot.get_bot().send(user_id=user_id, message='暂无推送好友！', event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f'查询失败！\\n错误日志：{e}', event=event)\r\n\r\n\r\n# 机器人主人使用，同意好友添加机器人请求\r\nagree_qq_add = on_command('同意添加好友', permission=SUPERUSER)\r\n\r\n\r\n@agree_qq_add.handle()\r\nasync def agree_qq_add(event: Event):\r\n    try:\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq = obj['add_qq_req_list']['qq']\r\n        flag = obj['add_qq_req_list']['flag']\r\n        user_id = int(event.get_user_id())\r\n        agree_id = int(str(event.get_message()).split('#')[-1])\r\n        if agree_id in qq:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'机器人成功添加QQ:{agree_id}为好友！', event=event)\r\n            await nonebot.get_bot().set_friend_add_request(flag=flag, approve=True, remark='')\r\n            qq.remove(agree_id)\r\n            flag = ''\r\n            obj['add_qq_req_list']['qq'] = qq\r\n            obj['add_qq_req_list']['flag'] = flag\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n\r\n        else:\r\n            await nonebot.get_bot().send(user_id=user_id, message=f'QQ:{agree_id}不在好友申请列表！', event=event)\r\n    except Exception as e:\r\n        for su_qq in super_id:\r\n            await nonebot.get_bot().send_msg(user_id=int(su_qq), message=f'机器人出错了\\n错误信息：{e}')\r\n\r\n\r\n# 以下为基础指令，所有好友皆可用\r\n# 获取大学习答案\r\ncollege_study = on_command('青年大学习', aliases={'大学习'}, priority=5)\r\n\r\n\r\n@college_study.handle()\r\nasync def _(bot: Bot, event: Event, state: T_State):\r\n    try:\r\n        img = await get_answer()\r\n        if img is None:\r\n            await college_study.send(\"本周暂未更新青年大学习\", at_sender=True)\r\n        elif img == \"未找到答案\":\r\n            await college_study.send(\"未找到答案\", at_sender=True)\r\n        else:\r\n            await college_study.send(MessageSegment.image(img), at_sender=True)\r\n    except Exception as e:\r\n        await college_study.send(f\"出错了，错误信息：{e}\", at_sender=True)\r\n        logger.error(f\"{datetime.now()}: 错误信息：{e}\")\r\n\r\n\r\n# 获取大学习完成截图\r\ncomplete_Scr = on_command('大学习截图', aliases={'完成截图'}, priority=5)\r\n\r\n\r\n@complete_Scr.handle()\r\nasync def complete_Scr(bot: Bot, event: Event, state: T_State):\r\n    try:\r\n        content = await get_pic()\r\n        scr = content[3]\r\n        if scr is None:\r\n            await nonebot.get_bot().send(message=\"本周暂未更新青年大学习\", at_sender=True, event=event)\r\n        else:\r\n            await nonebot.get_bot().send(message=MessageSegment.image(scr), at_sender=True, event=event)\r\n    except Exception as e:\r\n        await nonebot.get_bot().send(message=f\"出错了，错误信息：{e}\", at_sender=True, event=event)\r\n        logger.error(f\"{datetime.now()}: 错误信息：{e}\")\r\n\r\n\r\n# 开启大学习定时更新推送\r\nrecover_task = on_command('开启大学习推送', priority=5)\r\n\r\n\r\n@recover_task.handle()\r\nasync def recover_task(event: Event):\r\n    try:\r\n        # 读取需要推送的好友\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_friend_list = obj['qq_friend_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        if user_id not in qq_friend_list:\r\n            await nonebot.get_bot().send(user_id=user_id, message='青年大学习定时更新推送开启成功!', event=event)\r\n            qq_friend_list.append(user_id)\r\n            obj['qq_friend_list'] = qq_friend_list\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n        else:\r\n            await nonebot.get_bot().send(user_id=user_id, message='你已经开启了青年大学习定时更新推送了！', event=event)\r\n    except:\r\n        await nonebot.get_bot().send(message='出错了!请询问机器人主人以解决问题！', event=event)\r\n\r\n\r\n# 关闭大学习定时更新推送\r\nclose_task = on_command('关闭大学习推送', priority=5)\r\n\r\n\r\n@close_task.handle()\r\nasync def close_task(event: Event):\r\n    try:\r\n        # 读取需要推送的好友\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq_friend_list = obj['qq_friend_list']\r\n        user_id = int(str(event.get_user_id()))\r\n        if user_id not in qq_friend_list:\r\n            await nonebot.get_bot().send(user_id=user_id, message='你已经关闭青年大学习定时更新推送了！!', event=event)\r\n        else:\r\n            qq_friend_list.remove(user_id)\r\n            obj['qq_friend_list'] = qq_friend_list\r\n            with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n                json.dump(obj, f1, indent=4)\r\n            await nonebot.get_bot().send(user_id=user_id, message='青年大学习定时更新推送关闭成功!', event=event)\r\n    except:\r\n        await nonebot.get_bot().send(message='出错了!请询问机器人主人以解决问题！', event=event)\r\n\r\n\r\n# 大学习帮助功能\r\nhelp_list = on_command('功能', aliases={'菜单', '帮助', 'help'}, priority=5)\r\n\r\n\r\n@help_list.handle()\r\nasync def help_list(event: Event):\r\n    try:\r\n        _help = '大学习功能指令\\n主人专用:\\n1、添加(删除)推送群聊#群号\\n2、添加(删除)推送好友#QQ号\\n3、查询推送好友(群聊)列表\\n4、全局开启(关闭)大学习推送或全局开启(关闭)推送\\n5、同意添加好友#QQ号\\n' + \\\r\n                '全员可用功能:\\n1、开启(关闭)大学习推送\\n2、青年大学习或大学习\\n3、大学习截图或完成截图\\n4、帮助、菜单、功能和help '\r\n        await nonebot.get_bot().send(message=_help, at_sender=True, event=event)\r\n    except:\r\n        await nonebot.get_bot().send(message='出错了!请询问机器人主人以解决问题！', event=event)\r\n\r\n\r\n# 机器人推送添加机器人好友请求事件\r\nadd_friend = on_request(priority=1, block=True)\r\n\r\n\r\n@add_friend.handle()\r\nasync def add_friend(event: FriendRequestEvent):\r\n    try:\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'r', encoding='utf-8') as f:\r\n            obj = json.load(f)\r\n        qq = obj['add_qq_req_list']['qq']\r\n        add_req = json.loads(event.json())\r\n        add_qq = add_req['user_id']\r\n        qq.append(add_qq)\r\n        comment = add_req['comment']\r\n        flag = add_req['flag']\r\n        realtime = time.strftime('%Y年%m月%d日 %H:%M:%S', time.localtime(add_req['time']))\r\n        obj['add_qq_req_list']['qq'] = qq\r\n        obj['add_qq_req_list']['flag'] = flag\r\n        with open(pathlib.Path(__file__).with_name('set.json'), 'w', encoding='utf-8') as f1:\r\n            json.dump(obj, f1, indent=4)\r\n        for su_qq in super_id:\r\n            await nonebot.get_bot().send_msg(user_id=int(su_qq),\r\n                                             message=f'QQ：{add_qq}请求添加机器人为好友!\\n请求添加时间：{realtime}\\n验证信息为：{comment}')\r\n    except Exception as e:\r\n        for su_qq in super_id:\r\n            await nonebot.get_bot().send_msg(user_id=int(su_qq), message=f'机器人出错了\\n错误信息：{e}')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/__init__.py b/__init__.py
--- a/__init__.py	(revision 1202e59b21e0cd1c232a0e33dfa93adf6dfb9c8a)
+++ b/__init__.py	(date 1651244632228)
@@ -1,16 +1,18 @@
 import json
+import pathlib
 import time
+from datetime import datetime
+
 import nonebot
-import pathlib
+from nonebot import require
+from nonebot.adapters.onebot.v11 import Bot, MessageSegment, Event, FriendRequestEvent
+from nonebot.log import logger
 from nonebot.permission import SUPERUSER
 from nonebot.plugin import on_command, on_request
 from nonebot.typing import T_State
-from nonebot.adapters.onebot.v11 import Bot, MessageSegment, Event, FriendRequestEvent
-from nonebot.log import logger
-from .getdata import get_answer
-from datetime import datetime
+
 from .get_src import get_pic
-from nonebot import require
+from .getdata import get_answer
 
 scheduler = require('nonebot_plugin_apscheduler').scheduler
 # 获取超管id
Index: ../.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/misc.xml b/../.idea/misc.xml
--- a/../.idea/misc.xml	(revision 1202e59b21e0cd1c232a0e33dfa93adf6dfb9c8a)
+++ b/../.idea/misc.xml	(date 1651244383009)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: ../.idea/nonebot_plugin_youthstudy.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/nonebot_plugin_youthstudy.iml b/../.idea/nonebot_plugin_youthstudy.iml
--- a/../.idea/nonebot_plugin_youthstudy.iml	(revision 1202e59b21e0cd1c232a0e33dfa93adf6dfb9c8a)
+++ b/../.idea/nonebot_plugin_youthstudy.iml	(date 1651244382761)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.9" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
