# automatically generated by the FlatBuffers compiler, do not modify

# namespace: meta

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Tag definitions are created independent of objects tagged with tags. Primary key of this table is ``oid``.
class TagDefinition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TagDefinition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTagDefinition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TagDefinition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OID of the tag definition within the database.
    # TagDefinition
    def Oid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # TagDefinition
    def OidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # TagDefinition
    def OidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TagDefinition
    def OidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Timestamp when the attribute was last modified (or first created).
    # TagDefinition
    def Modified(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Tag name (or URI in general). This is must be globally unique and represents the semantic identifier of the tag.
    # TagDefinition
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CBOR-serialized, object-valued extra data stored along with this tag definition.
    # TagDefinition
    def Extra(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # TagDefinition
    def ExtraAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # TagDefinition
    def ExtraLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TagDefinition
    def ExtraIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def TagDefinitionStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddOid(builder, oid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(oid), 0)
def TagDefinitionAddOid(builder, oid):
    """This method is deprecated. Please switch to AddOid."""
    return AddOid(builder, oid)
def StartOidVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TagDefinitionStartOidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOidVector(builder, numElems)
def AddModified(builder, modified): builder.PrependUint64Slot(1, modified, 0)
def TagDefinitionAddModified(builder, modified):
    """This method is deprecated. Please switch to AddModified."""
    return AddModified(builder, modified)
def AddTag(builder, tag): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tag), 0)
def TagDefinitionAddTag(builder, tag):
    """This method is deprecated. Please switch to AddTag."""
    return AddTag(builder, tag)
def AddExtra(builder, extra): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extra), 0)
def TagDefinitionAddExtra(builder, extra):
    """This method is deprecated. Please switch to AddExtra."""
    return AddExtra(builder, extra)
def StartExtraVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TagDefinitionStartExtraVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraVector(builder, numElems)
def End(builder): return builder.EndObject()
def TagDefinitionEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)