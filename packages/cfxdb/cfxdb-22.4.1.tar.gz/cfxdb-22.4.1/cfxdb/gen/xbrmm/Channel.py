# automatically generated by the FlatBuffers compiler, do not modify

# namespace: xbrmm

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# XBR channel (from XBR consumer to XBR market maker) and XBR paying channels (from XBR market maker to XBR provider).
class Channel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Channel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChannel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Channel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OID of the market this payment channel is associated with.
    # Channel
    def MarketOid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def MarketOidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def MarketOidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def MarketOidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # OID of the buyer or seller actor in the market (a XBR network member) this channel is associated with.
    # Channel
    def MemberOid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def MemberOidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def MemberOidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def MemberOidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OID of the channel.
    # Channel
    def ChannelOid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def ChannelOidAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def ChannelOidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def ChannelOidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Database transaction time (epoch time in ns).
    # Channel
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Block number (on the blockchain) when the channel was opened.
    # Channel
    def OpenAt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def OpenAtAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def OpenAtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def OpenAtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Channel sequence number.
    # Channel
    def Seq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Channel type: payment channel (from XBR consumer to XBR market maker) or paying channel (from XBR market maker to XBR provider).
    # Channel
    def ChannelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Ethereum address of the sender delegate (either XBR Consumer delegate or XBR Market delegate == market maker)
    # Channel
    def Marketmaker(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def MarketmakerAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def MarketmakerLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def MarketmakerIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Ethereum address of the sender (either XBR Consumer or XBR Market).
    # Channel
    def Actor(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def ActorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def ActorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def ActorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Ethereum address of the sender delegate (either XBR Consumer delegate or XBR Market delegate == market maker)
    # Channel
    def Delegate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def DelegateAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def DelegateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def DelegateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Ethereum address of the recipient (either XBR Market or XBR Provider)
    # Channel
    def Recipient(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def RecipientAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def RecipientLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def RecipientIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Amount of XBR tokens initially deposited into the channel.
    # Channel
    def Amount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def AmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def AmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def AmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Channel (non-cooperative) close timeout in blocks (committed on the blockchain).
    # Channel
    def Timeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Current state of channel.
    # Channel
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Block number (on the blockchain) when the channel will close (at the latest).
    # Channel
    def ClosingAt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def ClosingAtAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def ClosingAtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def ClosingAtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Block number (on the blockchain) when the channel was finally closed on-chain.
    # Channel
    def ClosedAt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def ClosedAtAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def ClosedAtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def ClosedAtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Closing signature by market maker.
    # Channel
    def CloseMmSig(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def CloseMmSigAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def CloseMmSigLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def CloseMmSigIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Closing signature by (seller or buyer) delegate.
    # Channel
    def CloseDelSig(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def CloseDelSigAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def CloseDelSigLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def CloseDelSigIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Last off-chain, closing transaction: channel transaction sequence number.
    # Channel
    def CloseChannelSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Remaining (closing) channel balance (XBR).
    # Channel
    def CloseBalance(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def CloseBalanceAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def CloseBalanceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def CloseBalanceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Flag indication if close is final (happens immediately without a channel timeout).
    # Channel
    def CloseIsFinal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # When channel was finally closed on-chain, the Ethereum transaction ID.
    # Channel
    def ClosedTx(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def ClosedTxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def ClosedTxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def ClosedTxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

def Start(builder): builder.StartObject(22)
def ChannelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddMarketOid(builder, marketOid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(marketOid), 0)
def ChannelAddMarketOid(builder, marketOid):
    """This method is deprecated. Please switch to AddMarketOid."""
    return AddMarketOid(builder, marketOid)
def StartMarketOidVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartMarketOidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMarketOidVector(builder, numElems)
def AddMemberOid(builder, memberOid): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(memberOid), 0)
def ChannelAddMemberOid(builder, memberOid):
    """This method is deprecated. Please switch to AddMemberOid."""
    return AddMemberOid(builder, memberOid)
def StartMemberOidVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartMemberOidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMemberOidVector(builder, numElems)
def AddChannelOid(builder, channelOid): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(channelOid), 0)
def ChannelAddChannelOid(builder, channelOid):
    """This method is deprecated. Please switch to AddChannelOid."""
    return AddChannelOid(builder, channelOid)
def StartChannelOidVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartChannelOidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartChannelOidVector(builder, numElems)
def AddTimestamp(builder, timestamp): builder.PrependUint64Slot(3, timestamp, 0)
def ChannelAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)
def AddOpenAt(builder, openAt): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(openAt), 0)
def ChannelAddOpenAt(builder, openAt):
    """This method is deprecated. Please switch to AddOpenAt."""
    return AddOpenAt(builder, openAt)
def StartOpenAtVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartOpenAtVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOpenAtVector(builder, numElems)
def AddSeq(builder, seq): builder.PrependUint32Slot(5, seq, 0)
def ChannelAddSeq(builder, seq):
    """This method is deprecated. Please switch to AddSeq."""
    return AddSeq(builder, seq)
def AddChannelType(builder, channelType): builder.PrependUint8Slot(6, channelType, 0)
def ChannelAddChannelType(builder, channelType):
    """This method is deprecated. Please switch to AddChannelType."""
    return AddChannelType(builder, channelType)
def AddMarketmaker(builder, marketmaker): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(marketmaker), 0)
def ChannelAddMarketmaker(builder, marketmaker):
    """This method is deprecated. Please switch to AddMarketmaker."""
    return AddMarketmaker(builder, marketmaker)
def StartMarketmakerVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartMarketmakerVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMarketmakerVector(builder, numElems)
def AddActor(builder, actor): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(actor), 0)
def ChannelAddActor(builder, actor):
    """This method is deprecated. Please switch to AddActor."""
    return AddActor(builder, actor)
def StartActorVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartActorVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartActorVector(builder, numElems)
def AddDelegate(builder, delegate): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(delegate), 0)
def ChannelAddDelegate(builder, delegate):
    """This method is deprecated. Please switch to AddDelegate."""
    return AddDelegate(builder, delegate)
def StartDelegateVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartDelegateVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDelegateVector(builder, numElems)
def AddRecipient(builder, recipient): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(recipient), 0)
def ChannelAddRecipient(builder, recipient):
    """This method is deprecated. Please switch to AddRecipient."""
    return AddRecipient(builder, recipient)
def StartRecipientVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartRecipientVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRecipientVector(builder, numElems)
def AddAmount(builder, amount): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(amount), 0)
def ChannelAddAmount(builder, amount):
    """This method is deprecated. Please switch to AddAmount."""
    return AddAmount(builder, amount)
def StartAmountVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAmountVector(builder, numElems)
def AddTimeout(builder, timeout): builder.PrependUint32Slot(12, timeout, 0)
def ChannelAddTimeout(builder, timeout):
    """This method is deprecated. Please switch to AddTimeout."""
    return AddTimeout(builder, timeout)
def AddState(builder, state): builder.PrependUint8Slot(13, state, 0)
def ChannelAddState(builder, state):
    """This method is deprecated. Please switch to AddState."""
    return AddState(builder, state)
def AddClosingAt(builder, closingAt): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(closingAt), 0)
def ChannelAddClosingAt(builder, closingAt):
    """This method is deprecated. Please switch to AddClosingAt."""
    return AddClosingAt(builder, closingAt)
def StartClosingAtVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartClosingAtVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartClosingAtVector(builder, numElems)
def AddClosedAt(builder, closedAt): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(closedAt), 0)
def ChannelAddClosedAt(builder, closedAt):
    """This method is deprecated. Please switch to AddClosedAt."""
    return AddClosedAt(builder, closedAt)
def StartClosedAtVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartClosedAtVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartClosedAtVector(builder, numElems)
def AddCloseMmSig(builder, closeMmSig): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(closeMmSig), 0)
def ChannelAddCloseMmSig(builder, closeMmSig):
    """This method is deprecated. Please switch to AddCloseMmSig."""
    return AddCloseMmSig(builder, closeMmSig)
def StartCloseMmSigVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartCloseMmSigVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCloseMmSigVector(builder, numElems)
def AddCloseDelSig(builder, closeDelSig): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(closeDelSig), 0)
def ChannelAddCloseDelSig(builder, closeDelSig):
    """This method is deprecated. Please switch to AddCloseDelSig."""
    return AddCloseDelSig(builder, closeDelSig)
def StartCloseDelSigVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartCloseDelSigVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCloseDelSigVector(builder, numElems)
def AddCloseChannelSeq(builder, closeChannelSeq): builder.PrependUint32Slot(18, closeChannelSeq, 0)
def ChannelAddCloseChannelSeq(builder, closeChannelSeq):
    """This method is deprecated. Please switch to AddCloseChannelSeq."""
    return AddCloseChannelSeq(builder, closeChannelSeq)
def AddCloseBalance(builder, closeBalance): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(closeBalance), 0)
def ChannelAddCloseBalance(builder, closeBalance):
    """This method is deprecated. Please switch to AddCloseBalance."""
    return AddCloseBalance(builder, closeBalance)
def StartCloseBalanceVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartCloseBalanceVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCloseBalanceVector(builder, numElems)
def AddCloseIsFinal(builder, closeIsFinal): builder.PrependBoolSlot(20, closeIsFinal, 0)
def ChannelAddCloseIsFinal(builder, closeIsFinal):
    """This method is deprecated. Please switch to AddCloseIsFinal."""
    return AddCloseIsFinal(builder, closeIsFinal)
def AddClosedTx(builder, closedTx): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(closedTx), 0)
def ChannelAddClosedTx(builder, closedTx):
    """This method is deprecated. Please switch to AddClosedTx."""
    return AddClosedTx(builder, closedTx)
def StartClosedTxVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartClosedTxVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartClosedTxVector(builder, numElems)
def End(builder): return builder.EndObject()
def ChannelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)