# automatically generated by the FlatBuffers compiler, do not modify

# namespace: xbr

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table stores XBRToken._balances state.
class TokenBalance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TokenBalance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTokenBalance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TokenBalance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Primary key: XBR token owner address.
    # TokenBalance
    def OwnerAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # TokenBalance
    def OwnerAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # TokenBalance
    def OwnerAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TokenBalance
    def OwnerAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # XBR token owned.
    # TokenBalance
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # TokenBalance
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # TokenBalance
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TokenBalance
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def TokenBalanceStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddOwnerAddress(builder, ownerAddress): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ownerAddress), 0)
def TokenBalanceAddOwnerAddress(builder, ownerAddress):
    """This method is deprecated. Please switch to AddOwnerAddress."""
    return AddOwnerAddress(builder, ownerAddress)
def StartOwnerAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TokenBalanceStartOwnerAddressVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOwnerAddressVector(builder, numElems)
def AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def TokenBalanceAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def StartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def TokenBalanceStartValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartValueVector(builder, numElems)
def End(builder): return builder.EndObject()
def TokenBalanceEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)