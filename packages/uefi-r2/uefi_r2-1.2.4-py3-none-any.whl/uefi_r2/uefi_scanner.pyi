from typing import Any, List, Optional, Set
from uefi_r2.uefi_analyzer import NvramVariable as NvramVariable, UefiAnalyzer as UefiAnalyzer, UefiProtocol as UefiProtocol, UefiProtocolGuid as UefiProtocolGuid, UefiService as UefiService

class CodePattern:
    pattern: Any
    places: Any
    sw_smi_handlers: bool
    child_sw_smi_handlers: bool
    child_sw_smi_handlers_guids: Any
    def __init__(self, pattern: str, places: Optional[List[Any]]) -> None: ...
    @property
    def __dict__(self): ...

class UefiRule:
    def __init__(self, rule_path: Optional[str] = ..., rule_content: Optional[str] = ...) -> None: ...
    @property
    def author(self) -> Optional[str]: ...
    @property
    def name(self) -> Optional[str]: ...
    @property
    def version(self) -> Optional[str]: ...
    @property
    def namespace(self) -> Optional[str]: ...
    @property
    def license(self) -> Optional[str]: ...
    @property
    def cve_number(self) -> Optional[str]: ...
    @property
    def volume_guids(self) -> Optional[List[str]]: ...
    @property
    def vendor_id(self) -> Optional[str]: ...
    @property
    def cvss_score(self) -> Optional[str]: ...
    @property
    def advisory(self) -> Optional[str]: ...
    @property
    def description(self) -> Optional[str]: ...
    @property
    def url(self) -> Optional[str]: ...
    @property
    def code(self) -> List[Any]: ...
    @property
    def strings(self) -> List[str]: ...
    @property
    def wide_strings(self) -> List[str]: ...
    @property
    def hex_strings(self) -> List[str]: ...
    @property
    def nvram_vars(self) -> List[NvramVariable]: ...
    @property
    def protocols(self) -> List[UefiProtocol]: ...
    @property
    def ppi_list(self) -> List[UefiProtocol]: ...
    @property
    def protocol_guids(self) -> List[UefiProtocolGuid]: ...
    @property
    def esil_rules(self) -> List[List[str]]: ...

class UefiScanner:
    def __init__(self, uefi_analyzer: UefiAnalyzer, uefi_rule: UefiRule) -> None: ...
    @property
    def result(self) -> bool: ...

class UefiMultiScanner:
    def __init__(self, uefi_analyzer: UefiAnalyzer, uefi_rules: List[UefiRule]) -> None: ...
    @property
    def results(self) -> Set[int]: ...
