# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from axonclient.protos import command_pb2 as axonclient_dot_protos_dot_command__pb2


class CommandServiceStub(object):
    """The CommandService defines the gRPC requests necessary for subscribing command handlers, and dispatching commands."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenStream = channel.stream_stream(
            "/io.axoniq.axonserver.grpc.command.CommandService/OpenStream",
            request_serializer=axonclient_dot_protos_dot_command__pb2.CommandProviderOutbound.SerializeToString,
            response_deserializer=axonclient_dot_protos_dot_command__pb2.CommandProviderInbound.FromString,
        )
        self.Dispatch = channel.unary_unary(
            "/io.axoniq.axonserver.grpc.command.CommandService/Dispatch",
            request_serializer=axonclient_dot_protos_dot_command__pb2.Command.SerializeToString,
            response_deserializer=axonclient_dot_protos_dot_command__pb2.CommandResponse.FromString,
        )


class CommandServiceServicer(object):
    """The CommandService defines the gRPC requests necessary for subscribing command handlers, and dispatching commands."""

    def OpenStream(self, request_iterator, context):
        """Opens a stream allowing clients to register command handlers and receive commands."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Dispatch(self, request, context):
        """Dispatches the given command, returning the result of command execution"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "OpenStream": grpc.stream_stream_rpc_method_handler(
            servicer.OpenStream,
            request_deserializer=axonclient_dot_protos_dot_command__pb2.CommandProviderOutbound.FromString,
            response_serializer=axonclient_dot_protos_dot_command__pb2.CommandProviderInbound.SerializeToString,
        ),
        "Dispatch": grpc.unary_unary_rpc_method_handler(
            servicer.Dispatch,
            request_deserializer=axonclient_dot_protos_dot_command__pb2.Command.FromString,
            response_serializer=axonclient_dot_protos_dot_command__pb2.CommandResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "io.axoniq.axonserver.grpc.command.CommandService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CommandService(object):
    """The CommandService defines the gRPC requests necessary for subscribing command handlers, and dispatching commands."""

    @staticmethod
    def OpenStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/io.axoniq.axonserver.grpc.command.CommandService/OpenStream",
            axonclient_dot_protos_dot_command__pb2.CommandProviderOutbound.SerializeToString,
            axonclient_dot_protos_dot_command__pb2.CommandProviderInbound.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Dispatch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/io.axoniq.axonserver.grpc.command.CommandService/Dispatch",
            axonclient_dot_protos_dot_command__pb2.Command.SerializeToString,
            axonclient_dot_protos_dot_command__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
