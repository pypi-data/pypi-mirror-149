# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Voxel-based descriptors module"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _voxel_based
else:
    import _voxel_based

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


__all__ = [
    'set_grid_size',
    'get_grid_size',
    'get_volume',
    'get_vdwo',
    'get_burv_abs',
    'get_burv'
]

def set_grid_size(grid_size):
    r"""

    Changes the grid size for the voxels.

    set_grid_size(grid_size: float) -> bool

    :param grid_size: grid size for the numeric integration in \u212b
    :return: True if source could be set.

    """
    return _voxel_based.set_grid_size(grid_size)

def get_grid_size():
    r"""

    Returns the grid size for the voxels.

    get_grid_size() -> float

    :return: grid size

    """
    return _voxel_based.get_grid_size()

def get_volume(molecule):
    r"""

    Calculates the van der Waals volume via numeric integration.

    get_volume(molecule: openbabel.OBMol) -> float

    :param molecule: the structure
    :return: returns volume in \u212b\u00b3

    """
    return _voxel_based.get_volume(molecule)

def get_vdwo(receptor, ligand):
    r"""

    Calculates the van der Waals overlap volume between two structures via

    get_vdwo(receptor: openbabel.OBMol, ligand: openbabel.OBMol) -> float

    numeric integration.
    :param receptor: the first structure
    :param ligand: the second structure
    :return: returns volume in \u212b\u00b3

    """
    return _voxel_based.get_vdwo(receptor, ligand)

def get_burv_abs(*args):
    r"""

    Calculates V_bur based on the specified sphere via numeric integration.

    get_burv_abs(molecule: openbabel.OBMol, origin: openbabel.vector3,
            radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: origin of the sphere in \u212b
    :param radius: radius of the sphere in \u212b
    :return: returns V_bur

    get_burv(molecule: openbabel.OBMol, origin: int,
            exclude_origin: bool = False, radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: Index of the atom on which the sphere is placed.
    :param exclude_origin: Exclude origin from the calculation.
    :param radius: radius of the sphere in \u212b
    :return: returns V_bur

    """
    return _voxel_based.get_burv_abs(*args)

def get_burv(*args):
    r"""

    Calculates %V_bur based on the specified sphere via numeric integration.

    get_burv(molecule: openbabel.OBMol, origin: openbabel.vector3,
             radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: origin of the sphere in \u212b
    :param radius: radius of the sphere in \u212b
    :return: returns %V_bur

    get_burv(molecule: openbabel.OBMol, origin: int,
            exclude_origin: bool = False, radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: Index of the atom on which the sphere is placed.
    :param exclude_origin: Exclude origin from the calculation.
    :param radius: radius of the sphere in \u212b
    :return: returns %V_bur

    """
    return _voxel_based.get_burv(*args)


