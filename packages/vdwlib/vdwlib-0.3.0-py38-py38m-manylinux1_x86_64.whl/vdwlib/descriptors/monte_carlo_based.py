# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Monte-Carlo-based descriptors module"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _monte_carlo_based
else:
    import _monte_carlo_based

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _monte_carlo_based.delete_SwigPyIterator

    def value(self):
        return _monte_carlo_based.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _monte_carlo_based.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _monte_carlo_based.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _monte_carlo_based.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _monte_carlo_based.SwigPyIterator_equal(self, x)

    def copy(self):
        return _monte_carlo_based.SwigPyIterator_copy(self)

    def next(self):
        return _monte_carlo_based.SwigPyIterator_next(self)

    def __next__(self):
        return _monte_carlo_based.SwigPyIterator___next__(self)

    def previous(self):
        return _monte_carlo_based.SwigPyIterator_previous(self)

    def advance(self, n):
        return _monte_carlo_based.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _monte_carlo_based.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _monte_carlo_based.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _monte_carlo_based.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _monte_carlo_based.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _monte_carlo_based.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _monte_carlo_based.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _monte_carlo_based:
_monte_carlo_based.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _monte_carlo_based.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _monte_carlo_based.IntVector___nonzero__(self)

    def __bool__(self):
        return _monte_carlo_based.IntVector___bool__(self)

    def __len__(self):
        return _monte_carlo_based.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _monte_carlo_based.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _monte_carlo_based.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _monte_carlo_based.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _monte_carlo_based.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _monte_carlo_based.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _monte_carlo_based.IntVector___setitem__(self, *args)

    def pop(self):
        return _monte_carlo_based.IntVector_pop(self)

    def append(self, x):
        return _monte_carlo_based.IntVector_append(self, x)

    def empty(self):
        return _monte_carlo_based.IntVector_empty(self)

    def size(self):
        return _monte_carlo_based.IntVector_size(self)

    def swap(self, v):
        return _monte_carlo_based.IntVector_swap(self, v)

    def begin(self):
        return _monte_carlo_based.IntVector_begin(self)

    def end(self):
        return _monte_carlo_based.IntVector_end(self)

    def rbegin(self):
        return _monte_carlo_based.IntVector_rbegin(self)

    def rend(self):
        return _monte_carlo_based.IntVector_rend(self)

    def clear(self):
        return _monte_carlo_based.IntVector_clear(self)

    def get_allocator(self):
        return _monte_carlo_based.IntVector_get_allocator(self)

    def pop_back(self):
        return _monte_carlo_based.IntVector_pop_back(self)

    def erase(self, *args):
        return _monte_carlo_based.IntVector_erase(self, *args)

    def __init__(self, *args):
        _monte_carlo_based.IntVector_swiginit(self, _monte_carlo_based.new_IntVector(*args))

    def push_back(self, x):
        return _monte_carlo_based.IntVector_push_back(self, x)

    def front(self):
        return _monte_carlo_based.IntVector_front(self)

    def back(self):
        return _monte_carlo_based.IntVector_back(self)

    def assign(self, n, x):
        return _monte_carlo_based.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _monte_carlo_based.IntVector_resize(self, *args)

    def insert(self, *args):
        return _monte_carlo_based.IntVector_insert(self, *args)

    def reserve(self, n):
        return _monte_carlo_based.IntVector_reserve(self, n)

    def capacity(self):
        return _monte_carlo_based.IntVector_capacity(self)
    __swig_destroy__ = _monte_carlo_based.delete_IntVector

# Register IntVector in _monte_carlo_based:
_monte_carlo_based.IntVector_swigregister(IntVector)

__all__ = [
    'set_sample_size',
    'get_sample_size',
    'set_seed',
    'get_seed',
    'get_volume',
    'get_vdwo',
    'get_burv_abs',
    'get_burv',
    'get_surface',
    'get_sasa',
    'get_ams'
]

def set_sample_size(sample_size):
    r"""

    Changes the number of sample points for Monte Carlo.

    set_sample_size(sample_size: int) -> bool

    :param sample_size: new number of sample points
    :return: True if sample points could be set.

    """
    return _monte_carlo_based.set_sample_size(sample_size)

def get_sample_size():
    r"""

    Returns the number of sample points for Monte Carlo.

    get_sample_size() -> int

    :return: sample size

    """
    return _monte_carlo_based.get_sample_size()

def set_seed(seed):
    r"""

    Changes seed for Monte Carlo.

    set_seed(seed: int) -> bool

    :param seed: the new seed value
    :return: True if seed could be set.

    """
    return _monte_carlo_based.set_seed(seed)

def get_seed():
    r"""

    Returns the seed for Monte Carlo.

    get_seed() -> int

    :return: seed

    """
    return _monte_carlo_based.get_seed()

def get_volume(molecule):
    r"""

    Calculates the van der Waals volume via numeric integration.

    get_volume(molecule: openbabel.OBMol) -> float

    :param molecule: the structure
    :return: returns volume in \u212b\u00b3

    """
    return _monte_carlo_based.get_volume(molecule)

def get_vdwo(receptor, ligand):
    r"""

    Calculates the van der Waals overlap volume between two structures via

    get_vdwo(receptor: openbabel.OBMol, ligand: openbabel.OBMol) -> float

    numeric integration.
    :param receptor: the first structure
    :param ligand: the second structure
    :return: returns volume in \u212b\u00b3

    """
    return _monte_carlo_based.get_vdwo(receptor, ligand)

def get_burv_abs(*args):
    r"""

    Calculates V_bur based on the specified sphere via numeric integration.

    get_burv_abs(molecule: openbabel.OBMol, origin: openbabel.vector3,
        radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: origin of the sphere in \u212b
    :param radius: radius of the sphere in \u212b
    :return: returns V_bur

    get_burv(molecule: openbabel.OBMol, origin: int,
        exclude_origin: bool = False, radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: Index of the atom on which the sphere is placed.
    :param exclude_origin: Exclude origin from the calculation.
    :param radius: radius of the sphere in \u212b
    :return: returns V_bur

    """
    return _monte_carlo_based.get_burv_abs(*args)

def get_burv(*args):
    r"""

    Calculates %V_bur based on the specified sphere via numeric integration.

    get_burv(molecule: openbabel.OBMol, origin: openbabel.vector3,
             radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: origin of the sphere in \u212b
    :param radius: radius of the sphere in \u212b
    :return: returns %V_bur

    get_burv(molecule: openbabel.OBMol, origin: int,
        exclude_origin: bool = False, radius: float = 3.5) -> float

    :param molecule: the structure
    :param origin: Index of the atom on which the sphere is placed.
    :param exclude_origin: Exclude origin from the calculation.
    :param radius: radius of the sphere in \u212b
    :return: returns %V_bur

    """
    return _monte_carlo_based.get_burv(*args)

def get_surface(molecule):
    r"""

    Calculates surfce area based on Monte Carlo integration.

    get_surface(molecule: openbabel.OBMol) -> float

    :param molecule: the structure
    :return: returns Surface area in \u212b\u00b2

    """
    return _monte_carlo_based.get_surface(molecule)

def get_sasa(molecule, probe_radius=1.4):
    r"""

    Calculates solvent accessible surface area based on  Monte Carlo integration.

    get_sasa(molecule: openbabel.OBMol, probe_radius: float = 1.4) -> float

    :param molecule: the structure
    :return: returns Surface area in \u212b\u00b2

    """
    return _monte_carlo_based.get_sasa(molecule, probe_radius)

def get_ams(molecule, subset, probe_radius=1.4):
    r"""

    Calculates solvent accessible surface area based on  Monte Carlo integration.

    get_ams(molecule: openbabel.OBMol, list[int]: subset, probe_radius: float = 1.4) -> float

    :param molecule: the structure
    :return: returns Surface area in \u212b\u00b2

    """
    return _monte_carlo_based.get_ams(molecule, subset, probe_radius)


