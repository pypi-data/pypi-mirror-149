# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Van der Waals radii module"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _radii
else:
    import _radii

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _radii.delete_SwigPyIterator

    def value(self):
        return _radii.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _radii.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _radii.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _radii.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _radii.SwigPyIterator_equal(self, x)

    def copy(self):
        return _radii.SwigPyIterator_copy(self)

    def next(self):
        return _radii.SwigPyIterator_next(self)

    def __next__(self):
        return _radii.SwigPyIterator___next__(self)

    def previous(self):
        return _radii.SwigPyIterator_previous(self)

    def advance(self, n):
        return _radii.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _radii.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _radii.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _radii.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _radii.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _radii.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _radii.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _radii:
_radii.SwigPyIterator_swigregister(SwigPyIterator)

__all__ = [
    'set_radii_source',
    'get_radii_source',
    'get_radii_sources',
    'use_bondi_h',
    'set_radii_scale',
    'get_radii_scale',
    'get_radius'
]

def set_radii_source(radii_src, use_bondi_h=False):
    r"""

    Changes the source for the van der Waals radii.

    set_radii_source(radii_src: str, use_bondi_h: bool = False) -> bool

    :param radii_src: name of the source
    :param use_bondi_h: if true, the radius for hydrogen is set to 1.20 Å
    otherwise 1.09 or 1.10 Å is used.
    :return: True if source could be set.

    """
    return _radii.set_radii_source(radii_src, use_bondi_h)

def get_radii_source():
    r"""

    Get the name of the current van der Waals radii source.

    get_radii_source() -> str

    :return: source name

    """
    return _radii.get_radii_source()

def get_radii_sources():
    r"""

    Get the name of all available van der Waals radii sources.

    get_radii_sources() -> list[str]

    :return: source names

    """
    val = _radii.get_radii_sources()
    val = list(val)

    return val

def use_bondi_h():
    r"""

    Checks if the the Bondi radius is used for hydrogen (1.20 Å).

    use_bondi_h() -> bool

    :return: True if Bondi radius is used

    """
    return _radii.use_bondi_h()

def set_radii_scale(scale):
    r"""

    Changes the scale for the van der Waals radii.

    set_radii_scale(scale: float) -> bool

    :param scale: the new radii scale
    :return: True if scale could be set.

    """
    return _radii.set_radii_scale(scale)

def get_radii_scale():
    r"""

    Returns the currently used radii scale.

    get_radii_scale() -> float

    :return: radii scale

    """
    return _radii.get_radii_scale()

def get_radius(*args):
    r"""

    Returns the van der Waals radius for an atom or element number.

    get_radius(atomic_num: int) -> float

    :param atomic_num: element number
    :return: returns van der Waals radius in Å

    get_radius(atom: openbabel.OBAtom) -> float

    :param atom: atom
    :return: returns van der Waals radius in Å

    """
    return _radii.get_radius(*args)


