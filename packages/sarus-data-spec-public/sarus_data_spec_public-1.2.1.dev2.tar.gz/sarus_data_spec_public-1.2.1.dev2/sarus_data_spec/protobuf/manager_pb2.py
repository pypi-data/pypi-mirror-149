# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sarus_data_spec/protobuf/manager.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n&sarus_data_spec/protobuf/manager.proto\x12\x0fsarus_data_spec\"\x88\x01\n\x07Manager\x12\x0c\n\x04uuid\x18\x01 \x01(\t\x12<\n\nproperties\x18\x02 \x03(\x0b\x32(.sarus_data_spec.Manager.PropertiesEntry\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x62\x06proto3')



_MANAGER = DESCRIPTOR.message_types_by_name['Manager']
_MANAGER_PROPERTIESENTRY = _MANAGER.nested_types_by_name['PropertiesEntry']
Manager = _reflection.GeneratedProtocolMessageType('Manager', (_message.Message,), {

  'PropertiesEntry' : _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), {
    'DESCRIPTOR' : _MANAGER_PROPERTIESENTRY,
    '__module__' : 'sarus_data_spec.protobuf.manager_pb2'
    # @@protoc_insertion_point(class_scope:sarus_data_spec.Manager.PropertiesEntry)
    })
  ,
  'DESCRIPTOR' : _MANAGER,
  '__module__' : 'sarus_data_spec.protobuf.manager_pb2'
  # @@protoc_insertion_point(class_scope:sarus_data_spec.Manager)
  })
_sym_db.RegisterMessage(Manager)
_sym_db.RegisterMessage(Manager.PropertiesEntry)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _MANAGER_PROPERTIESENTRY._options = None
  _MANAGER_PROPERTIESENTRY._serialized_options = b'8\001'
  _MANAGER._serialized_start=60
  _MANAGER._serialized_end=196
  _MANAGER_PROPERTIESENTRY._serialized_start=147
  _MANAGER_PROPERTIESENTRY._serialized_end=196
# @@protoc_insertion_point(module_scope)
