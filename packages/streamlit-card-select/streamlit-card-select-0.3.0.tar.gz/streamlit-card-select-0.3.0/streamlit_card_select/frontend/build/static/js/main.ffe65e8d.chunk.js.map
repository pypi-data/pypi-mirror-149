{"version":3,"sources":["card.tsx","CardSelect.tsx","index.tsx"],"names":["CardComponent","theme","data","props","height","imgHeight","active","createTheme","palette","background","paper","primary","dark","ThemeProvider","Card","sx","maxWidth","onClick","option","elevation","CardActionArea","image","CardMedia","component","alt","CardContent","title","Typography","gutterBottom","variant","description","color","CardSelect","state","render","mode","base","main","primaryColor","text","textColor","undefined","args","setState","options","spacing","xs","sm","md","lg","Grid","container","map","card","item","key","setCard","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"uUAqDeA,EAvC4B,SAAC,GAAwB,IAI5DC,EAJsCC,EAAqB,EAArBA,KAASC,EAAY,iBAEzDC,EAASD,EAAME,WAAa,IAgBlC,OAZIJ,EADAE,EAAMG,OACEC,YAAYJ,EAAMF,MAAO,CAC7BO,QAAS,CACLC,WAAY,CACRC,MAAOP,EAAMF,MAAMO,QAAQG,QAAQC,SAKvCT,EAAMF,MAKd,kBAACY,EAAA,EAAD,CAAeZ,MAAOA,GACtB,kBAACa,EAAA,EAAD,CAAMC,GAAI,CAACC,SAAUb,EAAMa,UAAWC,QAAS,kBAAMd,EAAMc,QAAQf,EAAKgB,SAASC,UAAWhB,EAAMG,OAAS,EAAI,GAC3G,kBAACc,EAAA,EAAD,KACKlB,EAAKmB,MACF,kBAACC,EAAA,EAAD,CAAWC,UAAU,MAAMF,MAAOnB,EAAKmB,MAAOG,IAAI,QAAQpB,OAAQA,IAClE,KACJ,kBAACqB,EAAA,EAAD,KACKvB,EAAKwB,MACF,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKN,UAAU,OAAOrB,EAAKwB,OAC5D,KACFxB,EAAK4B,YACH,kBAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,iBAAiB7B,EAAK4B,aACxD,UC7BlBE,E,4MACGC,MAAQ,CAAE3B,OAAQ,M,EAElB4B,OAAS,WAAkB,IAAD,EACzBjC,EAAQM,YAAY,CACxBC,QAAS,CACP2B,KAAiC,WAA3B,YAAKhC,MAAMF,aAAX,eAAkBmC,MAAmB,QAAU,OACrDzB,QAAS,CACP0B,KAAM,EAAKlC,MAAMF,MAAOqC,cAE1BC,KAAM,CACJ5B,QAAS,EAAKR,MAAMF,MAAOuC,cAOlB,OADI,EAAKP,MAAhB3B,aAC8CmC,IAA/B,EAAKtC,MAAMuC,KAAX,SACrB,EAAKC,SAAS,CAAErC,OAAQ,EAAKH,MAAMuC,KAAX,UAI1B,IAAME,EAAsB,EAAKzC,MAAMuC,KAAX,QAGtBG,EAAU,EAAK1C,MAAMuC,KAAX,SAA8B,EACxCI,EAAK,EAAK3C,MAAMuC,KAAX,IAAyB,GAC9BK,EAAK,EAAK5C,MAAMuC,KAAX,IAAyB,EAC9BM,EAAK,EAAK7C,MAAMuC,KAAX,IAAyB,EAC9BO,EAAK,EAAK9C,MAAMuC,KAAX,IAAyB,EAC9BrC,EAAY,EAAKF,MAAMuC,KAAX,WAAgC,IAGlD,OACE,kBAACQ,EAAA,EAAD,CAAMC,WAAS,EAACN,QAASA,GACtBD,EAAQQ,KAAI,SAAAC,GAAI,OACf,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACR,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIM,IAAKF,EAAKnC,QACnD,kBAAC,EAAD,CAAehB,KAAMmD,EAAMpC,QAAS,EAAKuC,QAASlD,OAAQ,EAAK2B,MAAM3B,SAAS+C,EAAKnC,OAAQb,UAAWA,EAAWJ,MAAOA,U,EAOlIuD,QAAU,SAACtC,GACT,EAAKyB,SAAS,CAAErC,OAAQY,IAAS,kBAAMuC,IAAUC,kBAAkBxC,O,yBA9C9CyC,KAwDVC,cAAwB5B,GCpEvC6B,IAAS3B,OACP,kBAAC,IAAM4B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ffe65e8d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardActionArea, CardContent, CardMedia, createTheme, Theme, ThemeProvider, Typography } from \"@mui/material\";\nimport { CardData } from \"./card-data.model\";\n\n\ninterface CardProps {\n    data: CardData;\n    maxWidth?: number;\n    onClick: (id: string) => void;\n    active?: boolean;\n    imgHeight?: number;\n    theme: Theme;\n}\n\nconst CardComponent: React.FC<CardProps> = ({ data, ...props }) => {\n    // get the image height or default to 140px\n    const height = props.imgHeight || 140;\n\n    let theme: Theme;\n    if (props.active) {\n        theme = createTheme(props.theme, {\n            palette: {\n                background: {\n                    paper: props.theme.palette.primary.dark\n                }\n            }\n        })\n    } else {\n        theme = props.theme;\n    }\n\n    // render\n    return (\n        <ThemeProvider theme={theme}>\n        <Card sx={{maxWidth: props.maxWidth}} onClick={() => props.onClick(data.option)} elevation={props.active ? 8 : 3}>\n            <CardActionArea>\n                {data.image ? (\n                    <CardMedia component=\"img\" image={data.image} alt=\"image\" height={height} />\n                ) : null }\n                <CardContent>\n                    {data.title ? (\n                        <Typography gutterBottom variant=\"h5\" component=\"div\">{data.title}</Typography>\n                    ) : null}\n                    { data.description ? (\n                        <Typography variant=\"body2\" color=\"textSecondary\">{data.description}</Typography>\n                    ) : null }\n                </CardContent>\n            </CardActionArea>\n        </Card>\n        </ThemeProvider>\n    );\n}\n\nexport default CardComponent;","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport { CardData } from \"./card-data.model\";\nimport { createTheme, Grid } from \"@mui/material\";\nimport CardComponent from \"./card\";\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CardSelect extends StreamlitComponentBase {\n  public state = { active: null }\n\n  public render = (): ReactNode => {\n    const theme = createTheme({\n      palette: {\n        mode: this.props.theme?.base === 'light' ? 'light' : 'dark',\n        primary: {\n          main: this.props.theme!.primaryColor\n        },\n        text: {\n          primary: this.props.theme!.textColor\n        }\n      }\n    });\n\n    // handle default values\n    const { active } = this.state;\n    if (active === null && this.props.args['default'] !== undefined) {\n      this.setState({ active: this.props.args['default'] });\n    }\n\n    // get the options\n    const options: CardData[] = this.props.args['options'];\n\n    // get all the other options\n    const spacing = this.props.args['spacing'] || 2;\n    const xs = this.props.args['xs'] || 12;\n    const sm = this.props.args['sm'] || 6;\n    const md = this.props.args['md'] || 4;\n    const lg = this.props.args['lg'] || 3;\n    const imgHeight = this.props.args['imgHeight'] || 140;\n\n    // render the component\n    return (\n      <Grid container spacing={spacing}>\n        {options.map(card => (\n          <Grid item xs={xs} sm={sm} md={md} lg={lg} key={card.option}>\n            <CardComponent data={card} onClick={this.setCard} active={this.state.active===card.option} imgHeight={imgHeight} theme={theme} />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n\n  setCard = (option: string) => {\n    this.setState({ active: option}, () => Streamlit.setComponentValue(option));\n  }\n}\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(CardSelect)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CardSelect from \"./CardSelect\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardSelect />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}