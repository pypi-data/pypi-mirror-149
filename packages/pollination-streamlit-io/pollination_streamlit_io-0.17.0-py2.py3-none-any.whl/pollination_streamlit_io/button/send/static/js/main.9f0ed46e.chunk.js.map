{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","props","render","labels","args","className","styles","poButton","onClick","_onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","platform","newState","_dotNetRun","_rubyRun","_setStateNow","window","parent","sketchup","message","action","data","uniqueId","options","json","JSON","stringify","send_geometry","console","log","state","chrome","webview","postMessage","setState","prevState","Streamlit","setComponentValue","isFocused","initialState","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f0ed46e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface Options {\n  layer: string\n  units: string\n}\n\ninterface State {\n  action: string\n  data: string\n  uniqueId: string\n  options: Options\n  platform: string\n  isFocused: boolean\n}\n\ninterface Labels {\n  [key: string]: string;\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n    sketchup: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const action = this.props.args['action'] as string\n    const data = this.props.args['data'] as string\n    const uniqueId = this.props.args['uniqueId'] as string\n    const options = this.props.args['options'] as Options\n    const platform = this.props.args['platform'] as string\n\n    const initialState = {\n      action: action,\n      data: data,\n      uniqueId: uniqueId,\n      options: options,\n      platform: platform\n    } as State\n\n    this.state = {\n      ...initialState\n    }\n  }\n\n  public render = (): ReactNode => {\n    let labels: Labels = {\n      'BakeGeometry': 'Bake Geometry',\n      'ClearGeometry': 'Clear Geometry',\n      'DrawGeometry': 'Draw Geometry',\n      'DisableDraw': 'Disable Draw',\n      'BakePollinationModel': 'Bake Pollination Model'\n    }\n\n    const imgStyle = {\n      margin: '0px 3px 2px 0px'\n    }\n\n    return (\n      <span>\n        { this.props.args['action'] in labels && (\n        <button\n          className={styles.poButton}\n          onClick={this._onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <span>\n            <img style={imgStyle} src={process.env.PUBLIC_URL + '/img/pollination.png'} alt='logo' />\n          </span>\n          { labels[this.props.args['action']] }\n        </button>\n        )}\n      </span>\n    )\n  }\n\n  private _onClicked = (): void => {\n    const platform = this.props.args['platform']\n    let newState = { platform: platform } as State;\n    if (platform == \"Rhino\") { \n      newState = this._dotNetRun(); \n    } else if (platform == \"Sketchup\") {\n      newState = this._rubyRun(); \n    }\n    this._setStateNow(newState);\n  }\n\n  private _rubyRun = (): State => {\n    if (typeof window.parent.sketchup != 'undefined') \n    {\n      var message = {\n        action: this.props.args['action'],\n        data: this.props.args['data'],\n        uniqueId: this.props.args['uniqueId'],\n        options: this.props.args['options']\n      };\n      var json = JSON.stringify(message);\n      window.parent.sketchup.send_geometry(json);\n\n      var newState = {\n        action: message.action,\n        data: message.data,\n        uniqueId: message.uniqueId,\n        options: message.options,\n        platform: this.props.args['platform']\n      } as State;\n  \n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\n      return newState;\n    }\n    else {\n      console.log('[POLLINATION-DEBUG]: sketchup not found.');\n      return this.state;\n    }\n  }\n\n  private _dotNetRun = (): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      \n      var message = {\n        action: this.props.args['action'],\n        data: this.props.args['data'],\n        uniqueId: this.props.args['uniqueId'],\n        options: this.props.args['options']\n      };\n      var json = JSON.stringify(message);\n      window.parent.chrome.webview.postMessage(json);\n\n      var newState = {\n        action: message.action,\n        data: message.data,\n        uniqueId: message.uniqueId,\n        options: message.options,\n        platform: this.props.args['platform']\n      } as State;\n  \n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\n      return newState;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _setStateNow = (newState: State): void => {\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        action: newState.action,\n        data: newState.data,\n        uniqueId: newState.uniqueId,\n        options: newState.options\n      }),\n      () => Streamlit.setComponentValue(this.state.action)\n    );\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}