{"version":3,"sources":["style.module.scss","GetGeometry.tsx","index.tsx"],"names":["module","exports","Platform","GetGeometry","props","render","className","styles","poButton","onClick","_onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","state","isPollinationModel","Boolean","args","_setStateNow","newState","setState","prevState","geometry","identifier","syncToken","platform","Streamlit","setComponentValue","console","log","_rubyRun","window","parent","sketchup","message","get_model","hb_model","Geometry","Identifier","toLowerCase","_dotNetRun","selection","chrome","webview","hostObjects","sync","hbjson","PassPollinationModel","PassJsonGeometry","rhino","isFocused","initialState","this","stateIdentifiers","JSON","parse","id","split","includes","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ab0e0ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\n// Define here the available hosts\nenum Platform {\n  sketchup,\n  rhino,\n  revit\n}\n\ninterface State {\n  geometry: string\n  identifier: string\n  isPollinationModel: boolean\n  isFocused: boolean\n  syncToken: string\n  platform: string\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n    sketchup: any;\n  }\n}\n\nclass GetGeometry extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const isPollinationModel = this.props.args['isPollinationModel'] as boolean;\n    const platform = this.props.args['platform'] as string;\n    // const syncToken = this.props.args['syncToken'] as string\n\n    const initialState = { \n      geometry: '', \n      identifier: '',\n      isPollinationModel: isPollinationModel,\n      platform: platform.toLowerCase()\n    } as State\n\n    this.state = {\n      ...initialState\n    }\n  }\n\n  public render = (): ReactNode => {\n\n    const imgStyle = {\n      margin: '0px 3px 2px 0px'\n    }\n\n    return (\n      <span>\n        <button\n          className={styles.poButton}\n          onClick={this._onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <span>\n            <img style={imgStyle} \n            src={process.env.PUBLIC_URL + '/img/pollination.png'} \n            alt='logo' />\n          </span>\n          Get { this.state.isPollinationModel ? \n            'Pollination Model' : \n            'Geometry' } \n            { Boolean(this.props.args['syncToken']) && \n            ' (Sync)' }\n        </button>\n      </span>\n    )\n  }\n\n  componentDidUpdate() {\n    // Empty identifier is not allowed\n    if (this.state.identifier === '')\n      return;\n    \n    // Same synctoken is not allowed\n    if (this.props.args['syncToken'] \n      === this.state.syncToken )\n      return;\n\n    // Try get array GUIDs\n    const stateIdentifiers = JSON\n      .parse(this.state.identifier) as Array<string>;\n\n    // Empty GUIDs\n    if (!stateIdentifiers)\n      return;\n    \n    // Try get the key GUID as trigger\n    const id = this.props.args['syncToken']\n      .split(':', 1)[0];\n    \n    if (stateIdentifiers.includes(id)\n      && this.state.syncToken \n      !== this.props.args['syncToken'])\n    {\n      let newState = {} as State;\n      if (this.state.platform == Platform[Platform.rhino])\n      {\n        newState = this._dotNetRun();\n      }\n      this._setStateNow(newState);\n      console.log('[POLLINATION-DEBUG]: auto-update.');\n    }\n  }\n\n  private _setStateNow = (newState: State): \n    void => {\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        geometry: newState.geometry,\n        identifier: newState.identifier,\n        isPollinationModel: newState.isPollinationModel,\n        syncToken: newState.syncToken,\n        platform: newState.platform\n      }),\n      () => Streamlit.setComponentValue(this.state.geometry)\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private _rubyRun = (): State => {\n    if (typeof window.parent.sketchup != 'undefined') \n    {\n      // ruby invoke\n      let message = null;\n      if (this.props.args['isPollinationModel']) {\n        window.parent.sketchup.get_model();\n        message = window.parent.sketchup.hb_model;\n      } else {\n        // TODO: Geometry only not supported yet!\n        console.log('[POLLINATION-DEBUG]: sketchup geometry only not supported.');\n        return this.state;\n      }\n\n      if (message == null)\n        return this.state;\n\n      console.log(message)\n      const platform = this.props.args['platform'] as string;\n\n      var newState = {\n        geometry: message.Geometry, // model json\n        identifier: message.Identifier, // model id\n        isPollinationModel: this.props.args['isPollinationModel'],\n        syncToken: this.props.args['syncToken'],\n        platform: platform.toLowerCase()\n      } as State;\n  \n      return newState;\n    }\n    else {\n      console.log('[POLLINATION-DEBUG]: sketchup not found.');\n      return this.state;\n    }\n  }\n\n  private _dotNetRun = (selection: boolean = false): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n\n      // DotNet invoke\n      let message = null;\n      if (!this.props.args['isPollinationModel']) {\n        message = window.parent.chrome.webview\n        .hostObjects.sync.geometry.PassJsonGeometry(\n          this.props.args['key'], \n          selection);\n      } else {\n        message = window.parent.chrome.webview\n        .hostObjects.sync.hbjson.PassPollinationModel(\n          selection);\n      }\n      if (message == null)\n        return this.state;\n\n      const platform = this.props.args['platform'] as string;\n  \n      var newState = {\n        geometry: message.Geometry,\n        identifier: message.Identifier,\n        isPollinationModel: this.props.args['isPollinationModel'],\n        syncToken: this.props.args['syncToken'],\n        platform: platform.toLowerCase()\n      } as State;\n  \n      return newState;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _onClicked = (): void => {\n    // Run with selection enabled\n    // Geometries, list of GUIDs saved on runtime\n    // Pollination Model, Model GUID\n    const platform = this.props.args['platform'] as string;\n    let newState = { platform: platform.toLowerCase() } as State;\n    if (platform.toLowerCase() == Platform[Platform.rhino]\n      ) { \n      newState = this._dotNetRun(true); \n    } else if (platform.toLowerCase() == Platform[Platform.sketchup]) {\n      newState = this._rubyRun(); \n    }\n    this._setStateNow(newState);\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(GetGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport GetGeometry from \"./GetGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GetGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}