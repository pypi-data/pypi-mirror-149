# automatically generated by the FlatBuffers compiler, do not modify

# namespace: isp

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Step(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStep(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Step()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def StepBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x50\x46", size_prefixed=size_prefixed)

    # Step
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Step
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from communications.isp.Action import Action
            obj = Action()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StepStart(builder): builder.StartObject(1)
def StepAddAction(builder, action): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(action), 0)
def StepEnd(builder): return builder.EndObject()
