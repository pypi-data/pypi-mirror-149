# automatically generated by the FlatBuffers compiler, do not modify

# namespace: isp

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VehiclePhysics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVehiclePhysics(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VehiclePhysics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def VehiclePhysicsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x50\x46", size_prefixed=size_prefixed)

    # VehiclePhysics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VehiclePhysics
    def TorqueCurve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from communications.isp.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysics
    def MaxRpm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def Moi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def DampingRateFullThrottle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def DampingRateZeroThrottleClutchEngaged(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def DampingRateZeroThrottleClutchDisengaged(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def UseGearAutobox(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VehiclePhysics
    def GearSwitchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def ClutchStrength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def FinalRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def ForwardGears(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from communications.isp.ForwardGears import ForwardGears
            obj = ForwardGears()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysics
    def ForwardGearsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysics
    def ForwardGearsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # VehiclePhysics
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def DragCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysics
    def CenterOfMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from communications.isp.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysics
    def SteeringCurve(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from communications.isp.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysics
    def SteeringCurveLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysics
    def SteeringCurveIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # VehiclePhysics
    def UseSweepWheelCollision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VehiclePhysics
    def Wheels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from communications.isp.WheelPhysics import WheelPhysics
            obj = WheelPhysics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysics
    def WheelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysics
    def WheelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def VehiclePhysicsStart(builder): builder.StartObject(17)
def VehiclePhysicsAddTorqueCurve(builder, torqueCurve): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(torqueCurve), 0)
def VehiclePhysicsAddMaxRpm(builder, maxRpm): builder.PrependFloat64Slot(1, maxRpm, 0.0)
def VehiclePhysicsAddMoi(builder, moi): builder.PrependFloat64Slot(2, moi, 0.0)
def VehiclePhysicsAddDampingRateFullThrottle(builder, dampingRateFullThrottle): builder.PrependFloat64Slot(3, dampingRateFullThrottle, 0.0)
def VehiclePhysicsAddDampingRateZeroThrottleClutchEngaged(builder, dampingRateZeroThrottleClutchEngaged): builder.PrependFloat64Slot(4, dampingRateZeroThrottleClutchEngaged, 0.0)
def VehiclePhysicsAddDampingRateZeroThrottleClutchDisengaged(builder, dampingRateZeroThrottleClutchDisengaged): builder.PrependFloat64Slot(5, dampingRateZeroThrottleClutchDisengaged, 0.0)
def VehiclePhysicsAddUseGearAutobox(builder, useGearAutobox): builder.PrependBoolSlot(6, useGearAutobox, 0)
def VehiclePhysicsAddGearSwitchTime(builder, gearSwitchTime): builder.PrependFloat64Slot(7, gearSwitchTime, 0.0)
def VehiclePhysicsAddClutchStrength(builder, clutchStrength): builder.PrependFloat64Slot(8, clutchStrength, 0.0)
def VehiclePhysicsAddFinalRatio(builder, finalRatio): builder.PrependFloat64Slot(9, finalRatio, 0.0)
def VehiclePhysicsAddForwardGears(builder, forwardGears): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(forwardGears), 0)
def VehiclePhysicsStartForwardGearsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsAddMass(builder, mass): builder.PrependFloat64Slot(11, mass, 0.0)
def VehiclePhysicsAddDragCoefficient(builder, dragCoefficient): builder.PrependFloat64Slot(12, dragCoefficient, 0.0)
def VehiclePhysicsAddCenterOfMass(builder, centerOfMass): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(centerOfMass), 0)
def VehiclePhysicsAddSteeringCurve(builder, steeringCurve): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(steeringCurve), 0)
def VehiclePhysicsStartSteeringCurveVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsAddUseSweepWheelCollision(builder, useSweepWheelCollision): builder.PrependBoolSlot(15, useSweepWheelCollision, 0)
def VehiclePhysicsAddWheels(builder, wheels): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(wheels), 0)
def VehiclePhysicsStartWheelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsEnd(builder): return builder.EndObject()
