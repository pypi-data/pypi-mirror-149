image: $CI_REGISTRY_IMAGE:latest
stages:
  - test
  - deploy_pages
  - build_container
  - deploy_zenodo
  - pypi_publish

before_script:
  - cat /etc/os-release
  - env
  - mamba env update -f environment.yml -n base

test:
    stage: test
    script:
        - pip install ".[testing]"
        - coverage run -m unittest
        - coverage xml
        - cd gammalearn/data/example_settings
        - gammalearn experiment_settings_val.py
        - gammalearn experiment_settings_train_MC.py
        - gammalearn experiment_settings_test_MC.py
        - gammalearn experiment_settings_test_real.py
        - gammalearn experiment_settings_square_pixels.py
        - gammalearn experiment_settings_square_pixels_over.py
        - gammalearn experiment_settings_square_pixels_bicubic.py
        - gammalearn experiment_settings_file_spawn.py
        - gammalearn experiment_settings_profiler.py
        - gammalearn experiment_settings_autoencoder.py
        - gammalearn experiment_settings_domain_adaptation.py
        - gammalearn experiment_settings_clean_channel.py

    artifacts:
      reports:
        cobertura: coverage.xml


pages:
    stage: deploy_pages
    script:
      - git fetch --all --tags
      - git checkout $CI_COMMIT_REF_NAME
      - pip install .
      - pip install -U -r docs/doc_requirements.txt
      - sphinx-build -b html docs public
    artifacts:
      paths:
        - public
    only:
      - master


# memory issues to solve: https://gitlab.in2p3.fr/gammalearn/gammalearn/-/jobs/480738
# build_docker:
#   stage: build_container
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [""]
#   script:
#     - mkdir -p /kaniko/.docker
#     - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
#     - >-
#       /kaniko/executor
#       --context "${CI_PROJECT_DIR}"
#       --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
#       --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
#       --destination "${CI_REGISTRY_IMAGE}:latest"
#   rules:
#     - if: $CI_COMMIT_TAG


deploy_zenodo:
  stage: deploy_zenodo
  image: gitlab-registry.in2p3.fr/escape2020/wp3/eossr:v0.6
  before_script:
    - eossr-check-connection-zenodo --token $ZENODO_TOKEN -p $CI_PROJECT_DIR
  script:
    - eossr-upload-repository -t $ZENODO_TOKEN -i $CI_PROJECT_DIR --archive-name $CI_PROJECT_NAME.zip -id $ZENODO_PROJECT_ID
  only:
    - tags


pypi_publish:
  stage: pypi_publish
  image: python:3.8
  before_script:
    - apt-get update -y; apt-get install git -y;
    - pip install --upgrade pip; pip install twine;
    - export LAST_RELEASE=`git ls-remote --tags --refs --sort="v:refname" $CI_PROJECT_URL.git | tail -n1 | sed 's/.*\///'`
    - echo $LAST_RELEASE
  script:
    - python setup.py sdist
    - echo "upload to gitlab registry"
    - python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/ -u gitlab-ci-token -p ${CI_JOB_TOKEN} dist/*
    - echo "upload to pypi registry"
    - twine upload --repository-url https://upload.pypi.org/legacy/ dist/* -u __token__ -p ${PYPI_TOKEN}
  only:
    - tags
