{
  "src/lib/components/ConfigReceiver.react.js": {
    "description": "A config receiver listening for `window.postMessage()`\n\n@hideconstructor\n\n@example\n rec = dxc.ConfigReceiver(\n          id=\"plotConfig\",\n          token=\"test\"\n )\n\n window.postMessage({config: \"Test\", token:\"test\" })\n@public",
    "displayName": "ConfigReceiver",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks.\n@type {string}"
      },
      "token": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A token used to define the configuration across frames.\n@type {string}"
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Prop The resulting configuration of the plot.\n@type {Object}"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks.\n@private"
      }
    }
  },
  "src/lib/components/Configurator.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/configurator.png\"/>\n</div>\n\n\nThe configurator component helps to define plot definitions based on the\nmetadata of a dataframe.\nDifferent configuration parts like `Filter`, `Transform` or `Plotter`\nare combined in a single accordion component.\n\nThe metadata is used to compute the available parameters after data \ntransformations and newly available colums are adjusted automatically.\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\n dxc.Configurator(\n          id=\"plotConfig\",\n          meta=meta,\n )\n@public",
    "displayName": "Configurator",
    "methods": [
      {
        "name": "fix_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_sub_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "config_dict",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_props",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "graphId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks.\n@type {string}"
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata the plotter selection is based on.\n@type {Object}"
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Prop The resulting configuration of the plot.\n@type {Object}"
      },
      "showFilter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Filter panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showTransform": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Transform panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showPlotter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Plot panel\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showMetadata": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Metadata panel\n@type {boolean}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showParameterization": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Parameterization panel\n@type {boolean}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showStore": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Store panel\n@type {boolean}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showUpdate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the update plot button\n@type {boolean}",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks.\n@private"
      }
    }
  },
  "src/lib/components/Filter.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/filter.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/filter-modal.png\"/>\n</div>\n\n\nThe filter component allows filters to be set on individual columns.\n\nThese are all combined with and.\n\nThere are the options like >, <, = for numerical, as well as isin etc. for categorical columns.\nPossible options are given by the `meta` props.\n\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Filter(\n  id=\"filter\",\n  meta=meta\n)\n@public",
    "displayName": "Filter",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filter_to_string",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_filter_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Graph.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/graph.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/graph-table.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/graph-modal.png\"/>\n</div>\n\n\nThe `Graph` component is a combination of the original dash `Graph` and the dash `data_table`.\n\nIt can not only be used to render a plotly.js-powered data visualization,\nbut also shows a searchable table, if only data is submitted.\n\nIn addition, there is the possibility to add plot parameters as `defParams` and \nthe dataframe `meta` data.  \nThis automatically adds a configurator modal, which can be opened via a button\nat the bottom right.\n\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Graph(\n    id=\"fig\",\n    meta=meta,\n    defParams={}\n)\n@public",
    "displayName": "Graph",
    "methods": [
      {
        "name": "isGraph",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "sendSavedData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "image",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "saveClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "inIframe",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "clearState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dataKey",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n@type {string}"
      },
      "defParams": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Configuration to describe the plot features"
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata the plotter selection is based on.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plotly.com/javascript/reference\n\n`config` is set separately by the `config` property",
        "defaultValue": {
          "value": "{\n    data: [],\n    layout: {},\n    frames: [],\n}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The data selected in the plot or in the table"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the parent div",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      }
    }
  },
  "src/lib/components/Localstore.react.js": {
    "description": "",
    "displayName": "Localstore",
    "methods": [
      {
        "name": "getStore",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveStore",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_store",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLoadClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleLoadShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_load_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/MetaCheck.react.js": {
    "description": "Helper to show the metadata of the data inside a component.\n\nCan be usefull, to check how a data transformation works.\n\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/metacheck.png\"/>\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.MetaCheck(\n???\n)\n@public",
    "displayName": "MetaCheck",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Parameterize.react.js": {
    "description": "",
    "displayName": "Parameterize",
    "methods": [
      {
        "name": "handleAddClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleAddShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveParams",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_parameters",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_add_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "path",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_col_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "col",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_manual_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "value",
            "type": null
          },
          {
            "name": "type",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Plotter.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/plotter.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/plotter-modal.png\"/>\n</div>\n\nThe `Plotter` component helps to define the right plot parameters in the style of plotly.express.\n\nThere are several different plot types, and some of them are given directly by plotly.express, like:\n<ul style=\"margin-left: 20px;\">\n  <li>scatter</li>\n  <li>box</li>\n  <li>violin</li>\n  <li>bar</li>\n  <li>scatter_matrix</li>\n</ul>\n\nOthers are computed more indirect, like:\n<ul style=\"margin-left: 20px;\">\n  <li>imshow</li>\n  <li>bar_count</li>\n  <li>histogram_line</li>\n  <li>probability</li>\n  <li>table</li>\n</ul>\n\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Plotter(\n???\n)\n@public",
    "displayName": "Plotter",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Transform.react.js": {
    "description": "<div style=\"width:450px; margin-left: 20px; float: right;  margin-top: -150px;\">\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/transform.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/transform-modal.png\"/>\n<img src=\"https://raw.githubusercontent.com/VK/dash-express-components/main/.media/transform-types.png\"/>\n</div>\n\nThe `Transform` component helps to create user defined data transformations.\nCurrently basic transformations are available, like:\n\n<ul style=\"margin-left: 20px;\">\n   <li><b>eval</b></li>\n   <li><b>groupby([...]).aggr([...])</b></li>\n   <li><b>melt</b></li>\n   <li><b>wide_to_long</b></li>\n   <li><b>replace</b></li>\n   <li><b>rename</b></li>\n</ul>\n@hideconstructor\n\n@example\nimport dash_express_components as dxc\nimport plotly.express as px\n\nmeta = dxc.get_meta(px.data.gapminder())\n\ndxc.Transform(\n   id=\"transform\",\n   meta=meta\n)\n@public",
    "displayName": "Transform",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChooseClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChooseShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_transform_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_choose_modal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  }
}