// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphscope/proto/op_def.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graphscope_2fproto_2fop_5fdef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graphscope_2fproto_2fop_5fdef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "graphscope/proto/attr_value.pb.h"
#include "graphscope/proto/error_codes.pb.h"
#include "graphscope/proto/graph_def.pb.h"
#include "graphscope/proto/types.pb.h"
#include "graphscope/proto/query_args.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graphscope_2fproto_2fop_5fdef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graphscope_2fproto_2fop_5fdef_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graphscope_2fproto_2fop_5fdef_2eproto;
namespace gs {
namespace rpc {
class DagDef;
struct DagDefDefaultTypeInternal;
extern DagDefDefaultTypeInternal _DagDef_default_instance_;
class OpDef;
struct OpDefDefaultTypeInternal;
extern OpDefDefaultTypeInternal _OpDef_default_instance_;
class OpDef_AttrEntry_DoNotUse;
struct OpDef_AttrEntry_DoNotUseDefaultTypeInternal;
extern OpDef_AttrEntry_DoNotUseDefaultTypeInternal _OpDef_AttrEntry_DoNotUse_default_instance_;
class OpResult;
struct OpResultDefaultTypeInternal;
extern OpResultDefaultTypeInternal _OpResult_default_instance_;
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::DagDef* Arena::CreateMaybeMessage<::gs::rpc::DagDef>(Arena*);
template<> ::gs::rpc::OpDef* Arena::CreateMaybeMessage<::gs::rpc::OpDef>(Arena*);
template<> ::gs::rpc::OpDef_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::OpDef_AttrEntry_DoNotUse>(Arena*);
template<> ::gs::rpc::OpResult* Arena::CreateMaybeMessage<::gs::rpc::OpResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {

// ===================================================================

class OpDef_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpDef_AttrEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  OpDef_AttrEntry_DoNotUse();
  explicit constexpr OpDef_AttrEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OpDef_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OpDef_AttrEntry_DoNotUse& other);
  static const OpDef_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpDef_AttrEntry_DoNotUse*>(&_OpDef_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OpDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.OpDef) */ {
 public:
  inline OpDef() : OpDef(nullptr) {}
  ~OpDef() override;
  explicit constexpr OpDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpDef(const OpDef& from);
  OpDef(OpDef&& from) noexcept
    : OpDef() {
    *this = ::std::move(from);
  }

  inline OpDef& operator=(const OpDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef& operator=(OpDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpDef* internal_default_instance() {
    return reinterpret_cast<const OpDef*>(
               &_OpDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpDef& a, OpDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDef* New() const final {
    return new OpDef();
  }

  OpDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpDef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.OpDef";
  }
  protected:
  explicit OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParentsFieldNumber = 4,
    kAttrFieldNumber = 6,
    kNameFieldNumber = 1,
    kKeyFieldNumber = 2,
    kLargeAttrFieldNumber = 7,
    kQueryArgsFieldNumber = 8,
    kOpFieldNumber = 3,
    kOutputTypeFieldNumber = 5,
    kFetchFieldNumber = 9,
  };
  // repeated string parents = 4;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  const std::string& parents(int index) const;
  std::string* mutable_parents(int index);
  void set_parents(int index, const std::string& value);
  void set_parents(int index, std::string&& value);
  void set_parents(int index, const char* value);
  void set_parents(int index, const char* value, size_t size);
  std::string* add_parents();
  void add_parents(const std::string& value);
  void add_parents(std::string&& value);
  void add_parents(const char* value);
  void add_parents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parents();
  private:
  const std::string& _internal_parents(int index) const;
  std::string* _internal_add_parents();
  public:

  // map<int32, .gs.rpc.AttrValue> attr = 6;
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >&
      _internal_attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >*
      _internal_mutable_attr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >*
      mutable_attr();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .gs.rpc.LargeAttrValue large_attr = 7;
  bool has_large_attr() const;
  private:
  bool _internal_has_large_attr() const;
  public:
  void clear_large_attr();
  const ::gs::rpc::LargeAttrValue& large_attr() const;
  PROTOBUF_MUST_USE_RESULT ::gs::rpc::LargeAttrValue* release_large_attr();
  ::gs::rpc::LargeAttrValue* mutable_large_attr();
  void set_allocated_large_attr(::gs::rpc::LargeAttrValue* large_attr);
  private:
  const ::gs::rpc::LargeAttrValue& _internal_large_attr() const;
  ::gs::rpc::LargeAttrValue* _internal_mutable_large_attr();
  public:
  void unsafe_arena_set_allocated_large_attr(
      ::gs::rpc::LargeAttrValue* large_attr);
  ::gs::rpc::LargeAttrValue* unsafe_arena_release_large_attr();

  // .gs.rpc.QueryArgs query_args = 8;
  bool has_query_args() const;
  private:
  bool _internal_has_query_args() const;
  public:
  void clear_query_args();
  const ::gs::rpc::QueryArgs& query_args() const;
  PROTOBUF_MUST_USE_RESULT ::gs::rpc::QueryArgs* release_query_args();
  ::gs::rpc::QueryArgs* mutable_query_args();
  void set_allocated_query_args(::gs::rpc::QueryArgs* query_args);
  private:
  const ::gs::rpc::QueryArgs& _internal_query_args() const;
  ::gs::rpc::QueryArgs* _internal_mutable_query_args();
  public:
  void unsafe_arena_set_allocated_query_args(
      ::gs::rpc::QueryArgs* query_args);
  ::gs::rpc::QueryArgs* unsafe_arena_release_query_args();

  // .gs.rpc.OperationType op = 3;
  void clear_op();
  ::gs::rpc::OperationType op() const;
  void set_op(::gs::rpc::OperationType value);
  private:
  ::gs::rpc::OperationType _internal_op() const;
  void _internal_set_op(::gs::rpc::OperationType value);
  public:

  // .gs.rpc.OutputType output_type = 5;
  void clear_output_type();
  ::gs::rpc::OutputType output_type() const;
  void set_output_type(::gs::rpc::OutputType value);
  private:
  ::gs::rpc::OutputType _internal_output_type() const;
  void _internal_set_output_type(::gs::rpc::OutputType value);
  public:

  // bool fetch = 9;
  void clear_fetch();
  bool fetch() const;
  void set_fetch(bool value);
  private:
  bool _internal_fetch() const;
  void _internal_set_fetch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.OpDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parents_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OpDef_AttrEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::gs::rpc::LargeAttrValue* large_attr_;
  ::gs::rpc::QueryArgs* query_args_;
  int op_;
  int output_type_;
  bool fetch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fop_5fdef_2eproto;
};
// -------------------------------------------------------------------

class OpResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.OpResult) */ {
 public:
  inline OpResult() : OpResult(nullptr) {}
  ~OpResult() override;
  explicit constexpr OpResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpResult(const OpResult& from);
  OpResult(OpResult&& from) noexcept
    : OpResult() {
    *this = ::std::move(from);
  }

  inline OpResult& operator=(const OpResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpResult& operator=(OpResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpResult* internal_default_instance() {
    return reinterpret_cast<const OpResult*>(
               &_OpResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpResult& a, OpResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OpResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpResult* New() const final {
    return new OpResult();
  }

  OpResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.OpResult";
  }
  protected:
  explicit OpResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kMetricsFieldNumber = 3,
    kErrorMsgFieldNumber = 4,
    kResultFieldNumber = 6,
    kHandleFieldNumber = 7,
    kConfigFieldNumber = 8,
    kExtraInfoFieldNumber = 9,
    kGraphDefFieldNumber = 31,
    kCodeFieldNumber = 1,
    kHasLargeResultFieldNumber = 5,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string metrics = 3;
  void clear_metrics();
  const std::string& metrics() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metrics(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metrics();
  PROTOBUF_MUST_USE_RESULT std::string* release_metrics();
  void set_allocated_metrics(std::string* metrics);
  private:
  const std::string& _internal_metrics() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metrics(const std::string& value);
  std::string* _internal_mutable_metrics();
  public:

  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // bytes result = 6;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_MUST_USE_RESULT std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // bytes handle = 7;
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_MUST_USE_RESULT std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // bytes config = 8;
  void clear_config();
  const std::string& config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config();
  PROTOBUF_MUST_USE_RESULT std::string* release_config();
  void set_allocated_config(std::string* config);
  private:
  const std::string& _internal_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config(const std::string& value);
  std::string* _internal_mutable_config();
  public:

  // bytes extra_info = 9;
  void clear_extra_info();
  const std::string& extra_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_extra_info();
  void set_allocated_extra_info(std::string* extra_info);
  private:
  const std::string& _internal_extra_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_info(const std::string& value);
  std::string* _internal_mutable_extra_info();
  public:

  // .gs.rpc.graph.GraphDefPb graph_def = 31;
  bool has_graph_def() const;
  private:
  bool _internal_has_graph_def() const;
  public:
  void clear_graph_def();
  const ::gs::rpc::graph::GraphDefPb& graph_def() const;
  PROTOBUF_MUST_USE_RESULT ::gs::rpc::graph::GraphDefPb* release_graph_def();
  ::gs::rpc::graph::GraphDefPb* mutable_graph_def();
  void set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def);
  private:
  const ::gs::rpc::graph::GraphDefPb& _internal_graph_def() const;
  ::gs::rpc::graph::GraphDefPb* _internal_mutable_graph_def();
  public:
  void unsafe_arena_set_allocated_graph_def(
      ::gs::rpc::graph::GraphDefPb* graph_def);
  ::gs::rpc::graph::GraphDefPb* unsafe_arena_release_graph_def();

  // .gs.rpc.Code code = 1;
  void clear_code();
  ::gs::rpc::Code code() const;
  void set_code(::gs::rpc::Code value);
  private:
  ::gs::rpc::Code _internal_code() const;
  void _internal_set_code(::gs::rpc::Code value);
  public:

  // bool has_large_result = 5;
  void clear_has_large_result();
  bool has_large_result() const;
  void set_has_large_result(bool value);
  private:
  bool _internal_has_large_result() const;
  void _internal_set_has_large_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.OpResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_info_;
  ::gs::rpc::graph::GraphDefPb* graph_def_;
  int code_;
  bool has_large_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fop_5fdef_2eproto;
};
// -------------------------------------------------------------------

class DagDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.DagDef) */ {
 public:
  inline DagDef() : DagDef(nullptr) {}
  ~DagDef() override;
  explicit constexpr DagDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DagDef(const DagDef& from);
  DagDef(DagDef&& from) noexcept
    : DagDef() {
    *this = ::std::move(from);
  }

  inline DagDef& operator=(const DagDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline DagDef& operator=(DagDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DagDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const DagDef* internal_default_instance() {
    return reinterpret_cast<const DagDef*>(
               &_DagDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DagDef& a, DagDef& b) {
    a.Swap(&b);
  }
  inline void Swap(DagDef* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DagDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DagDef* New() const final {
    return new DagDef();
  }

  DagDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DagDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DagDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DagDef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DagDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.DagDef";
  }
  protected:
  explicit DagDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // repeated .gs.rpc.OpDef op = 1;
  int op_size() const;
  private:
  int _internal_op_size() const;
  public:
  void clear_op();
  ::gs::rpc::OpDef* mutable_op(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >*
      mutable_op();
  private:
  const ::gs::rpc::OpDef& _internal_op(int index) const;
  ::gs::rpc::OpDef* _internal_add_op();
  public:
  const ::gs::rpc::OpDef& op(int index) const;
  ::gs::rpc::OpDef* add_op();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >&
      op() const;

  // @@protoc_insertion_point(class_scope:gs.rpc.DagDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef > op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fop_5fdef_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OpDef

// string name = 1;
inline void OpDef::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpDef::name() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.name)
}
inline std::string* OpDef::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.name)
  return _s;
}
inline const std::string& OpDef::_internal_name() const {
  return name_.Get();
}
inline void OpDef::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpDef::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpDef::release_name() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpDef::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.name)
}

// string key = 2;
inline void OpDef::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& OpDef::key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpDef::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.key)
}
inline std::string* OpDef::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.key)
  return _s;
}
inline const std::string& OpDef::_internal_key() const {
  return key_.Get();
}
inline void OpDef::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpDef::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpDef::release_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpDef::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.key)
}

// .gs.rpc.OperationType op = 3;
inline void OpDef::clear_op() {
  op_ = 0;
}
inline ::gs::rpc::OperationType OpDef::_internal_op() const {
  return static_cast< ::gs::rpc::OperationType >(op_);
}
inline ::gs::rpc::OperationType OpDef::op() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.op)
  return _internal_op();
}
inline void OpDef::_internal_set_op(::gs::rpc::OperationType value) {
  
  op_ = value;
}
inline void OpDef::set_op(::gs::rpc::OperationType value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.op)
}

// repeated string parents = 4;
inline int OpDef::_internal_parents_size() const {
  return parents_.size();
}
inline int OpDef::parents_size() const {
  return _internal_parents_size();
}
inline void OpDef::clear_parents() {
  parents_.Clear();
}
inline std::string* OpDef::add_parents() {
  std::string* _s = _internal_add_parents();
  // @@protoc_insertion_point(field_add_mutable:gs.rpc.OpDef.parents)
  return _s;
}
inline const std::string& OpDef::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline const std::string& OpDef::parents(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.parents)
  return _internal_parents(index);
}
inline std::string* OpDef::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.parents)
  return parents_.Mutable(index);
}
inline void OpDef::set_parents(int index, const std::string& value) {
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.parents)
}
inline void OpDef::set_parents(int index, std::string&& value) {
  parents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.parents)
}
inline void OpDef::set_parents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gs.rpc.OpDef.parents)
}
inline void OpDef::set_parents(int index, const char* value, size_t size) {
  parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gs.rpc.OpDef.parents)
}
inline std::string* OpDef::_internal_add_parents() {
  return parents_.Add();
}
inline void OpDef::add_parents(const std::string& value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gs.rpc.OpDef.parents)
}
inline void OpDef::add_parents(std::string&& value) {
  parents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gs.rpc.OpDef.parents)
}
inline void OpDef::add_parents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gs.rpc.OpDef.parents)
}
inline void OpDef::add_parents(const char* value, size_t size) {
  parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gs.rpc.OpDef.parents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDef::parents() const {
  // @@protoc_insertion_point(field_list:gs.rpc.OpDef.parents)
  return parents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDef::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.OpDef.parents)
  return &parents_;
}

// .gs.rpc.OutputType output_type = 5;
inline void OpDef::clear_output_type() {
  output_type_ = 0;
}
inline ::gs::rpc::OutputType OpDef::_internal_output_type() const {
  return static_cast< ::gs::rpc::OutputType >(output_type_);
}
inline ::gs::rpc::OutputType OpDef::output_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.output_type)
  return _internal_output_type();
}
inline void OpDef::_internal_set_output_type(::gs::rpc::OutputType value) {
  
  output_type_ = value;
}
inline void OpDef::set_output_type(::gs::rpc::OutputType value) {
  _internal_set_output_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.output_type)
}

// map<int32, .gs.rpc.AttrValue> attr = 6;
inline int OpDef::_internal_attr_size() const {
  return attr_.size();
}
inline int OpDef::attr_size() const {
  return _internal_attr_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >&
OpDef::_internal_attr() const {
  return attr_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >&
OpDef::attr() const {
  // @@protoc_insertion_point(field_map:gs.rpc.OpDef.attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >*
OpDef::_internal_mutable_attr() {
  return attr_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gs::rpc::AttrValue >*
OpDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.OpDef.attr)
  return _internal_mutable_attr();
}

// .gs.rpc.LargeAttrValue large_attr = 7;
inline bool OpDef::_internal_has_large_attr() const {
  return this != internal_default_instance() && large_attr_ != nullptr;
}
inline bool OpDef::has_large_attr() const {
  return _internal_has_large_attr();
}
inline const ::gs::rpc::LargeAttrValue& OpDef::_internal_large_attr() const {
  const ::gs::rpc::LargeAttrValue* p = large_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::LargeAttrValue&>(
      ::gs::rpc::_LargeAttrValue_default_instance_);
}
inline const ::gs::rpc::LargeAttrValue& OpDef::large_attr() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.large_attr)
  return _internal_large_attr();
}
inline void OpDef::unsafe_arena_set_allocated_large_attr(
    ::gs::rpc::LargeAttrValue* large_attr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_attr_);
  }
  large_attr_ = large_attr;
  if (large_attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpDef.large_attr)
}
inline ::gs::rpc::LargeAttrValue* OpDef::release_large_attr() {
  
  ::gs::rpc::LargeAttrValue* temp = large_attr_;
  large_attr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::LargeAttrValue* OpDef::unsafe_arena_release_large_attr() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.large_attr)
  
  ::gs::rpc::LargeAttrValue* temp = large_attr_;
  large_attr_ = nullptr;
  return temp;
}
inline ::gs::rpc::LargeAttrValue* OpDef::_internal_mutable_large_attr() {
  
  if (large_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::LargeAttrValue>(GetArenaForAllocation());
    large_attr_ = p;
  }
  return large_attr_;
}
inline ::gs::rpc::LargeAttrValue* OpDef::mutable_large_attr() {
  ::gs::rpc::LargeAttrValue* _msg = _internal_mutable_large_attr();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.large_attr)
  return _msg;
}
inline void OpDef::set_allocated_large_attr(::gs::rpc::LargeAttrValue* large_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_attr_);
  }
  if (large_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_attr));
    if (message_arena != submessage_arena) {
      large_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_attr, submessage_arena);
    }
    
  } else {
    
  }
  large_attr_ = large_attr;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.large_attr)
}

// .gs.rpc.QueryArgs query_args = 8;
inline bool OpDef::_internal_has_query_args() const {
  return this != internal_default_instance() && query_args_ != nullptr;
}
inline bool OpDef::has_query_args() const {
  return _internal_has_query_args();
}
inline const ::gs::rpc::QueryArgs& OpDef::_internal_query_args() const {
  const ::gs::rpc::QueryArgs* p = query_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::QueryArgs&>(
      ::gs::rpc::_QueryArgs_default_instance_);
}
inline const ::gs::rpc::QueryArgs& OpDef::query_args() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.query_args)
  return _internal_query_args();
}
inline void OpDef::unsafe_arena_set_allocated_query_args(
    ::gs::rpc::QueryArgs* query_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_args_);
  }
  query_args_ = query_args;
  if (query_args) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpDef.query_args)
}
inline ::gs::rpc::QueryArgs* OpDef::release_query_args() {
  
  ::gs::rpc::QueryArgs* temp = query_args_;
  query_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::QueryArgs* OpDef::unsafe_arena_release_query_args() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpDef.query_args)
  
  ::gs::rpc::QueryArgs* temp = query_args_;
  query_args_ = nullptr;
  return temp;
}
inline ::gs::rpc::QueryArgs* OpDef::_internal_mutable_query_args() {
  
  if (query_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::QueryArgs>(GetArenaForAllocation());
    query_args_ = p;
  }
  return query_args_;
}
inline ::gs::rpc::QueryArgs* OpDef::mutable_query_args() {
  ::gs::rpc::QueryArgs* _msg = _internal_mutable_query_args();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpDef.query_args)
  return _msg;
}
inline void OpDef::set_allocated_query_args(::gs::rpc::QueryArgs* query_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_args_);
  }
  if (query_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_args));
    if (message_arena != submessage_arena) {
      query_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_args, submessage_arena);
    }
    
  } else {
    
  }
  query_args_ = query_args;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpDef.query_args)
}

// bool fetch = 9;
inline void OpDef::clear_fetch() {
  fetch_ = false;
}
inline bool OpDef::_internal_fetch() const {
  return fetch_;
}
inline bool OpDef::fetch() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpDef.fetch)
  return _internal_fetch();
}
inline void OpDef::_internal_set_fetch(bool value) {
  
  fetch_ = value;
}
inline void OpDef::set_fetch(bool value) {
  _internal_set_fetch(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpDef.fetch)
}

// -------------------------------------------------------------------

// OpResult

// .gs.rpc.Code code = 1;
inline void OpResult::clear_code() {
  code_ = 0;
}
inline ::gs::rpc::Code OpResult::_internal_code() const {
  return static_cast< ::gs::rpc::Code >(code_);
}
inline ::gs::rpc::Code OpResult::code() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.code)
  return _internal_code();
}
inline void OpResult::_internal_set_code(::gs::rpc::Code value) {
  
  code_ = value;
}
inline void OpResult::set_code(::gs::rpc::Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.code)
}

// string key = 2;
inline void OpResult::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& OpResult::key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.key)
}
inline std::string* OpResult::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.key)
  return _s;
}
inline const std::string& OpResult::_internal_key() const {
  return key_.Get();
}
inline void OpResult::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.key)
}

// string metrics = 3;
inline void OpResult::clear_metrics() {
  metrics_.ClearToEmpty();
}
inline const std::string& OpResult::metrics() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.metrics)
  return _internal_metrics();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_metrics(ArgT0&& arg0, ArgT... args) {
 
 metrics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.metrics)
}
inline std::string* OpResult::mutable_metrics() {
  std::string* _s = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.metrics)
  return _s;
}
inline const std::string& OpResult::_internal_metrics() const {
  return metrics_.Get();
}
inline void OpResult::_internal_set_metrics(const std::string& value) {
  
  metrics_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_metrics() {
  
  return metrics_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_metrics() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.metrics)
  return metrics_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_metrics(std::string* metrics) {
  if (metrics != nullptr) {
    
  } else {
    
  }
  metrics_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metrics,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.metrics)
}

// string error_msg = 4;
inline void OpResult::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& OpResult::error_msg() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.error_msg)
}
inline std::string* OpResult::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.error_msg)
  return _s;
}
inline const std::string& OpResult::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void OpResult::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_error_msg() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.error_msg)
}

// bool has_large_result = 5;
inline void OpResult::clear_has_large_result() {
  has_large_result_ = false;
}
inline bool OpResult::_internal_has_large_result() const {
  return has_large_result_;
}
inline bool OpResult::has_large_result() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.has_large_result)
  return _internal_has_large_result();
}
inline void OpResult::_internal_set_has_large_result(bool value) {
  
  has_large_result_ = value;
}
inline void OpResult::set_has_large_result(bool value) {
  _internal_set_has_large_result(value);
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.has_large_result)
}

// bytes result = 6;
inline void OpResult::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& OpResult::result() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.result)
}
inline std::string* OpResult::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.result)
  return _s;
}
inline const std::string& OpResult::_internal_result() const {
  return result_.Get();
}
inline void OpResult::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_result() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.result)
}

// bytes handle = 7;
inline void OpResult::clear_handle() {
  handle_.ClearToEmpty();
}
inline const std::string& OpResult::handle() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_handle(ArgT0&& arg0, ArgT... args) {
 
 handle_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.handle)
}
inline std::string* OpResult::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.handle)
  return _s;
}
inline const std::string& OpResult::_internal_handle() const {
  return handle_.Get();
}
inline void OpResult::_internal_set_handle(const std::string& value) {
  
  handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_handle() {
  
  return handle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_handle() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.handle)
}

// bytes config = 8;
inline void OpResult::clear_config() {
  config_.ClearToEmpty();
}
inline const std::string& OpResult::config() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.config)
  return _internal_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_config(ArgT0&& arg0, ArgT... args) {
 
 config_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.config)
}
inline std::string* OpResult::mutable_config() {
  std::string* _s = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.config)
  return _s;
}
inline const std::string& OpResult::_internal_config() const {
  return config_.Get();
}
inline void OpResult::_internal_set_config(const std::string& value) {
  
  config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_config() {
  
  return config_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_config() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.config)
  return config_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.config)
}

// bytes extra_info = 9;
inline void OpResult::clear_extra_info() {
  extra_info_.ClearToEmpty();
}
inline const std::string& OpResult::extra_info() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.extra_info)
  return _internal_extra_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpResult::set_extra_info(ArgT0&& arg0, ArgT... args) {
 
 extra_info_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.OpResult.extra_info)
}
inline std::string* OpResult::mutable_extra_info() {
  std::string* _s = _internal_mutable_extra_info();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.extra_info)
  return _s;
}
inline const std::string& OpResult::_internal_extra_info() const {
  return extra_info_.Get();
}
inline void OpResult::_internal_set_extra_info(const std::string& value) {
  
  extra_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpResult::_internal_mutable_extra_info() {
  
  return extra_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpResult::release_extra_info() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.extra_info)
  return extra_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpResult::set_allocated_extra_info(std::string* extra_info) {
  if (extra_info != nullptr) {
    
  } else {
    
  }
  extra_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.extra_info)
}

// .gs.rpc.graph.GraphDefPb graph_def = 31;
inline bool OpResult::_internal_has_graph_def() const {
  return this != internal_default_instance() && graph_def_ != nullptr;
}
inline bool OpResult::has_graph_def() const {
  return _internal_has_graph_def();
}
inline const ::gs::rpc::graph::GraphDefPb& OpResult::_internal_graph_def() const {
  const ::gs::rpc::graph::GraphDefPb* p = graph_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::GraphDefPb&>(
      ::gs::rpc::graph::_GraphDefPb_default_instance_);
}
inline const ::gs::rpc::graph::GraphDefPb& OpResult::graph_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.OpResult.graph_def)
  return _internal_graph_def();
}
inline void OpResult::unsafe_arena_set_allocated_graph_def(
    ::gs::rpc::graph::GraphDefPb* graph_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def_);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.OpResult.graph_def)
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::release_graph_def() {
  
  ::gs::rpc::graph::GraphDefPb* temp = graph_def_;
  graph_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.OpResult.graph_def)
  
  ::gs::rpc::graph::GraphDefPb* temp = graph_def_;
  graph_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::_internal_mutable_graph_def() {
  
  if (graph_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::GraphDefPb>(GetArenaForAllocation());
    graph_def_ = p;
  }
  return graph_def_;
}
inline ::gs::rpc::graph::GraphDefPb* OpResult::mutable_graph_def() {
  ::gs::rpc::graph::GraphDefPb* _msg = _internal_mutable_graph_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.OpResult.graph_def)
  return _msg;
}
inline void OpResult::set_allocated_graph_def(::gs::rpc::graph::GraphDefPb* graph_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def_);
  }
  if (graph_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def));
    if (message_arena != submessage_arena) {
      graph_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_def, submessage_arena);
    }
    
  } else {
    
  }
  graph_def_ = graph_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.OpResult.graph_def)
}

// -------------------------------------------------------------------

// DagDef

// repeated .gs.rpc.OpDef op = 1;
inline int DagDef::_internal_op_size() const {
  return op_.size();
}
inline int DagDef::op_size() const {
  return _internal_op_size();
}
inline void DagDef::clear_op() {
  op_.Clear();
}
inline ::gs::rpc::OpDef* DagDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.DagDef.op)
  return op_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >*
DagDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.DagDef.op)
  return &op_;
}
inline const ::gs::rpc::OpDef& DagDef::_internal_op(int index) const {
  return op_.Get(index);
}
inline const ::gs::rpc::OpDef& DagDef::op(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.DagDef.op)
  return _internal_op(index);
}
inline ::gs::rpc::OpDef* DagDef::_internal_add_op() {
  return op_.Add();
}
inline ::gs::rpc::OpDef* DagDef::add_op() {
  ::gs::rpc::OpDef* _add = _internal_add_op();
  // @@protoc_insertion_point(field_add:gs.rpc.DagDef.op)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpDef >&
DagDef::op() const {
  // @@protoc_insertion_point(field_list:gs.rpc.DagDef.op)
  return op_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace gs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graphscope_2fproto_2fop_5fdef_2eproto
