"""
Django settings for medux_online project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

import environ
from django.utils.translation import gettext_lazy as _
from gdaps.pluginmanager import PluginManager

env = environ.Env(DEBUG=(bool, False))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

PROJECT_NAME = "medux_online"
environ.Env.read_env(BASE_DIR / ".env")

DEBUG = env("DEBUG")

SECRET_KEY = env("SECRET_KEY")

ALLOWED_HOSTS = ["*"]
# FIXED: find a way to add dynamic host patterns (=subdomains) to ALLOWED_HOSTS
# if DEBUG:
#     ALLOWED_HOSTS += ["example.com", ".example.com", "example2.com", ".example2.com"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "extra_views",
    "crispy_forms",
    "crispy_bootstrap5",
    "django_sass",
    "django_unicorn",
    "polymorphic",
    "gdaps",
    "menu",
    "django_hosts",
    # fixed plugins:
    "medux.common",
    "medux.settings",
    "medux_online.core",
    "medux_online.plugins.homepage",
    "medux_online.plugins.prescriptions",
    "colorfield",
]

# + dynamic Plugin apps, if any
INSTALLED_APPS += PluginManager.find_plugins("medux_online.plugins")

MIDDLEWARE = [
    "django_hosts.middleware.HostsRequestMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.sites.middleware.CurrentSiteMiddleware",
    "medux.common.middleware.TenantMiddleware",
    "django_hosts.middleware.HostsResponseMiddleware",
]

ROOT_URLCONF = "medux_online.urls"
ROOT_HOSTCONF = "medux_online.hosts"
DEFAULT_HOST = "root"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "medux.settings.context_processors.settings",
            ],
            # "builtins": [
            #     "django_hosts.templatetags.hosts_override",
            # ],
        },
    },
]

WSGI_APPLICATION = "medux_online.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env("DB_ENGINE"),
        "NAME": env("DB_NAME"),
        "PASSWORD": env("DB_PASSWORD", default=""),
    }
}

AUTH_USER_MODEL = "common.User"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "de"

TIME_ZONE = "Europe/Vienna"

USE_I18N = True

# USE_L10N = True

# DATETIME_FORMAT = 'Y-m-d H:M'

USE_TZ = True

LANGUAGES = [
    ("de", _("German")),
    ("en", _("English")),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = BASE_DIR / "static"

# STATICFILES_DIRS = [...]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_FAIL_SILENTLY = not DEBUG

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "unicorn": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}


MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"
