# Generated from qasm3Parser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3e")
        buf.write("\u0438\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\3\2\3\2\3\2\7\2\u00d6\n\2\f\2\16\2\u00d9\13")
        buf.write("\2\3\3\5\3\u00dc\n\3\3\3\7\3\u00df\n\3\f\3\16\3\u00e2")
        buf.write("\13\3\3\3\7\3\u00e5\n\3\f\3\16\3\u00e8\13\3\3\4\3\4\3")
        buf.write("\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\5\b\u00ff\n\b\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\5\t\u0109\n\t\3\n\3\n\3\n\3\13\3\13\5\13")
        buf.write("\u0110\n\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\5\r\u011a")
        buf.write("\n\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\7\20\u0128\n\20\f\20\16\20\u012b\13\20\3\21\3")
        buf.write("\21\3\21\5\21\u0130\n\21\3\21\3\21\5\21\u0134\n\21\3\21")
        buf.write("\5\21\u0137\n\21\3\22\3\22\3\22\5\22\u013c\n\22\3\22\3")
        buf.write("\22\5\22\u0140\n\22\3\22\5\22\u0143\n\22\3\23\3\23\3\24")
        buf.write("\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0151")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\5\26\u0158\n\26\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u0165\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3")
        buf.write("\32\5\32\u0170\n\32\3\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\5\35\u017e\n\35\3\36\3\36\3")
        buf.write("\36\5\36\u0183\n\36\3\37\3\37\3\37\5\37\u0188\n\37\3\37")
        buf.write("\3\37\5\37\u018c\n\37\3\37\5\37\u018f\n\37\3\37\5\37\u0192")
        buf.write("\n\37\3 \3 \3 \3 \3 \3 \5 \u019a\n \3!\3!\3!\5!\u019f")
        buf.write("\n!\3!\3!\3!\5!\u01a4\n!\7!\u01a6\n!\f!\16!\u01a9\13!")
        buf.write("\3!\3!\3\"\3\"\3\"\3\"\3\"\5\"\u01b2\n\"\5\"\u01b4\n\"")
        buf.write("\3#\3#\3#\3#\3#\5#\u01bb\n#\3$\3$\3$\7$\u01c0\n$\f$\16")
        buf.write("$\u01c3\13$\3%\3%\3%\3%\5%\u01c9\n%\3%\3%\3%\3%\3%\5%")
        buf.write("\u01d0\n%\3%\3%\5%\u01d4\n%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\5%\u01e1\n%\3&\3&\3&\7&\u01e6\n&\f&\16&\u01e9")
        buf.write("\13&\3\'\3\'\5\'\u01ed\n\'\3(\3(\3(\7(\u01f2\n(\f(\16")
        buf.write("(\u01f5\13(\3)\3)\3)\7)\u01fa\n)\f)\16)\u01fd\13)\3*\3")
        buf.write("*\3*\3*\3*\3*\3+\5+\u0206\n+\3+\3+\5+\u020a\n+\3+\3+\5")
        buf.write("+\u020e\n+\3,\3,\3,\3,\3-\3-\3-\5-\u0217\n-\3-\5-\u021a")
        buf.write("\n-\3-\3-\3.\3.\3/\3/\3/\7/\u0223\n/\f/\16/\u0226\13/")
        buf.write("\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\7\61\u0230\n\61\f")
        buf.write("\61\16\61\u0233\13\61\3\61\5\61\u0236\n\61\3\62\3\62\3")
        buf.write("\62\3\62\5\62\u023c\n\62\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u0243\n\63\3\64\3\64\3\64\3\64\7\64\u0249\n\64\f\64\16")
        buf.write("\64\u024c\13\64\5\64\u024e\n\64\3\65\3\65\3\65\3\66\7")
        buf.write("\66\u0254\n\66\f\66\16\66\u0257\13\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\7\66\u0260\n\66\f\66\16\66\u0263\13")
        buf.write("\66\5\66\u0265\n\66\3\67\3\67\3\67\38\38\38\58\u026d\n")
        buf.write("8\38\38\38\38\58\u0273\n8\39\39\39\39\39\3:\3:\3:\3:\3")
        buf.write(":\5:\u027f\n:\3;\3;\3;\5;\u0284\n;\3;\3;\3<\7<\u0289\n")
        buf.write("<\f<\16<\u028c\13<\3<\3<\3<\3<\3<\5<\u0293\n<\3<\3<\3")
        buf.write("<\7<\u0298\n<\f<\16<\u029b\13<\3=\3=\3>\3>\3>\3?\3?\3")
        buf.write("?\3?\5?\u02a6\n?\3?\3?\3?\7?\u02ab\n?\f?\16?\u02ae\13")
        buf.write("?\3@\3@\3@\3@\3@\3@\7@\u02b6\n@\f@\16@\u02b9\13@\3A\3")
        buf.write("A\3A\3A\3A\3A\7A\u02c1\nA\fA\16A\u02c4\13A\3B\3B\3B\3")
        buf.write("B\3B\3B\7B\u02cc\nB\fB\16B\u02cf\13B\3C\3C\3C\3C\3C\3")
        buf.write("C\7C\u02d7\nC\fC\16C\u02da\13C\3D\3D\3D\3D\3D\3D\7D\u02e2")
        buf.write("\nD\fD\16D\u02e5\13D\3E\3E\3E\3E\3E\3E\7E\u02ed\nE\fE")
        buf.write("\16E\u02f0\13E\3F\3F\3F\3F\3F\3F\7F\u02f8\nF\fF\16F\u02fb")
        buf.write("\13F\3G\3G\3G\3G\3G\3G\7G\u0303\nG\fG\16G\u0306\13G\3")
        buf.write("H\3H\3H\3H\3H\3H\7H\u030e\nH\fH\16H\u0311\13H\3I\5I\u0314")
        buf.write("\nI\3I\3I\3J\3J\3J\3J\3J\3J\7J\u031e\nJ\fJ\16J\u0321\13")
        buf.write("J\3K\3K\3K\3K\5K\u0327\nK\3K\3K\3K\5K\u032c\nK\7K\u032e")
        buf.write("\nK\fK\16K\u0331\13K\5K\u0333\nK\3K\3K\3L\3L\3L\3L\3L")
        buf.write("\7L\u033c\nL\fL\16L\u033f\13L\3M\3M\7M\u0343\nM\fM\16")
        buf.write("M\u0346\13M\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N")
        buf.write("\3N\3N\3N\5N\u0359\nN\3O\3O\3O\5O\u035e\nO\3O\3O\3O\3")
        buf.write("O\3P\3P\3Q\3Q\3Q\7Q\u0369\nQ\fQ\16Q\u036c\13Q\3R\3R\3")
        buf.write("R\3S\3S\3T\3T\3T\3T\7T\u0377\nT\fT\16T\u037a\13T\3T\3")
        buf.write("T\3U\3U\3U\3U\3U\3U\5U\u0384\nU\3V\3V\3V\3V\3V\7V\u038b")
        buf.write("\nV\fV\16V\u038e\13V\3V\5V\u0391\nV\3W\3W\3W\3W\3W\3W")
        buf.write("\3W\5W\u039a\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u03a5\n")
        buf.write("X\3Y\3Y\3Y\3Z\3Z\3Z\3[\3[\3[\5[\u03b0\n[\3[\3[\3\\\3\\")
        buf.write("\3\\\3\\\5\\\u03b8\n\\\3]\3]\3]\3]\5]\u03be\n]\3]\3]\5")
        buf.write("]\u03c2\n]\3]\3]\3^\3^\3^\5^\u03c9\n^\3^\3^\3_\3_\3_\3")
        buf.write("_\5_\u03d1\n_\3_\3_\5_\u03d5\n_\3_\3_\3`\3`\7`\u03db\n")
        buf.write("`\f`\16`\u03de\13`\3`\5`\u03e1\n`\3`\3`\3a\3a\3a\7a\u03e8")
        buf.write("\na\fa\16a\u03eb\13a\3a\3a\3b\3b\5b\u03f1\nb\3b\3b\3c")
        buf.write("\3c\3c\3c\3c\5c\u03fa\nc\3c\5c\u03fd\nc\3d\3d\3d\5d\u0402")
        buf.write("\nd\3d\5d\u0405\nd\3d\3d\3d\3d\7d\u040b\nd\fd\16d\u040e")
        buf.write("\13d\3e\3e\3e\3e\5e\u0414\ne\3f\3f\5f\u0418\nf\3g\3g\3")
        buf.write("g\3g\3h\3h\3h\3h\5h\u0422\nh\3h\5h\u0425\nh\3h\3h\5h\u0429")
        buf.write("\nh\3h\3h\7h\u042d\nh\fh\16h\u0430\13h\3h\3h\3i\3i\5i")
        buf.write("\u0436\ni\3i\3\u042e\16|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0092\u0096j\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\2\17")
        buf.write("\4\2[[^^\3\2\26\27\4\2\34\34\36\36\3\2\37\"\4\2\35\35")
        buf.write("%&\3\2\30\31\4\2\'(]]\3\2,-\4\2EEPQ\4\2CCEE\4\2FFHI\4")
        buf.write("\2AASS\3\2\r\16\2\u046c\2\u00d2\3\2\2\2\4\u00db\3\2\2")
        buf.write("\2\6\u00e9\3\2\2\2\b\u00ed\3\2\2\2\n\u00f1\3\2\2\2\f\u00f3")
        buf.write("\3\2\2\2\16\u00fe\3\2\2\2\20\u0108\3\2\2\2\22\u010a\3")
        buf.write("\2\2\2\24\u010f\3\2\2\2\26\u0113\3\2\2\2\30\u0119\3\2")
        buf.write("\2\2\32\u011d\3\2\2\2\34\u0120\3\2\2\2\36\u0124\3\2\2")
        buf.write("\2 \u0136\3\2\2\2\"\u0142\3\2\2\2$\u0144\3\2\2\2&\u0146")
        buf.write("\3\2\2\2(\u0148\3\2\2\2*\u0157\3\2\2\2,\u0159\3\2\2\2")
        buf.write(".\u0164\3\2\2\2\60\u0166\3\2\2\2\62\u016f\3\2\2\2\64\u0171")
        buf.write("\3\2\2\2\66\u0174\3\2\2\28\u0179\3\2\2\2:\u017f\3\2\2")
        buf.write("\2<\u018e\3\2\2\2>\u0193\3\2\2\2@\u019b\3\2\2\2B\u01ac")
        buf.write("\3\2\2\2D\u01ba\3\2\2\2F\u01bc\3\2\2\2H\u01e0\3\2\2\2")
        buf.write("J\u01e2\3\2\2\2L\u01ec\3\2\2\2N\u01ee\3\2\2\2P\u01f6\3")
        buf.write("\2\2\2R\u01fe\3\2\2\2T\u0205\3\2\2\2V\u020f\3\2\2\2X\u0213")
        buf.write("\3\2\2\2Z\u021d\3\2\2\2\\\u021f\3\2\2\2^\u0229\3\2\2\2")
        buf.write("`\u0235\3\2\2\2b\u023b\3\2\2\2d\u0242\3\2\2\2f\u0244\3")
        buf.write("\2\2\2h\u024f\3\2\2\2j\u0255\3\2\2\2l\u0266\3\2\2\2n\u0272")
        buf.write("\3\2\2\2p\u0274\3\2\2\2r\u0279\3\2\2\2t\u0283\3\2\2\2")
        buf.write("v\u028a\3\2\2\2x\u029c\3\2\2\2z\u029e\3\2\2\2|\u02a5\3")
        buf.write("\2\2\2~\u02af\3\2\2\2\u0080\u02ba\3\2\2\2\u0082\u02c5")
        buf.write("\3\2\2\2\u0084\u02d0\3\2\2\2\u0086\u02db\3\2\2\2\u0088")
        buf.write("\u02e6\3\2\2\2\u008a\u02f1\3\2\2\2\u008c\u02fc\3\2\2\2")
        buf.write("\u008e\u0307\3\2\2\2\u0090\u0313\3\2\2\2\u0092\u0317\3")
        buf.write("\2\2\2\u0094\u0322\3\2\2\2\u0096\u0336\3\2\2\2\u0098\u0340")
        buf.write("\3\2\2\2\u009a\u0358\3\2\2\2\u009c\u035d\3\2\2\2\u009e")
        buf.write("\u0363\3\2\2\2\u00a0\u0365\3\2\2\2\u00a2\u036d\3\2\2\2")
        buf.write("\u00a4\u0370\3\2\2\2\u00a6\u0372\3\2\2\2\u00a8\u0383\3")
        buf.write("\2\2\2\u00aa\u0390\3\2\2\2\u00ac\u0392\3\2\2\2\u00ae\u03a4")
        buf.write("\3\2\2\2\u00b0\u03a6\3\2\2\2\u00b2\u03a9\3\2\2\2\u00b4")
        buf.write("\u03ac\3\2\2\2\u00b6\u03b7\3\2\2\2\u00b8\u03b9\3\2\2\2")
        buf.write("\u00ba\u03c5\3\2\2\2\u00bc\u03cc\3\2\2\2\u00be\u03d8\3")
        buf.write("\2\2\2\u00c0\u03e4\3\2\2\2\u00c2\u03ee\3\2\2\2\u00c4\u03fc")
        buf.write("\3\2\2\2\u00c6\u03fe\3\2\2\2\u00c8\u0413\3\2\2\2\u00ca")
        buf.write("\u0417\3\2\2\2\u00cc\u0419\3\2\2\2\u00ce\u041d\3\2\2\2")
        buf.write("\u00d0\u0435\3\2\2\2\u00d2\u00d7\5\4\3\2\u00d3\u00d6\5")
        buf.write("\16\b\2\u00d4\u00d6\5\20\t\2\u00d5\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d4\3\2\2\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\3\3\2\2\2\u00d9\u00d7\3\2\2")
        buf.write("\2\u00da\u00dc\5\6\4\2\u00db\u00da\3\2\2\2\u00db\u00dc")
        buf.write("\3\2\2\2\u00dc\u00e0\3\2\2\2\u00dd\u00df\5\b\5\2\u00de")
        buf.write("\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2")
        buf.write("\u00e0\u00e1\3\2\2\2\u00e1\u00e6\3\2\2\2\u00e2\u00e0\3")
        buf.write("\2\2\2\u00e3\u00e5\5\f\7\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\5\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00ea\7\3\2\2\u00ea")
        buf.write("\u00eb\t\2\2\2\u00eb\u00ec\7>\2\2\u00ec\7\3\2\2\2\u00ed")
        buf.write("\u00ee\7\4\2\2\u00ee\u00ef\7a\2\2\u00ef\u00f0\7>\2\2\u00f0")
        buf.write("\t\3\2\2\2\u00f1\u00f2\t\3\2\2\u00f2\13\3\2\2\2\u00f3")
        buf.write("\u00f4\5\n\6\2\u00f4\u00f5\5\62\32\2\u00f5\u00f6\7]\2")
        buf.write("\2\u00f6\u00f7\7>\2\2\u00f7\r\3\2\2\2\u00f8\u00ff\5\u00bc")
        buf.write("_\2\u00f9\u00ff\5\u00b8]\2\u00fa\u00ff\5V,\2\u00fb\u00ff")
        buf.write("\5\u00caf\2\u00fc\u00ff\5\22\n\2\u00fd\u00ff\5\u00c0a")
        buf.write("\2\u00fe\u00f8\3\2\2\2\u00fe\u00f9\3\2\2\2\u00fe\u00fa")
        buf.write("\3\2\2\2\u00fe\u00fb\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe")
        buf.write("\u00fd\3\2\2\2\u00ff\17\3\2\2\2\u0100\u0109\5z>\2\u0101")
        buf.write("\u0109\5\30\r\2\u0102\u0109\5\24\13\2\u0103\u0109\5\u00ac")
        buf.write("W\2\u0104\u0109\5\u00b0Y\2\u0105\u0109\5\u00b2Z\2\u0106")
        buf.write("\u0109\5R*\2\u0107\u0109\5b\62\2\u0108\u0100\3\2\2\2\u0108")
        buf.write("\u0101\3\2\2\2\u0108\u0102\3\2\2\2\u0108\u0103\3\2\2\2")
        buf.write("\u0108\u0104\3\2\2\2\u0108\u0105\3\2\2\2\u0108\u0106\3")
        buf.write("\2\2\2\u0108\u0107\3\2\2\2\u0109\21\3\2\2\2\u010a\u010b")
        buf.write("\5 \21\2\u010b\u010c\7>\2\2\u010c\23\3\2\2\2\u010d\u0110")
        buf.write("\5D#\2\u010e\u0110\5\66\34\2\u010f\u010d\3\2\2\2\u010f")
        buf.write("\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0112\7>\2\2")
        buf.write("\u0112\25\3\2\2\2\u0113\u0114\5\u0098M\2\u0114\u0115\5")
        buf.write("\u00a4S\2\u0115\u0116\5|?\2\u0116\27\3\2\2\2\u0117\u011a")
        buf.write("\5\26\f\2\u0118\u011a\5n8\2\u0119\u0117\3\2\2\2\u0119")
        buf.write("\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c\7>\2\2")
        buf.write("\u011c\31\3\2\2\2\u011d\u011e\7B\2\2\u011e\u011f\5\62")
        buf.write("\32\2\u011f\33\3\2\2\2\u0120\u0121\7\67\2\2\u0121\u0122")
        buf.write("\5|?\2\u0122\u0123\78\2\2\u0123\35\3\2\2\2\u0124\u0129")
        buf.write("\7]\2\2\u0125\u0126\7@\2\2\u0126\u0128\7]\2\2\u0127\u0125")
        buf.write("\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129")
        buf.write("\u012a\3\2\2\2\u012a\37\3\2\2\2\u012b\u0129\3\2\2\2\u012c")
        buf.write("\u012d\7\32\2\2\u012d\u012f\7]\2\2\u012e\u0130\5\34\17")
        buf.write("\2\u012f\u012e\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0137")
        buf.write("\3\2\2\2\u0131\u0133\7\33\2\2\u0132\u0134\5\34\17\2\u0133")
        buf.write("\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3\2\2\2")
        buf.write("\u0135\u0137\7]\2\2\u0136\u012c\3\2\2\2\u0136\u0131\3")
        buf.write("\2\2\2\u0137!\3\2\2\2\u0138\u0139\7\32\2\2\u0139\u013b")
        buf.write("\7]\2\2\u013a\u013c\5\34\17\2\u013b\u013a\3\2\2\2\u013b")
        buf.write("\u013c\3\2\2\2\u013c\u0143\3\2\2\2\u013d\u013f\7\33\2")
        buf.write("\2\u013e\u0140\5\34\17\2\u013f\u013e\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\7]\2\2\u0142")
        buf.write("\u0138\3\2\2\2\u0142\u013d\3\2\2\2\u0143#\3\2\2\2\u0144")
        buf.write("\u0145\t\4\2\2\u0145%\3\2\2\2\u0146\u0147\t\5\2\2\u0147")
        buf.write("\'\3\2\2\2\u0148\u0149\t\6\2\2\u0149)\3\2\2\2\u014a\u014b")
        buf.write("\5&\24\2\u014b\u014c\5\34\17\2\u014c\u0158\3\2\2\2\u014d")
        buf.write("\u0158\5(\25\2\u014e\u0150\5$\23\2\u014f\u0151\5\34\17")
        buf.write("\2\u0150\u014f\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0158")
        buf.write("\3\2\2\2\u0152\u0153\7#\2\2\u0153\u0154\7\67\2\2\u0154")
        buf.write("\u0155\5\64\33\2\u0155\u0156\78\2\2\u0156\u0158\3\2\2")
        buf.write("\2\u0157\u014a\3\2\2\2\u0157\u014d\3\2\2\2\u0157\u014e")
        buf.write("\3\2\2\2\u0157\u0152\3\2\2\2\u0158+\3\2\2\2\u0159\u015a")
        buf.write("\7$\2\2\u015a\u015b\7\67\2\2\u015b\u015c\5*\26\2\u015c")
        buf.write("\u015d\7@\2\2\u015d\u015e\5\u00a0Q\2\u015e\u015f\78\2")
        buf.write("\2\u015f-\3\2\2\2\u0160\u0165\5\u00a0Q\2\u0161\u0162\7")
        buf.write(".\2\2\u0162\u0163\7A\2\2\u0163\u0165\5|?\2\u0164\u0160")
        buf.write("\3\2\2\2\u0164\u0161\3\2\2\2\u0165/\3\2\2\2\u0166\u0167")
        buf.write("\7$\2\2\u0167\u0168\7\67\2\2\u0168\u0169\5*\26\2\u0169")
        buf.write("\u016a\7@\2\2\u016a\u016b\5.\30\2\u016b\u016c\78\2\2\u016c")
        buf.write("\61\3\2\2\2\u016d\u0170\5*\26\2\u016e\u0170\5,\27\2\u016f")
        buf.write("\u016d\3\2\2\2\u016f\u016e\3\2\2\2\u0170\63\3\2\2\2\u0171")
        buf.write("\u0172\5&\24\2\u0172\u0173\5\34\17\2\u0173\65\3\2\2\2")
        buf.write("\u0174\u0175\7\30\2\2\u0175\u0176\5\62\32\2\u0176\u0177")
        buf.write("\7]\2\2\u0177\u0178\5\u00a2R\2\u0178\67\3\2\2\2\u0179")
        buf.write("\u017a\5&\24\2\u017a\u017b\5\34\17\2\u017b\u017d\7]\2")
        buf.write("\2\u017c\u017e\5\u00a2R\2\u017d\u017c\3\2\2\2\u017d\u017e")
        buf.write("\3\2\2\2\u017e9\3\2\2\2\u017f\u0180\5(\25\2\u0180\u0182")
        buf.write("\7]\2\2\u0181\u0183\5\u00a2R\2\u0182\u0181\3\2\2\2\u0182")
        buf.write("\u0183\3\2\2\2\u0183;\3\2\2\2\u0184\u0185\7\34\2\2\u0185")
        buf.write("\u0187\7]\2\2\u0186\u0188\5\34\17\2\u0187\u0186\3\2\2")
        buf.write("\2\u0187\u0188\3\2\2\2\u0188\u018f\3\2\2\2\u0189\u018b")
        buf.write("\7\36\2\2\u018a\u018c\5\34\17\2\u018b\u018a\3\2\2\2\u018b")
        buf.write("\u018c\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018f\7]\2\2")
        buf.write("\u018e\u0184\3\2\2\2\u018e\u0189\3\2\2\2\u018f\u0191\3")
        buf.write("\2\2\2\u0190\u0192\5\u00a2R\2\u0191\u0190\3\2\2\2\u0191")
        buf.write("\u0192\3\2\2\2\u0192=\3\2\2\2\u0193\u0194\7#\2\2\u0194")
        buf.write("\u0195\7\67\2\2\u0195\u0196\5\64\33\2\u0196\u0197\78\2")
        buf.write("\2\u0197\u0199\7]\2\2\u0198\u019a\5\u00a2R\2\u0199\u0198")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a?\3\2\2\2\u019b\u019e")
        buf.write("\79\2\2\u019c\u019f\5|?\2\u019d\u019f\5@!\2\u019e\u019c")
        buf.write("\3\2\2\2\u019e\u019d\3\2\2\2\u019f\u01a7\3\2\2\2\u01a0")
        buf.write("\u01a3\7@\2\2\u01a1\u01a4\5|?\2\u01a2\u01a4\5@!\2\u01a3")
        buf.write("\u01a1\3\2\2\2\u01a3\u01a2\3\2\2\2\u01a4\u01a6\3\2\2\2")
        buf.write("\u01a5\u01a0\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3")
        buf.write("\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3\2\2\2\u01a9\u01a7")
        buf.write("\3\2\2\2\u01aa\u01ab\7:\2\2\u01abA\3\2\2\2\u01ac\u01ad")
        buf.write("\5,\27\2\u01ad\u01b3\7]\2\2\u01ae\u01b1\7A\2\2\u01af\u01b2")
        buf.write("\5@!\2\u01b0\u01b2\5|?\2\u01b1\u01af\3\2\2\2\u01b1\u01b0")
        buf.write("\3\2\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01ae\3\2\2\2\u01b3")
        buf.write("\u01b4\3\2\2\2\u01b4C\3\2\2\2\u01b5\u01bb\58\35\2\u01b6")
        buf.write("\u01bb\5:\36\2\u01b7\u01bb\5<\37\2\u01b8\u01bb\5> \2\u01b9")
        buf.write("\u01bb\5B\"\2\u01ba\u01b5\3\2\2\2\u01ba\u01b6\3\2\2\2")
        buf.write("\u01ba\u01b7\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01b9\3")
        buf.write("\2\2\2\u01bbE\3\2\2\2\u01bc\u01c1\5\62\32\2\u01bd\u01be")
        buf.write("\7@\2\2\u01be\u01c0\5\62\32\2\u01bf\u01bd\3\2\2\2\u01c0")
        buf.write("\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2")
        buf.write("\u01c2G\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c5\5&\24")
        buf.write("\2\u01c5\u01c6\5\34\17\2\u01c6\u01c9\3\2\2\2\u01c7\u01c9")
        buf.write("\5(\25\2\u01c8\u01c4\3\2\2\2\u01c8\u01c7\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01cb\7]\2\2\u01cb\u01e1\3\2\2\2")
        buf.write("\u01cc\u01cd\7\34\2\2\u01cd\u01cf\7]\2\2\u01ce\u01d0\5")
        buf.write("\34\17\2\u01cf\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0")
        buf.write("\u01e1\3\2\2\2\u01d1\u01d3\7\36\2\2\u01d2\u01d4\5\34\17")
        buf.write("\2\u01d3\u01d2\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\u01e1\7]\2\2\u01d6\u01d7\7#\2\2\u01d7\u01d8")
        buf.write("\7\67\2\2\u01d8\u01d9\5\64\33\2\u01d9\u01da\78\2\2\u01da")
        buf.write("\u01db\7]\2\2\u01db\u01e1\3\2\2\2\u01dc\u01dd\t\7\2\2")
        buf.write("\u01dd\u01de\5\60\31\2\u01de\u01df\7]\2\2\u01df\u01e1")
        buf.write("\3\2\2\2\u01e0\u01c8\3\2\2\2\u01e0\u01cc\3\2\2\2\u01e0")
        buf.write("\u01d1\3\2\2\2\u01e0\u01d6\3\2\2\2\u01e0\u01dc\3\2\2\2")
        buf.write("\u01e1I\3\2\2\2\u01e2\u01e7\5H%\2\u01e3\u01e4\7@\2\2\u01e4")
        buf.write("\u01e6\5H%\2\u01e5\u01e3\3\2\2\2\u01e6\u01e9\3\2\2\2\u01e7")
        buf.write("\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8K\3\2\2\2\u01e9")
        buf.write("\u01e7\3\2\2\2\u01ea\u01ed\5H%\2\u01eb\u01ed\5\"\22\2")
        buf.write("\u01ec\u01ea\3\2\2\2\u01ec\u01eb\3\2\2\2\u01edM\3\2\2")
        buf.write("\2\u01ee\u01f3\5L\'\2\u01ef\u01f0\7@\2\2\u01f0\u01f2\5")
        buf.write("L\'\2\u01f1\u01ef\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3\u01f1")
        buf.write("\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4O\3\2\2\2\u01f5\u01f3")
        buf.write("\3\2\2\2\u01f6\u01fb\5|?\2\u01f7\u01f8\7D\2\2\u01f8\u01fa")
        buf.write("\5|?\2\u01f9\u01f7\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb\u01f9")
        buf.write("\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fcQ\3\2\2\2\u01fd\u01fb")
        buf.write("\3\2\2\2\u01fe\u01ff\7\f\2\2\u01ff\u0200\7]\2\2\u0200")
        buf.write("\u0201\7A\2\2\u0201\u0202\5P)\2\u0202\u0203\7>\2\2\u0203")
        buf.write("S\3\2\2\2\u0204\u0206\5|?\2\u0205\u0204\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0209\7=\2\2")
        buf.write("\u0208\u020a\5|?\2\u0209\u0208\3\2\2\2\u0209\u020a\3\2")
        buf.write("\2\2\u020a\u020d\3\2\2\2\u020b\u020c\7=\2\2\u020c\u020e")
        buf.write("\5|?\2\u020d\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020eU")
        buf.write("\3\2\2\2\u020f\u0210\7\t\2\2\u0210\u0211\5X-\2\u0211\u0212")
        buf.write("\5\\/\2\u0212W\3\2\2\2\u0213\u0219\5Z.\2\u0214\u0216\7")
        buf.write(";\2\2\u0215\u0217\5\36\20\2\u0216\u0215\3\2\2\2\u0216")
        buf.write("\u0217\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021a\7<\2\2")
        buf.write("\u0219\u0214\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\3")
        buf.write("\2\2\2\u021b\u021c\5\36\20\2\u021cY\3\2\2\2\u021d\u021e")
        buf.write("\t\b\2\2\u021e[\3\2\2\2\u021f\u0224\79\2\2\u0220\u0223")
        buf.write("\5b\62\2\u0221\u0223\5^\60\2\u0222\u0220\3\2\2\2\u0222")
        buf.write("\u0221\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226\u0224\3")
        buf.write("\2\2\2\u0227\u0228\7:\2\2\u0228]\3\2\2\2\u0229\u022a\5")
        buf.write("\u00aeX\2\u022a\u022b\5`\61\2\u022b_\3\2\2\2\u022c\u0236")
        buf.write("\5b\62\2\u022d\u0231\79\2\2\u022e\u0230\5b\62\2\u022f")
        buf.write("\u022e\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2")
        buf.write("\u0231\u0232\3\2\2\2\u0232\u0234\3\2\2\2\u0233\u0231\3")
        buf.write("\2\2\2\u0234\u0236\7:\2\2\u0235\u022c\3\2\2\2\u0235\u022d")
        buf.write("\3\2\2\2\u0236a\3\2\2\2\u0237\u0238\5d\63\2\u0238\u0239")
        buf.write("\7>\2\2\u0239\u023c\3\2\2\2\u023a\u023c\5\u00c8e\2\u023b")
        buf.write("\u0237\3\2\2\2\u023b\u023a\3\2\2\2\u023cc\3\2\2\2\u023d")
        buf.write("\u0243\5v<\2\u023e\u0243\5j\66\2\u023f\u0243\5h\65\2\u0240")
        buf.write("\u0243\5l\67\2\u0241\u0243\5f\64\2\u0242\u023d\3\2\2\2")
        buf.write("\u0242\u023e\3\2\2\2\u0242\u023f\3\2\2\2\u0242\u0240\3")
        buf.write("\2\2\2\u0242\u0241\3\2\2\2\u0243e\3\2\2\2\u0244\u024d")
        buf.write("\7\65\2\2\u0245\u024a\5\u0098M\2\u0246\u0247\7@\2\2\u0247")
        buf.write("\u0249\5\u0098M\2\u0248\u0246\3\2\2\2\u0249\u024c\3\2")
        buf.write("\2\2\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024e")
        buf.write("\3\2\2\2\u024c\u024a\3\2\2\2\u024d\u0245\3\2\2\2\u024d")
        buf.write("\u024e\3\2\2\2\u024eg\3\2\2\2\u024f\u0250\7\64\2\2\u0250")
        buf.write("\u0251\5\u0098M\2\u0251i\3\2\2\2\u0252\u0254\5t;\2\u0253")
        buf.write("\u0252\3\2\2\2\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2")
        buf.write("\u0255\u0256\3\2\2\2\u0256\u0258\3\2\2\2\u0257\u0255\3")
        buf.write("\2\2\2\u0258\u0259\7)\2\2\u0259\u025a\7;\2\2\u025a\u025b")
        buf.write("\5|?\2\u025b\u0264\7<\2\2\u025c\u0261\5\u0098M\2\u025d")
        buf.write("\u025e\7@\2\2\u025e\u0260\5\u0098M\2\u025f\u025d\3\2\2")
        buf.write("\2\u0260\u0263\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0262")
        buf.write("\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0264")
        buf.write("\u025c\3\2\2\2\u0264\u0265\3\2\2\2\u0265k\3\2\2\2\u0266")
        buf.write("\u0267\7\63\2\2\u0267\u0268\5\u0098M\2\u0268m\3\2\2\2")
        buf.write("\u0269\u026c\5h\65\2\u026a\u026b\7B\2\2\u026b\u026d\5")
        buf.write("\u0098M\2\u026c\u026a\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("\u0273\3\2\2\2\u026e\u026f\5\u0098M\2\u026f\u0270\7A\2")
        buf.write("\2\u0270\u0271\5h\65\2\u0271\u0273\3\2\2\2\u0272\u0269")
        buf.write("\3\2\2\2\u0272\u026e\3\2\2\2\u0273o\3\2\2\2\u0274\u0275")
        buf.write("\7+\2\2\u0275\u0276\7;\2\2\u0276\u0277\5|?\2\u0277\u0278")
        buf.write("\7<\2\2\u0278q\3\2\2\2\u0279\u027e\t\t\2\2\u027a\u027b")
        buf.write("\7;\2\2\u027b\u027c\5|?\2\u027c\u027d\7<\2\2\u027d\u027f")
        buf.write("\3\2\2\2\u027e\u027a\3\2\2\2\u027e\u027f\3\2\2\2\u027f")
        buf.write("s\3\2\2\2\u0280\u0284\7*\2\2\u0281\u0284\5p9\2\u0282\u0284")
        buf.write("\5r:\2\u0283\u0280\3\2\2\2\u0283\u0281\3\2\2\2\u0283\u0282")
        buf.write("\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\7O\2\2\u0286")
        buf.write("u\3\2\2\2\u0287\u0289\5t;\2\u0288\u0287\3\2\2\2\u0289")
        buf.write("\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2")
        buf.write("\u028b\u028d\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u0292\5")
        buf.write("Z.\2\u028e\u028f\7;\2\2\u028f\u0290\5\u00a0Q\2\u0290\u0291")
        buf.write("\7<\2\2\u0291\u0293\3\2\2\2\u0292\u028e\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0299\5\u0098")
        buf.write("M\2\u0295\u0296\7@\2\2\u0296\u0298\5\u0098M\2\u0297\u0295")
        buf.write("\3\2\2\2\u0298\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029aw\3\2\2\2\u029b\u0299\3\2\2\2\u029c")
        buf.write("\u029d\t\n\2\2\u029dy\3\2\2\2\u029e\u029f\5|?\2\u029f")
        buf.write("\u02a0\7>\2\2\u02a0{\3\2\2\2\u02a1\u02a2\b?\1\2\u02a2")
        buf.write("\u02a6\5\u009aN\2\u02a3\u02a6\5\u0090I\2\u02a4\u02a6\5")
        buf.write("~@\2\u02a5\u02a1\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a5\u02a4")
        buf.write("\3\2\2\2\u02a6\u02ac\3\2\2\2\u02a7\u02a8\f\3\2\2\u02a8")
        buf.write("\u02a9\7K\2\2\u02a9\u02ab\5~@\2\u02aa\u02a7\3\2\2\2\u02ab")
        buf.write("\u02ae\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2")
        buf.write("\u02ad}\3\2\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b0\b@\1\2")
        buf.write("\u02b0\u02b1\5\u0080A\2\u02b1\u02b7\3\2\2\2\u02b2\u02b3")
        buf.write("\f\3\2\2\u02b3\u02b4\7M\2\2\u02b4\u02b6\5\u0080A\2\u02b5")
        buf.write("\u02b2\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7\u02b5\3\2\2\2")
        buf.write("\u02b7\u02b8\3\2\2\2\u02b8\177\3\2\2\2\u02b9\u02b7\3\2")
        buf.write("\2\2\u02ba\u02bb\bA\1\2\u02bb\u02bc\5\u0082B\2\u02bc\u02c2")
        buf.write("\3\2\2\2\u02bd\u02be\f\3\2\2\u02be\u02bf\7J\2\2\u02bf")
        buf.write("\u02c1\5\u0082B\2\u02c0\u02bd\3\2\2\2\u02c1\u02c4\3\2")
        buf.write("\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u0081")
        buf.write("\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5\u02c6\bB\1\2\u02c6")
        buf.write("\u02c7\5\u0084C\2\u02c7\u02cd\3\2\2\2\u02c8\u02c9\f\3")
        buf.write("\2\2\u02c9\u02ca\7N\2\2\u02ca\u02cc\5\u0084C\2\u02cb\u02c8")
        buf.write("\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u0083\3\2\2\2\u02cf\u02cd\3\2\2\2")
        buf.write("\u02d0\u02d1\bC\1\2\u02d1\u02d2\5\u0086D\2\u02d2\u02d8")
        buf.write("\3\2\2\2\u02d3\u02d4\f\3\2\2\u02d4\u02d5\7L\2\2\u02d5")
        buf.write("\u02d7\5\u0086D\2\u02d6\u02d3\3\2\2\2\u02d7\u02da\3\2")
        buf.write("\2\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u0085")
        buf.write("\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\bD\1\2\u02dc")
        buf.write("\u02dd\5\u0088E\2\u02dd\u02e3\3\2\2\2\u02de\u02df\f\3")
        buf.write("\2\2\u02df\u02e0\7R\2\2\u02e0\u02e2\5\u0088E\2\u02e1\u02de")
        buf.write("\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e3")
        buf.write("\u02e4\3\2\2\2\u02e4\u0087\3\2\2\2\u02e5\u02e3\3\2\2\2")
        buf.write("\u02e6\u02e7\bE\1\2\u02e7\u02e8\5\u008aF\2\u02e8\u02ee")
        buf.write("\3\2\2\2\u02e9\u02ea\f\3\2\2\u02ea\u02eb\7T\2\2\u02eb")
        buf.write("\u02ed\5\u008aF\2\u02ec\u02e9\3\2\2\2\u02ed\u02f0\3\2")
        buf.write("\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u0089")
        buf.write("\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f1\u02f2\bF\1\2\u02f2")
        buf.write("\u02f3\5\u008cG\2\u02f3\u02f9\3\2\2\2\u02f4\u02f5\f\3")
        buf.write("\2\2\u02f5\u02f6\7U\2\2\u02f6\u02f8\5\u008cG\2\u02f7\u02f4")
        buf.write("\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u008b\3\2\2\2\u02fb\u02f9\3\2\2\2")
        buf.write("\u02fc\u02fd\bG\1\2\u02fd\u02fe\5\u008eH\2\u02fe\u0304")
        buf.write("\3\2\2\2\u02ff\u0300\f\3\2\2\u0300\u0301\t\13\2\2\u0301")
        buf.write("\u0303\5\u008eH\2\u0302\u02ff\3\2\2\2\u0303\u0306\3\2")
        buf.write("\2\2\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u008d")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0307\u0308\bH\1\2\u0308")
        buf.write("\u0309\5\u0090I\2\u0309\u030f\3\2\2\2\u030a\u030b\f\3")
        buf.write("\2\2\u030b\u030c\t\f\2\2\u030c\u030e\5\u0090I\2\u030d")
        buf.write("\u030a\3\2\2\2\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2")
        buf.write("\u030f\u0310\3\2\2\2\u0310\u008f\3\2\2\2\u0311\u030f\3")
        buf.write("\2\2\2\u0312\u0314\5x=\2\u0313\u0312\3\2\2\2\u0313\u0314")
        buf.write("\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\5\u0092J\2\u0316")
        buf.write("\u0091\3\2\2\2\u0317\u0318\bJ\1\2\u0318\u0319\5\u0096")
        buf.write("L\2\u0319\u031f\3\2\2\2\u031a\u031b\f\3\2\2\u031b\u031c")
        buf.write("\7G\2\2\u031c\u031e\5\u0096L\2\u031d\u031a\3\2\2\2\u031e")
        buf.write("\u0321\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u0320\3\2\2\2")
        buf.write("\u0320\u0093\3\2\2\2\u0321\u031f\3\2\2\2\u0322\u0332\7")
        buf.write("\67\2\2\u0323\u0333\5\u00a6T\2\u0324\u0327\5|?\2\u0325")
        buf.write("\u0327\5T+\2\u0326\u0324\3\2\2\2\u0326\u0325\3\2\2\2\u0327")
        buf.write("\u032f\3\2\2\2\u0328\u032b\7@\2\2\u0329\u032c\5|?\2\u032a")
        buf.write("\u032c\5T+\2\u032b\u0329\3\2\2\2\u032b\u032a\3\2\2\2\u032c")
        buf.write("\u032e\3\2\2\2\u032d\u0328\3\2\2\2\u032e\u0331\3\2\2\2")
        buf.write("\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0333\3")
        buf.write("\2\2\2\u0331\u032f\3\2\2\2\u0332\u0323\3\2\2\2\u0332\u0326")
        buf.write("\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0335\78\2\2\u0335")
        buf.write("\u0095\3\2\2\2\u0336\u0337\bL\1\2\u0337\u0338\5\u009a")
        buf.write("N\2\u0338\u033d\3\2\2\2\u0339\u033a\f\3\2\2\u033a\u033c")
        buf.write("\5\u0094K\2\u033b\u0339\3\2\2\2\u033c\u033f\3\2\2\2\u033d")
        buf.write("\u033b\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u0097\3\2\2\2")
        buf.write("\u033f\u033d\3\2\2\2\u0340\u0344\7]\2\2\u0341\u0343\5")
        buf.write("\u0094K\2\u0342\u0341\3\2\2\2\u0343\u0346\3\2\2\2\u0344")
        buf.write("\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0099\3\2\2\2")
        buf.write("\u0346\u0344\3\2\2\2\u0347\u0359\7X\2\2\u0348\u0359\7")
        buf.write("Y\2\2\u0349\u0359\7Z\2\2\u034a\u0359\7[\2\2\u034b\u0359")
        buf.write("\7\\\2\2\u034c\u0359\7^\2\2\u034d\u0359\7W\2\2\u034e\u0359")
        buf.write("\7\66\2\2\u034f\u0359\7`\2\2\u0350\u0359\7]\2\2\u0351")
        buf.write("\u0359\5\u009cO\2\u0352\u0359\5\u00ba^\2\u0353\u0359\5")
        buf.write("\u00c4c\2\u0354\u0355\7;\2\2\u0355\u0356\5|?\2\u0356\u0357")
        buf.write("\7<\2\2\u0357\u0359\3\2\2\2\u0358\u0347\3\2\2\2\u0358")
        buf.write("\u0348\3\2\2\2\u0358\u0349\3\2\2\2\u0358\u034a\3\2\2\2")
        buf.write("\u0358\u034b\3\2\2\2\u0358\u034c\3\2\2\2\u0358\u034d\3")
        buf.write("\2\2\2\u0358\u034e\3\2\2\2\u0358\u034f\3\2\2\2\u0358\u0350")
        buf.write("\3\2\2\2\u0358\u0351\3\2\2\2\u0358\u0352\3\2\2\2\u0358")
        buf.write("\u0353\3\2\2\2\u0358\u0354\3\2\2\2\u0359\u009b\3\2\2\2")
        buf.write("\u035a\u035e\7\60\2\2\u035b\u035e\5\u009eP\2\u035c\u035e")
        buf.write("\7/\2\2\u035d\u035a\3\2\2\2\u035d\u035b\3\2\2\2\u035d")
        buf.write("\u035c\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\7;\2\2")
        buf.write("\u0360\u0361\5\u00a0Q\2\u0361\u0362\7<\2\2\u0362\u009d")
        buf.write("\3\2\2\2\u0363\u0364\5\62\32\2\u0364\u009f\3\2\2\2\u0365")
        buf.write("\u036a\5|?\2\u0366\u0367\7@\2\2\u0367\u0369\5|?\2\u0368")
        buf.write("\u0366\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2")
        buf.write("\u036a\u036b\3\2\2\2\u036b\u00a1\3\2\2\2\u036c\u036a\3")
        buf.write("\2\2\2\u036d\u036e\7A\2\2\u036e\u036f\5|?\2\u036f\u00a3")
        buf.write("\3\2\2\2\u0370\u0371\t\r\2\2\u0371\u00a5\3\2\2\2\u0372")
        buf.write("\u0373\79\2\2\u0373\u0378\5|?\2\u0374\u0375\7@\2\2\u0375")
        buf.write("\u0377\5|?\2\u0376\u0374\3\2\2\2\u0377\u037a\3\2\2\2\u0378")
        buf.write("\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037b\3\2\2\2")
        buf.write("\u037a\u0378\3\2\2\2\u037b\u037c\7:\2\2\u037c\u00a7\3")
        buf.write("\2\2\2\u037d\u0384\5\u00a6T\2\u037e\u037f\7\67\2\2\u037f")
        buf.write("\u0380\5T+\2\u0380\u0381\78\2\2\u0381\u0384\3\2\2\2\u0382")
        buf.write("\u0384\7]\2\2\u0383\u037d\3\2\2\2\u0383\u037e\3\2\2\2")
        buf.write("\u0383\u0382\3\2\2\2\u0384\u00a9\3\2\2\2\u0385\u0391\5")
        buf.write("\20\t\2\u0386\u0391\5\u00b6\\\2\u0387\u038c\79\2\2\u0388")
        buf.write("\u038b\5\20\t\2\u0389\u038b\5\u00b6\\\2\u038a\u0388\3")
        buf.write("\2\2\2\u038a\u0389\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a")
        buf.write("\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038f\3\2\2\2\u038e")
        buf.write("\u038c\3\2\2\2\u038f\u0391\7:\2\2\u0390\u0385\3\2\2\2")
        buf.write("\u0390\u0386\3\2\2\2\u0390\u0387\3\2\2\2\u0391\u00ab\3")
        buf.write("\2\2\2\u0392\u0393\7\17\2\2\u0393\u0394\7;\2\2\u0394\u0395")
        buf.write("\5|?\2\u0395\u0396\7<\2\2\u0396\u0399\5\u00aaV\2\u0397")
        buf.write("\u0398\7\20\2\2\u0398\u039a\5\u00aaV\2\u0399\u0397\3\2")
        buf.write("\2\2\u0399\u039a\3\2\2\2\u039a\u00ad\3\2\2\2\u039b\u039c")
        buf.write("\7\23\2\2\u039c\u039d\7]\2\2\u039d\u039e\7\25\2\2\u039e")
        buf.write("\u03a5\5\u00a8U\2\u039f\u03a0\7\24\2\2\u03a0\u03a1\7;")
        buf.write("\2\2\u03a1\u03a2\5|?\2\u03a2\u03a3\7<\2\2\u03a3\u03a5")
        buf.write("\3\2\2\2\u03a4\u039b\3\2\2\2\u03a4\u039f\3\2\2\2\u03a5")
        buf.write("\u00af\3\2\2\2\u03a6\u03a7\5\u00aeX\2\u03a7\u03a8\5\u00aa")
        buf.write("V\2\u03a8\u00b1\3\2\2\2\u03a9\u03aa\7\21\2\2\u03aa\u03ab")
        buf.write("\7>\2\2\u03ab\u00b3\3\2\2\2\u03ac\u03af\7\22\2\2\u03ad")
        buf.write("\u03b0\5|?\2\u03ae\u03b0\5h\65\2\u03af\u03ad\3\2\2\2\u03af")
        buf.write("\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2\2")
        buf.write("\u03b1\u03b2\7>\2\2\u03b2\u00b5\3\2\2\2\u03b3\u03b4\t")
        buf.write("\16\2\2\u03b4\u03b8\7>\2\2\u03b5\u03b8\5\u00b2Z\2\u03b6")
        buf.write("\u03b8\5\u00b4[\2\u03b7\u03b3\3\2\2\2\u03b7\u03b5\3\2")
        buf.write("\2\2\u03b7\u03b6\3\2\2\2\u03b8\u00b7\3\2\2\2\u03b9\u03ba")
        buf.write("\7\n\2\2\u03ba\u03bb\7]\2\2\u03bb\u03bd\7;\2\2\u03bc\u03be")
        buf.write("\5F$\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c1\7<\2\2\u03c0\u03c2\5\32\16\2\u03c1")
        buf.write("\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\3\2\2\2")
        buf.write("\u03c3\u03c4\7>\2\2\u03c4\u00b9\3\2\2\2\u03c5\u03c6\7")
        buf.write("]\2\2\u03c6\u03c8\7;\2\2\u03c7\u03c9\5\u00a0Q\2\u03c8")
        buf.write("\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca\3\2\2\2")
        buf.write("\u03ca\u03cb\7<\2\2\u03cb\u00bb\3\2\2\2\u03cc\u03cd\7")
        buf.write("\7\2\2\u03cd\u03ce\7]\2\2\u03ce\u03d0\7;\2\2\u03cf\u03d1")
        buf.write("\5N(\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d4\7<\2\2\u03d3\u03d5\5\32\16\2\u03d4")
        buf.write("\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03d7\5\u00be`\2\u03d7\u00bd\3\2\2\2\u03d8\u03dc")
        buf.write("\79\2\2\u03d9\u03db\5\20\t\2\u03da\u03d9\3\2\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03e0\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03e1\5")
        buf.write("\u00b4[\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e2\3\2\2\2\u03e2\u03e3\7:\2\2\u03e3\u00bf\3\2\2\2")
        buf.write("\u03e4\u03e5\7\5\2\2\u03e5\u03e9\79\2\2\u03e6\u03e8\5")
        buf.write("\20\t\2\u03e7\u03e6\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9")
        buf.write("\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec\3\2\2\2")
        buf.write("\u03eb\u03e9\3\2\2\2\u03ec\u03ed\7:\2\2\u03ed\u00c1\3")
        buf.write("\2\2\2\u03ee\u03f0\7\13\2\2\u03ef\u03f1\5\34\17\2\u03f0")
        buf.write("\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2")
        buf.write("\u03f2\u03f3\5\\/\2\u03f3\u00c3\3\2\2\2\u03f4\u03fd\7")
        buf.write("_\2\2\u03f5\u03f6\7\61\2\2\u03f6\u03f9\7;\2\2\u03f7\u03fa")
        buf.write("\7]\2\2\u03f8\u03fa\5\\/\2\u03f9\u03f7\3\2\2\2\u03f9\u03f8")
        buf.write("\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd\7<\2\2\u03fc")
        buf.write("\u03f4\3\2\2\2\u03fc\u03f5\3\2\2\2\u03fd\u00c5\3\2\2\2")
        buf.write("\u03fe\u0404\7\62\2\2\u03ff\u0401\7;\2\2\u0400\u0402\5")
        buf.write("\u00a0Q\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0405\7<\2\2\u0404\u03ff\3\2\2\2")
        buf.write("\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\5")
        buf.write("\34\17\2\u0407\u040c\5\u0098M\2\u0408\u0409\7@\2\2\u0409")
        buf.write("\u040b\5\u0098M\2\u040a\u0408\3\2\2\2\u040b\u040e\3\2")
        buf.write("\2\2\u040c\u040a\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u00c7")
        buf.write("\3\2\2\2\u040e\u040c\3\2\2\2\u040f\u0410\5\u00c6d\2\u0410")
        buf.write("\u0411\7>\2\2\u0411\u0414\3\2\2\2\u0412\u0414\5\u00c2")
        buf.write("b\2\u0413\u040f\3\2\2\2\u0413\u0412\3\2\2\2\u0414\u00c9")
        buf.write("\3\2\2\2\u0415\u0418\5\u00ccg\2\u0416\u0418\5\u00ceh\2")
        buf.write("\u0417\u0415\3\2\2\2\u0417\u0416\3\2\2\2\u0418\u00cb\3")
        buf.write("\2\2\2\u0419\u041a\7\6\2\2\u041a\u041b\7a\2\2\u041b\u041c")
        buf.write("\7>\2\2\u041c\u00cd\3\2\2\2\u041d\u041e\7\b\2\2\u041e")
        buf.write("\u0424\7]\2\2\u041f\u0421\7;\2\2\u0420\u0422\5\u00d0i")
        buf.write("\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0425\7<\2\2\u0424\u041f\3\2\2\2\u0424")
        buf.write("\u0425\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\5\36\20")
        buf.write("\2\u0427\u0429\5\32\16\2\u0428\u0427\3\2\2\2\u0428\u0429")
        buf.write("\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042e\79\2\2\u042b")
        buf.write("\u042d\13\2\2\2\u042c\u042b\3\2\2\2\u042d\u0430\3\2\2")
        buf.write("\2\u042e\u042f\3\2\2\2\u042e\u042c\3\2\2\2\u042f\u0431")
        buf.write("\3\2\2\2\u0430\u042e\3\2\2\2\u0431\u0432\7:\2\2\u0432")
        buf.write("\u00cf\3\2\2\2\u0433\u0436\5J&\2\u0434\u0436\5\u00a0Q")
        buf.write("\2\u0435\u0433\3\2\2\2\u0435\u0434\3\2\2\2\u0436\u00d1")
        buf.write("\3\2\2\2w\u00d5\u00d7\u00db\u00e0\u00e6\u00fe\u0108\u010f")
        buf.write("\u0119\u0129\u012f\u0133\u0136\u013b\u013f\u0142\u0150")
        buf.write("\u0157\u0164\u016f\u017d\u0182\u0187\u018b\u018e\u0191")
        buf.write("\u0199\u019e\u01a3\u01a7\u01b1\u01b3\u01ba\u01c1\u01c8")
        buf.write("\u01cf\u01d3\u01e0\u01e7\u01ec\u01f3\u01fb\u0205\u0209")
        buf.write("\u020d\u0216\u0219\u0222\u0224\u0231\u0235\u023b\u0242")
        buf.write("\u024a\u024d\u0255\u0261\u0264\u026c\u0272\u027e\u0283")
        buf.write("\u028a\u0292\u0299\u02a5\u02ac\u02b7\u02c2\u02cd\u02d8")
        buf.write("\u02e3\u02ee\u02f9\u0304\u030f\u0313\u031f\u0326\u032b")
        buf.write("\u032f\u0332\u033d\u0344\u0358\u035d\u036a\u0378\u0383")
        buf.write("\u038a\u038c\u0390\u0399\u03a4\u03af\u03b7\u03bd\u03c1")
        buf.write("\u03c8\u03d0\u03d4\u03dc\u03e0\u03e9\u03f0\u03f9\u03fc")
        buf.write("\u0401\u0404\u040c\u0413\u0417\u0421\u0424\u0428\u042e")
        buf.write("\u0435")
        return buf.getvalue()


class qasm3Parser ( Parser ):

    grammarFileName = "qasm3Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'OPENQASM'", "'include'", "'#pragma'", 
                     "'defcalgrammar'", "'def'", "'defcal'", "'gate'", "'extern'", 
                     "'box'", "'let'", "'break'", "'continue'", "'if'", 
                     "'else'", "'end'", "'return'", "'for'", "'while'", 
                     "'in'", "'input'", "'output'", "'const'", "'mutable'", 
                     "'qreg'", "'qubit'", "'creg'", "'bool'", "'bit'", "'int'", 
                     "'uint'", "'float'", "'angle'", "'complex'", "'array'", 
                     "'duration'", "'stretch'", "'U'", "'CX'", "'gphase'", 
                     "'inv'", "'pow'", "'ctrl'", "'negctrl'", "'#dim'", 
                     "'sizeof'", "<INVALID>", "'durationof'", "<INVALID>", 
                     "'reset'", "'measure'", "'barrier'", "<INVALID>", "'['", 
                     "']'", "'{'", "'}'", "'('", "')'", "':'", "';'", "'.'", 
                     "','", "'='", "'->'", "'+'", "'++'", "'-'", "'*'", 
                     "'**'", "'/'", "'%'", "'|'", "'||'", "'&'", "'&&'", 
                     "'^'", "'@'", "'~'", "'!'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'im'" ]

    symbolicNames = [ "<INVALID>", "OPENQASM", "INCLUDE", "PRAGMA", "DEFCALGRAMMAR", 
                      "DEF", "DEFCAL", "GATE", "EXTERN", "BOX", "LET", "BREAK", 
                      "CONTINUE", "IF", "ELSE", "END", "RETURN", "FOR", 
                      "WHILE", "IN", "INPUT", "OUTPUT", "CONST", "MUTABLE", 
                      "QREG", "QUBIT", "CREG", "BOOL", "BIT", "INT", "UINT", 
                      "FLOAT", "ANGLE", "COMPLEX", "ARRAY", "DURATION", 
                      "STRETCH", "U_", "CX", "GPHASE", "INV", "POW", "CTRL", 
                      "NEGCTRL", "DIM", "SIZEOF", "BuiltinMath", "DURATIONOF", 
                      "BuiltinTimingInstruction", "RESET", "MEASURE", "BARRIER", 
                      "BooleanLiteral", "LBRACKET", "RBRACKET", "LBRACE", 
                      "RBRACE", "LPAREN", "RPAREN", "COLON", "SEMICOLON", 
                      "DOT", "COMMA", "EQUALS", "ARROW", "PLUS", "DOUBLE_PLUS", 
                      "MINUS", "ASTERISK", "DOUBLE_ASTERISK", "SLASH", "PERCENT", 
                      "PIPE", "DOUBLE_PIPE", "AMPERSAND", "DOUBLE_AMPERSAND", 
                      "CARET", "AT", "TILDE", "EXCLAMATION_POINT", "EqualityOperator", 
                      "CompoundAssignmentOperator", "ComparisonOperator", 
                      "BitshiftOperator", "IMAG", "ImaginaryLiteral", "Constant", 
                      "BinaryIntegerLiteral", "OctalIntegerLiteral", "DecimalIntegerLiteral", 
                      "HexIntegerLiteral", "Identifier", "FloatLiteral", 
                      "TimingLiteral", "BitstringLiteral", "StringLiteral", 
                      "Whitespace", "Newline", "LineComment", "BlockComment" ]

    RULE_program = 0
    RULE_header = 1
    RULE_version = 2
    RULE_include = 3
    RULE_ioIdentifier = 4
    RULE_io = 5
    RULE_globalStatement = 6
    RULE_statement = 7
    RULE_quantumDeclarationStatement = 8
    RULE_classicalDeclarationStatement = 9
    RULE_classicalAssignment = 10
    RULE_assignmentStatement = 11
    RULE_returnSignature = 12
    RULE_designator = 13
    RULE_identifierList = 14
    RULE_quantumDeclaration = 15
    RULE_quantumArgument = 16
    RULE_bitType = 17
    RULE_singleDesignatorType = 18
    RULE_noDesignatorType = 19
    RULE_nonArrayType = 20
    RULE_arrayType = 21
    RULE_arrayReferenceTypeDimensionSpecifier = 22
    RULE_arrayReferenceType = 23
    RULE_classicalType = 24
    RULE_numericType = 25
    RULE_constantDeclaration = 26
    RULE_singleDesignatorDeclaration = 27
    RULE_noDesignatorDeclaration = 28
    RULE_bitDeclaration = 29
    RULE_complexDeclaration = 30
    RULE_arrayInitializer = 31
    RULE_arrayDeclaration = 32
    RULE_classicalDeclaration = 33
    RULE_classicalTypeList = 34
    RULE_classicalArgument = 35
    RULE_classicalArgumentList = 36
    RULE_anyTypeArgument = 37
    RULE_anyTypeArgumentList = 38
    RULE_aliasInitializer = 39
    RULE_aliasStatement = 40
    RULE_rangeDefinition = 41
    RULE_quantumGateDefinition = 42
    RULE_quantumGateSignature = 43
    RULE_quantumGateName = 44
    RULE_quantumBlock = 45
    RULE_quantumLoop = 46
    RULE_quantumLoopBlock = 47
    RULE_quantumStatement = 48
    RULE_quantumInstruction = 49
    RULE_quantumBarrier = 50
    RULE_quantumMeasurement = 51
    RULE_quantumPhase = 52
    RULE_quantumReset = 53
    RULE_quantumMeasurementAssignment = 54
    RULE_powModifier = 55
    RULE_ctrlModifier = 56
    RULE_quantumGateModifier = 57
    RULE_quantumGateCall = 58
    RULE_unaryOperator = 59
    RULE_expressionStatement = 60
    RULE_expression = 61
    RULE_logicalAndExpression = 62
    RULE_bitOrExpression = 63
    RULE_xOrExpression = 64
    RULE_bitAndExpression = 65
    RULE_equalityExpression = 66
    RULE_comparisonExpression = 67
    RULE_bitShiftExpression = 68
    RULE_additiveExpression = 69
    RULE_multiplicativeExpression = 70
    RULE_unaryExpression = 71
    RULE_powerExpression = 72
    RULE_indexOperator = 73
    RULE_indexExpression = 74
    RULE_indexedIdentifier = 75
    RULE_expressionTerminator = 76
    RULE_builtInCall = 77
    RULE_castOperator = 78
    RULE_expressionList = 79
    RULE_equalsExpression = 80
    RULE_assignmentOperator = 81
    RULE_discreteSet = 82
    RULE_setDeclaration = 83
    RULE_programBlock = 84
    RULE_branchingStatement = 85
    RULE_loopSignature = 86
    RULE_loopStatement = 87
    RULE_endStatement = 88
    RULE_returnStatement = 89
    RULE_controlDirective = 90
    RULE_externDeclaration = 91
    RULE_externOrSubroutineCall = 92
    RULE_subroutineDefinition = 93
    RULE_subroutineBlock = 94
    RULE_pragma = 95
    RULE_timingBox = 96
    RULE_timingIdentifier = 97
    RULE_timingInstruction = 98
    RULE_timingStatement = 99
    RULE_calibration = 100
    RULE_calibrationGrammarDeclaration = 101
    RULE_calibrationDefinition = 102
    RULE_calibrationArgumentList = 103

    ruleNames =  [ "program", "header", "version", "include", "ioIdentifier", 
                   "io", "globalStatement", "statement", "quantumDeclarationStatement", 
                   "classicalDeclarationStatement", "classicalAssignment", 
                   "assignmentStatement", "returnSignature", "designator", 
                   "identifierList", "quantumDeclaration", "quantumArgument", 
                   "bitType", "singleDesignatorType", "noDesignatorType", 
                   "nonArrayType", "arrayType", "arrayReferenceTypeDimensionSpecifier", 
                   "arrayReferenceType", "classicalType", "numericType", 
                   "constantDeclaration", "singleDesignatorDeclaration", 
                   "noDesignatorDeclaration", "bitDeclaration", "complexDeclaration", 
                   "arrayInitializer", "arrayDeclaration", "classicalDeclaration", 
                   "classicalTypeList", "classicalArgument", "classicalArgumentList", 
                   "anyTypeArgument", "anyTypeArgumentList", "aliasInitializer", 
                   "aliasStatement", "rangeDefinition", "quantumGateDefinition", 
                   "quantumGateSignature", "quantumGateName", "quantumBlock", 
                   "quantumLoop", "quantumLoopBlock", "quantumStatement", 
                   "quantumInstruction", "quantumBarrier", "quantumMeasurement", 
                   "quantumPhase", "quantumReset", "quantumMeasurementAssignment", 
                   "powModifier", "ctrlModifier", "quantumGateModifier", 
                   "quantumGateCall", "unaryOperator", "expressionStatement", 
                   "expression", "logicalAndExpression", "bitOrExpression", 
                   "xOrExpression", "bitAndExpression", "equalityExpression", 
                   "comparisonExpression", "bitShiftExpression", "additiveExpression", 
                   "multiplicativeExpression", "unaryExpression", "powerExpression", 
                   "indexOperator", "indexExpression", "indexedIdentifier", 
                   "expressionTerminator", "builtInCall", "castOperator", 
                   "expressionList", "equalsExpression", "assignmentOperator", 
                   "discreteSet", "setDeclaration", "programBlock", "branchingStatement", 
                   "loopSignature", "loopStatement", "endStatement", "returnStatement", 
                   "controlDirective", "externDeclaration", "externOrSubroutineCall", 
                   "subroutineDefinition", "subroutineBlock", "pragma", 
                   "timingBox", "timingIdentifier", "timingInstruction", 
                   "timingStatement", "calibration", "calibrationGrammarDeclaration", 
                   "calibrationDefinition", "calibrationArgumentList" ]

    EOF = Token.EOF
    OPENQASM=1
    INCLUDE=2
    PRAGMA=3
    DEFCALGRAMMAR=4
    DEF=5
    DEFCAL=6
    GATE=7
    EXTERN=8
    BOX=9
    LET=10
    BREAK=11
    CONTINUE=12
    IF=13
    ELSE=14
    END=15
    RETURN=16
    FOR=17
    WHILE=18
    IN=19
    INPUT=20
    OUTPUT=21
    CONST=22
    MUTABLE=23
    QREG=24
    QUBIT=25
    CREG=26
    BOOL=27
    BIT=28
    INT=29
    UINT=30
    FLOAT=31
    ANGLE=32
    COMPLEX=33
    ARRAY=34
    DURATION=35
    STRETCH=36
    U_=37
    CX=38
    GPHASE=39
    INV=40
    POW=41
    CTRL=42
    NEGCTRL=43
    DIM=44
    SIZEOF=45
    BuiltinMath=46
    DURATIONOF=47
    BuiltinTimingInstruction=48
    RESET=49
    MEASURE=50
    BARRIER=51
    BooleanLiteral=52
    LBRACKET=53
    RBRACKET=54
    LBRACE=55
    RBRACE=56
    LPAREN=57
    RPAREN=58
    COLON=59
    SEMICOLON=60
    DOT=61
    COMMA=62
    EQUALS=63
    ARROW=64
    PLUS=65
    DOUBLE_PLUS=66
    MINUS=67
    ASTERISK=68
    DOUBLE_ASTERISK=69
    SLASH=70
    PERCENT=71
    PIPE=72
    DOUBLE_PIPE=73
    AMPERSAND=74
    DOUBLE_AMPERSAND=75
    CARET=76
    AT=77
    TILDE=78
    EXCLAMATION_POINT=79
    EqualityOperator=80
    CompoundAssignmentOperator=81
    ComparisonOperator=82
    BitshiftOperator=83
    IMAG=84
    ImaginaryLiteral=85
    Constant=86
    BinaryIntegerLiteral=87
    OctalIntegerLiteral=88
    DecimalIntegerLiteral=89
    HexIntegerLiteral=90
    Identifier=91
    FloatLiteral=92
    TimingLiteral=93
    BitstringLiteral=94
    StringLiteral=95
    Whitespace=96
    Newline=97
    LineComment=98
    BlockComment=99

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(qasm3Parser.HeaderContext,0)


        def globalStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.GlobalStatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.GlobalStatementContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = qasm3Parser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.header()
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.PRAGMA) | (1 << qasm3Parser.DEFCALGRAMMAR) | (1 << qasm3Parser.DEF) | (1 << qasm3Parser.DEFCAL) | (1 << qasm3Parser.GATE) | (1 << qasm3Parser.EXTERN) | (1 << qasm3Parser.BOX) | (1 << qasm3Parser.LET) | (1 << qasm3Parser.IF) | (1 << qasm3Parser.END) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.CONST) | (1 << qasm3Parser.QREG) | (1 << qasm3Parser.QUBIT) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.U_) | (1 << qasm3Parser.CX) | (1 << qasm3Parser.GPHASE) | (1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BuiltinTimingInstruction) | (1 << qasm3Parser.RESET) | (1 << qasm3Parser.MEASURE) | (1 << qasm3Parser.BARRIER) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                self.state = 211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.PRAGMA, qasm3Parser.DEFCALGRAMMAR, qasm3Parser.DEF, qasm3Parser.DEFCAL, qasm3Parser.GATE, qasm3Parser.EXTERN, qasm3Parser.QREG, qasm3Parser.QUBIT]:
                    self.state = 209
                    self.globalStatement()
                    pass
                elif token in [qasm3Parser.BOX, qasm3Parser.LET, qasm3Parser.IF, qasm3Parser.END, qasm3Parser.FOR, qasm3Parser.WHILE, qasm3Parser.CONST, qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.U_, qasm3Parser.CX, qasm3Parser.GPHASE, qasm3Parser.INV, qasm3Parser.POW, qasm3Parser.CTRL, qasm3Parser.NEGCTRL, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BuiltinTimingInstruction, qasm3Parser.RESET, qasm3Parser.MEASURE, qasm3Parser.BARRIER, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                    self.state = 210
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(qasm3Parser.VersionContext,0)


        def include(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IncludeContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IncludeContext,i)


        def io(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IoContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IoContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = qasm3Parser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.OPENQASM:
                self.state = 216
                self.version()


            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.INCLUDE:
                self.state = 219
                self.include()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.INPUT or _la==qasm3Parser.OUTPUT:
                self.state = 225
                self.io()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENQASM(self):
            return self.getToken(qasm3Parser.OPENQASM, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def DecimalIntegerLiteral(self):
            return self.getToken(qasm3Parser.DecimalIntegerLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(qasm3Parser.FloatLiteral, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = qasm3Parser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(qasm3Parser.OPENQASM)
            self.state = 232
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.DecimalIntegerLiteral or _la==qasm3Parser.FloatLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 233
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(qasm3Parser.INCLUDE, 0)

        def StringLiteral(self):
            return self.getToken(qasm3Parser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude" ):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)




    def include(self):

        localctx = qasm3Parser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_include)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(qasm3Parser.INCLUDE)
            self.state = 236
            self.match(qasm3Parser.StringLiteral)
            self.state = 237
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(qasm3Parser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(qasm3Parser.OUTPUT, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_ioIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoIdentifier" ):
                listener.enterIoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoIdentifier" ):
                listener.exitIoIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoIdentifier" ):
                return visitor.visitIoIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ioIdentifier(self):

        localctx = qasm3Parser.IoIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ioIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.INPUT or _la==qasm3Parser.OUTPUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IoIdentifierContext,0)


        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_io

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIo" ):
                listener.enterIo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIo" ):
                listener.exitIo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIo" ):
                return visitor.visitIo(self)
            else:
                return visitor.visitChildren(self)




    def io(self):

        localctx = qasm3Parser.IoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_io)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.ioIdentifier()
            self.state = 242
            self.classicalType()
            self.state = 243
            self.match(qasm3Parser.Identifier)
            self.state = 244
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.SubroutineDefinitionContext,0)


        def externDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ExternDeclarationContext,0)


        def quantumGateDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateDefinitionContext,0)


        def calibration(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumDeclarationStatementContext,0)


        def pragma(self):
            return self.getTypedRuleContext(qasm3Parser.PragmaContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalStatement" ):
                return visitor.visitGlobalStatement(self)
            else:
                return visitor.visitChildren(self)




    def globalStatement(self):

        localctx = qasm3Parser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_globalStatement)
        try:
            self.state = 252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.DEF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.subroutineDefinition()
                pass
            elif token in [qasm3Parser.EXTERN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 247
                self.externDeclaration()
                pass
            elif token in [qasm3Parser.GATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.quantumGateDefinition()
                pass
            elif token in [qasm3Parser.DEFCALGRAMMAR, qasm3Parser.DEFCAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 249
                self.calibration()
                pass
            elif token in [qasm3Parser.QREG, qasm3Parser.QUBIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 250
                self.quantumDeclarationStatement()
                pass
            elif token in [qasm3Parser.PRAGMA]:
                self.enterOuterAlt(localctx, 6)
                self.state = 251
                self.pragma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(qasm3Parser.AssignmentStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalDeclarationStatementContext,0)


        def branchingStatement(self):
            return self.getTypedRuleContext(qasm3Parser.BranchingStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(qasm3Parser.LoopStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(qasm3Parser.EndStatementContext,0)


        def aliasStatement(self):
            return self.getTypedRuleContext(qasm3Parser.AliasStatementContext,0)


        def quantumStatement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = qasm3Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 255
                self.assignmentStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 256
                self.classicalDeclarationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 257
                self.branchingStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 258
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 259
                self.endStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 260
                self.aliasStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 261
                self.quantumStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumDeclarationContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = qasm3Parser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.quantumDeclaration()
            self.state = 265
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def classicalDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ConstantDeclarationContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = qasm3Parser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classicalDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.state = 267
                self.classicalDeclaration()
                pass
            elif token in [qasm3Parser.CONST]:
                self.state = 268
                self.constantDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 271
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(qasm3Parser.AssignmentOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalAssignment" ):
                listener.enterClassicalAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalAssignment" ):
                listener.exitClassicalAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalAssignment" ):
                return visitor.visitClassicalAssignment(self)
            else:
                return visitor.visitChildren(self)




    def classicalAssignment(self):

        localctx = qasm3Parser.ClassicalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classicalAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.indexedIdentifier()
            self.state = 274
            self.assignmentOperator()
            self.state = 275
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def classicalAssignment(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalAssignmentContext,0)


        def quantumMeasurementAssignment(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementAssignmentContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = qasm3Parser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignmentStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 277
                self.classicalAssignment()
                pass

            elif la_ == 2:
                self.state = 278
                self.quantumMeasurementAssignment()
                pass


            self.state = 281
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(qasm3Parser.ARROW, 0)

        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = qasm3Parser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(qasm3Parser.ARROW)
            self.state = 284
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = qasm3Parser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(qasm3Parser.LBRACKET)
            self.state = 287
            self.expression(0)
            self.state = 288
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.Identifier)
            else:
                return self.getToken(qasm3Parser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = qasm3Parser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(qasm3Parser.Identifier)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 291
                self.match(qasm3Parser.COMMA)
                self.state = 292
                self.match(qasm3Parser.Identifier)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QREG(self):
            return self.getToken(qasm3Parser.QREG, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def QUBIT(self):
            return self.getToken(qasm3Parser.QUBIT, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclaration" ):
                listener.enterQuantumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclaration" ):
                listener.exitQuantumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclaration" ):
                return visitor.visitQuantumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclaration(self):

        localctx = qasm3Parser.QuantumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_quantumDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.QREG]:
                self.enterOuterAlt(localctx, 1)
                self.state = 298
                self.match(qasm3Parser.QREG)
                self.state = 299
                self.match(qasm3Parser.Identifier)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 300
                    self.designator()


                pass
            elif token in [qasm3Parser.QUBIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.match(qasm3Parser.QUBIT)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 304
                    self.designator()


                self.state = 307
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QREG(self):
            return self.getToken(qasm3Parser.QREG, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def QUBIT(self):
            return self.getToken(qasm3Parser.QUBIT, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgument" ):
                listener.enterQuantumArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgument" ):
                listener.exitQuantumArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumArgument" ):
                return visitor.visitQuantumArgument(self)
            else:
                return visitor.visitChildren(self)




    def quantumArgument(self):

        localctx = qasm3Parser.QuantumArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_quantumArgument)
        self._la = 0 # Token type
        try:
            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.QREG]:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.match(qasm3Parser.QREG)
                self.state = 311
                self.match(qasm3Parser.Identifier)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 312
                    self.designator()


                pass
            elif token in [qasm3Parser.QUBIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.match(qasm3Parser.QUBIT)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 316
                    self.designator()


                self.state = 319
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(qasm3Parser.BIT, 0)

        def CREG(self):
            return self.getToken(qasm3Parser.CREG, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_bitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitType" ):
                listener.enterBitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitType" ):
                listener.exitBitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitType" ):
                return visitor.visitBitType(self)
            else:
                return visitor.visitChildren(self)




    def bitType(self):

        localctx = qasm3Parser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_bitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.CREG or _la==qasm3Parser.BIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDesignatorTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(qasm3Parser.INT, 0)

        def UINT(self):
            return self.getToken(qasm3Parser.UINT, 0)

        def FLOAT(self):
            return self.getToken(qasm3Parser.FLOAT, 0)

        def ANGLE(self):
            return self.getToken(qasm3Parser.ANGLE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_singleDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorType" ):
                listener.enterSingleDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorType" ):
                listener.exitSingleDesignatorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDesignatorType" ):
                return visitor.visitSingleDesignatorType(self)
            else:
                return visitor.visitChildren(self)




    def singleDesignatorType(self):

        localctx = qasm3Parser.SingleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_singleDesignatorType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoDesignatorTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(qasm3Parser.BOOL, 0)

        def DURATION(self):
            return self.getToken(qasm3Parser.DURATION, 0)

        def STRETCH(self):
            return self.getToken(qasm3Parser.STRETCH, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_noDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorType" ):
                listener.enterNoDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorType" ):
                listener.exitNoDesignatorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoDesignatorType" ):
                return visitor.visitNoDesignatorType(self)
            else:
                return visitor.visitChildren(self)




    def noDesignatorType(self):

        localctx = qasm3Parser.NoDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_noDesignatorType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.BOOL) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorTypeContext,0)


        def bitType(self):
            return self.getTypedRuleContext(qasm3Parser.BitTypeContext,0)


        def COMPLEX(self):
            return self.getToken(qasm3Parser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(qasm3Parser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_nonArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonArrayType" ):
                listener.enterNonArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonArrayType" ):
                listener.exitNonArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonArrayType" ):
                return visitor.visitNonArrayType(self)
            else:
                return visitor.visitChildren(self)




    def nonArrayType(self):

        localctx = qasm3Parser.NonArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_nonArrayType)
        self._la = 0 # Token type
        try:
            self.state = 341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.singleDesignatorType()
                self.state = 329
                self.designator()
                pass
            elif token in [qasm3Parser.BOOL, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.noDesignatorType()
                pass
            elif token in [qasm3Parser.CREG, qasm3Parser.BIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.bitType()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 333
                    self.designator()


                pass
            elif token in [qasm3Parser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 336
                self.match(qasm3Parser.COMPLEX)
                self.state = 337
                self.match(qasm3Parser.LBRACKET)
                self.state = 338
                self.numericType()
                self.state = 339
                self.match(qasm3Parser.RBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(qasm3Parser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def nonArrayType(self):
            return self.getTypedRuleContext(qasm3Parser.NonArrayTypeContext,0)


        def COMMA(self):
            return self.getToken(qasm3Parser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = qasm3Parser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(qasm3Parser.ARRAY)
            self.state = 344
            self.match(qasm3Parser.LBRACKET)
            self.state = 345
            self.nonArrayType()
            self.state = 346
            self.match(qasm3Parser.COMMA)
            self.state = 347
            self.expressionList()
            self.state = 348
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeDimensionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(qasm3Parser.DIM, 0)

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_arrayReferenceTypeDimensionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceTypeDimensionSpecifier" ):
                listener.enterArrayReferenceTypeDimensionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceTypeDimensionSpecifier" ):
                listener.exitArrayReferenceTypeDimensionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceTypeDimensionSpecifier" ):
                return visitor.visitArrayReferenceTypeDimensionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceTypeDimensionSpecifier(self):

        localctx = qasm3Parser.ArrayReferenceTypeDimensionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_arrayReferenceTypeDimensionSpecifier)
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self.expressionList()
                pass
            elif token in [qasm3Parser.DIM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 351
                self.match(qasm3Parser.DIM)
                self.state = 352
                self.match(qasm3Parser.EQUALS)
                self.state = 353
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(qasm3Parser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def nonArrayType(self):
            return self.getTypedRuleContext(qasm3Parser.NonArrayTypeContext,0)


        def COMMA(self):
            return self.getToken(qasm3Parser.COMMA, 0)

        def arrayReferenceTypeDimensionSpecifier(self):
            return self.getTypedRuleContext(qasm3Parser.ArrayReferenceTypeDimensionSpecifierContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = qasm3Parser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_arrayReferenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(qasm3Parser.ARRAY)
            self.state = 357
            self.match(qasm3Parser.LBRACKET)
            self.state = 358
            self.nonArrayType()
            self.state = 359
            self.match(qasm3Parser.COMMA)
            self.state = 360
            self.arrayReferenceTypeDimensionSpecifier()
            self.state = 361
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonArrayType(self):
            return self.getTypedRuleContext(qasm3Parser.NonArrayTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(qasm3Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalType" ):
                listener.enterClassicalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalType" ):
                listener.exitClassicalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalType" ):
                return visitor.visitClassicalType(self)
            else:
                return visitor.visitChildren(self)




    def classicalType(self):

        localctx = qasm3Parser.ClassicalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_classicalType)
        try:
            self.state = 365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.nonArrayType()
                pass
            elif token in [qasm3Parser.ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericType" ):
                return visitor.visitNumericType(self)
            else:
                return visitor.visitChildren(self)




    def numericType(self):

        localctx = qasm3Parser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_numericType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.singleDesignatorType()
            self.state = 368
            self.designator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(qasm3Parser.CONST, 0)

        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclaration" ):
                return visitor.visitConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclaration(self):

        localctx = qasm3Parser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(qasm3Parser.CONST)
            self.state = 371
            self.classicalType()
            self.state = 372
            self.match(qasm3Parser.Identifier)
            self.state = 373
            self.equalsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDesignatorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_singleDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorDeclaration" ):
                listener.enterSingleDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorDeclaration" ):
                listener.exitSingleDesignatorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDesignatorDeclaration" ):
                return visitor.visitSingleDesignatorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def singleDesignatorDeclaration(self):

        localctx = qasm3Parser.SingleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_singleDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.singleDesignatorType()
            self.state = 376
            self.designator()
            self.state = 377
            self.match(qasm3Parser.Identifier)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 378
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoDesignatorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorTypeContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_noDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorDeclaration" ):
                listener.enterNoDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorDeclaration" ):
                listener.exitNoDesignatorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoDesignatorDeclaration" ):
                return visitor.visitNoDesignatorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def noDesignatorDeclaration(self):

        localctx = qasm3Parser.NoDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.noDesignatorType()
            self.state = 382
            self.match(qasm3Parser.Identifier)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 383
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREG(self):
            return self.getToken(qasm3Parser.CREG, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def BIT(self):
            return self.getToken(qasm3Parser.BIT, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_bitDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitDeclaration" ):
                listener.enterBitDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitDeclaration" ):
                listener.exitBitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitDeclaration" ):
                return visitor.visitBitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def bitDeclaration(self):

        localctx = qasm3Parser.BitDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_bitDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CREG]:
                self.state = 386
                self.match(qasm3Parser.CREG)
                self.state = 387
                self.match(qasm3Parser.Identifier)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 388
                    self.designator()


                pass
            elif token in [qasm3Parser.BIT]:
                self.state = 391
                self.match(qasm3Parser.BIT)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 392
                    self.designator()


                self.state = 395
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 398
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPLEX(self):
            return self.getToken(qasm3Parser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(qasm3Parser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_complexDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDeclaration" ):
                listener.enterComplexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDeclaration" ):
                listener.exitComplexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDeclaration" ):
                return visitor.visitComplexDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def complexDeclaration(self):

        localctx = qasm3Parser.ComplexDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_complexDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(qasm3Parser.COMPLEX)
            self.state = 402
            self.match(qasm3Parser.LBRACKET)
            self.state = 403
            self.numericType()
            self.state = 404
            self.match(qasm3Parser.RBRACKET)
            self.state = 405
            self.match(qasm3Parser.Identifier)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 406
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def arrayInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ArrayInitializerContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ArrayInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = qasm3Parser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(qasm3Parser.LBRACE)
            self.state = 412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                self.state = 410
                self.expression(0)
                pass
            elif token in [qasm3Parser.LBRACE]:
                self.state = 411
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 414
                self.match(qasm3Parser.COMMA)
                self.state = 417
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                    self.state = 415
                    self.expression(0)
                    pass
                elif token in [qasm3Parser.LBRACE]:
                    self.state = 416
                    self.arrayInitializer()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(qasm3Parser.ArrayTypeContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def arrayInitializer(self):
            return self.getTypedRuleContext(qasm3Parser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = qasm3Parser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.arrayType()
            self.state = 427
            self.match(qasm3Parser.Identifier)
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 428
                self.match(qasm3Parser.EQUALS)
                self.state = 431
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.LBRACE]:
                    self.state = 429
                    self.arrayInitializer()
                    pass
                elif token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                    self.state = 430
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorDeclarationContext,0)


        def noDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorDeclarationContext,0)


        def bitDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.BitDeclarationContext,0)


        def complexDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ComplexDeclarationContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ArrayDeclarationContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclaration" ):
                listener.enterClassicalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclaration" ):
                listener.exitClassicalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclaration" ):
                return visitor.visitClassicalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclaration(self):

        localctx = qasm3Parser.ClassicalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_classicalDeclaration)
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 435
                self.singleDesignatorDeclaration()
                pass
            elif token in [qasm3Parser.BOOL, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 436
                self.noDesignatorDeclaration()
                pass
            elif token in [qasm3Parser.CREG, qasm3Parser.BIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.bitDeclaration()
                pass
            elif token in [qasm3Parser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 438
                self.complexDeclaration()
                pass
            elif token in [qasm3Parser.ARRAY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 439
                self.arrayDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ClassicalTypeContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalTypeList" ):
                listener.enterClassicalTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalTypeList" ):
                listener.exitClassicalTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalTypeList" ):
                return visitor.visitClassicalTypeList(self)
            else:
                return visitor.visitChildren(self)




    def classicalTypeList(self):

        localctx = qasm3Parser.ClassicalTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_classicalTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.classicalType()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 443
                self.match(qasm3Parser.COMMA)
                self.state = 444
                self.classicalType()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorTypeContext,0)


        def CREG(self):
            return self.getToken(qasm3Parser.CREG, 0)

        def BIT(self):
            return self.getToken(qasm3Parser.BIT, 0)

        def COMPLEX(self):
            return self.getToken(qasm3Parser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(qasm3Parser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def arrayReferenceType(self):
            return self.getTypedRuleContext(qasm3Parser.ArrayReferenceTypeContext,0)


        def CONST(self):
            return self.getToken(qasm3Parser.CONST, 0)

        def MUTABLE(self):
            return self.getToken(qasm3Parser.MUTABLE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgument" ):
                listener.enterClassicalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgument" ):
                listener.exitClassicalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalArgument" ):
                return visitor.visitClassicalArgument(self)
            else:
                return visitor.visitChildren(self)




    def classicalArgument(self):

        localctx = qasm3Parser.ClassicalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_classicalArgument)
        self._la = 0 # Token type
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.BOOL, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE]:
                    self.state = 450
                    self.singleDesignatorType()
                    self.state = 451
                    self.designator()
                    pass
                elif token in [qasm3Parser.BOOL, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                    self.state = 453
                    self.noDesignatorType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 456
                self.match(qasm3Parser.Identifier)
                pass
            elif token in [qasm3Parser.CREG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.match(qasm3Parser.CREG)
                self.state = 459
                self.match(qasm3Parser.Identifier)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 460
                    self.designator()


                pass
            elif token in [qasm3Parser.BIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.match(qasm3Parser.BIT)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 464
                    self.designator()


                self.state = 467
                self.match(qasm3Parser.Identifier)
                pass
            elif token in [qasm3Parser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 468
                self.match(qasm3Parser.COMPLEX)
                self.state = 469
                self.match(qasm3Parser.LBRACKET)
                self.state = 470
                self.numericType()
                self.state = 471
                self.match(qasm3Parser.RBRACKET)
                self.state = 472
                self.match(qasm3Parser.Identifier)
                pass
            elif token in [qasm3Parser.CONST, qasm3Parser.MUTABLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 474
                _la = self._input.LA(1)
                if not(_la==qasm3Parser.CONST or _la==qasm3Parser.MUTABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 475
                self.arrayReferenceType()
                self.state = 476
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ClassicalArgumentContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ClassicalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgumentList" ):
                listener.enterClassicalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgumentList" ):
                listener.exitClassicalArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalArgumentList" ):
                return visitor.visitClassicalArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def classicalArgumentList(self):

        localctx = qasm3Parser.ClassicalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_classicalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.classicalArgument()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 481
                self.match(qasm3Parser.COMMA)
                self.state = 482
                self.classicalArgument()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyTypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalArgumentContext,0)


        def quantumArgument(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumArgumentContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_anyTypeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgument" ):
                listener.enterAnyTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgument" ):
                listener.exitAnyTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyTypeArgument" ):
                return visitor.visitAnyTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def anyTypeArgument(self):

        localctx = qasm3Parser.AnyTypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_anyTypeArgument)
        try:
            self.state = 490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CONST, qasm3Parser.MUTABLE, qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.classicalArgument()
                pass
            elif token in [qasm3Parser.QREG, qasm3Parser.QUBIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self.quantumArgument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyTypeArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyTypeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.AnyTypeArgumentContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.AnyTypeArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_anyTypeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgumentList" ):
                listener.enterAnyTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgumentList" ):
                listener.exitAnyTypeArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyTypeArgumentList" ):
                return visitor.visitAnyTypeArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def anyTypeArgumentList(self):

        localctx = qasm3Parser.AnyTypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_anyTypeArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.anyTypeArgument()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 493
                self.match(qasm3Parser.COMMA)
                self.state = 494
                self.anyTypeArgument()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def DOUBLE_PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.DOUBLE_PLUS)
            else:
                return self.getToken(qasm3Parser.DOUBLE_PLUS, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_aliasInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasInitializer" ):
                listener.enterAliasInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasInitializer" ):
                listener.exitAliasInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasInitializer" ):
                return visitor.visitAliasInitializer(self)
            else:
                return visitor.visitChildren(self)




    def aliasInitializer(self):

        localctx = qasm3Parser.AliasInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_aliasInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.expression(0)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.DOUBLE_PLUS:
                self.state = 501
                self.match(qasm3Parser.DOUBLE_PLUS)
                self.state = 502
                self.expression(0)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(qasm3Parser.LET, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def aliasInitializer(self):
            return self.getTypedRuleContext(qasm3Parser.AliasInitializerContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_aliasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasStatement" ):
                listener.enterAliasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasStatement" ):
                listener.exitAliasStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasStatement" ):
                return visitor.visitAliasStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasStatement(self):

        localctx = qasm3Parser.AliasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_aliasStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(qasm3Parser.LET)
            self.state = 509
            self.match(qasm3Parser.Identifier)
            self.state = 510
            self.match(qasm3Parser.EQUALS)
            self.state = 511
            self.aliasInitializer()
            self.state = 512
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COLON)
            else:
                return self.getToken(qasm3Parser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_rangeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeDefinition" ):
                listener.enterRangeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeDefinition" ):
                listener.exitRangeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeDefinition" ):
                return visitor.visitRangeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def rangeDefinition(self):

        localctx = qasm3Parser.RangeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_rangeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                self.state = 514
                self.expression(0)


            self.state = 517
            self.match(qasm3Parser.COLON)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                self.state = 518
                self.expression(0)


            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.COLON:
                self.state = 521
                self.match(qasm3Parser.COLON)
                self.state = 522
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GATE(self):
            return self.getToken(qasm3Parser.GATE, 0)

        def quantumGateSignature(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateSignatureContext,0)


        def quantumBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateDefinition" ):
                listener.enterQuantumGateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateDefinition" ):
                listener.exitQuantumGateDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateDefinition" ):
                return visitor.visitQuantumGateDefinition(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateDefinition(self):

        localctx = qasm3Parser.QuantumGateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_quantumGateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(qasm3Parser.GATE)
            self.state = 526
            self.quantumGateSignature()
            self.state = 527
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateNameContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateSignature" ):
                listener.enterQuantumGateSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateSignature" ):
                listener.exitQuantumGateSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateSignature" ):
                return visitor.visitQuantumGateSignature(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateSignature(self):

        localctx = qasm3Parser.QuantumGateSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_quantumGateSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.quantumGateName()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 530
                self.match(qasm3Parser.LPAREN)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.Identifier:
                    self.state = 531
                    self.identifierList()


                self.state = 534
                self.match(qasm3Parser.RPAREN)


            self.state = 537
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def U_(self):
            return self.getToken(qasm3Parser.U_, 0)

        def CX(self):
            return self.getToken(qasm3Parser.CX, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateName" ):
                listener.enterQuantumGateName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateName" ):
                listener.exitQuantumGateName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateName" ):
                return visitor.visitQuantumGateName(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateName(self):

        localctx = qasm3Parser.QuantumGateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_quantumGateName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (qasm3Parser.U_ - 37)) | (1 << (qasm3Parser.CX - 37)) | (1 << (qasm3Parser.Identifier - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumStatementContext,i)


        def quantumLoop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumLoopContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumLoopContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBlock" ):
                listener.enterQuantumBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBlock" ):
                listener.exitQuantumBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumBlock" ):
                return visitor.visitQuantumBlock(self)
            else:
                return visitor.visitChildren(self)




    def quantumBlock(self):

        localctx = qasm3Parser.QuantumBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_quantumBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(qasm3Parser.LBRACE)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.BOX) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.U_) | (1 << qasm3Parser.CX) | (1 << qasm3Parser.GPHASE) | (1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL) | (1 << qasm3Parser.BuiltinTimingInstruction) | (1 << qasm3Parser.RESET) | (1 << qasm3Parser.MEASURE) | (1 << qasm3Parser.BARRIER))) != 0) or _la==qasm3Parser.Identifier:
                self.state = 544
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.BOX, qasm3Parser.U_, qasm3Parser.CX, qasm3Parser.GPHASE, qasm3Parser.INV, qasm3Parser.POW, qasm3Parser.CTRL, qasm3Parser.NEGCTRL, qasm3Parser.BuiltinTimingInstruction, qasm3Parser.RESET, qasm3Parser.MEASURE, qasm3Parser.BARRIER, qasm3Parser.Identifier]:
                    self.state = 542
                    self.quantumStatement()
                    pass
                elif token in [qasm3Parser.FOR, qasm3Parser.WHILE]:
                    self.state = 543
                    self.quantumLoop()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 549
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumLoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(qasm3Parser.LoopSignatureContext,0)


        def quantumLoopBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumLoopBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoop" ):
                listener.enterQuantumLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoop" ):
                listener.exitQuantumLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumLoop" ):
                return visitor.visitQuantumLoop(self)
            else:
                return visitor.visitChildren(self)




    def quantumLoop(self):

        localctx = qasm3Parser.QuantumLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_quantumLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.loopSignature()
            self.state = 552
            self.quantumLoopBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumLoopBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumStatementContext,i)


        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumLoopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoopBlock" ):
                listener.enterQuantumLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoopBlock" ):
                listener.exitQuantumLoopBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumLoopBlock" ):
                return visitor.visitQuantumLoopBlock(self)
            else:
                return visitor.visitChildren(self)




    def quantumLoopBlock(self):

        localctx = qasm3Parser.QuantumLoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_quantumLoopBlock)
        self._la = 0 # Token type
        try:
            self.state = 563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.BOX, qasm3Parser.U_, qasm3Parser.CX, qasm3Parser.GPHASE, qasm3Parser.INV, qasm3Parser.POW, qasm3Parser.CTRL, qasm3Parser.NEGCTRL, qasm3Parser.BuiltinTimingInstruction, qasm3Parser.RESET, qasm3Parser.MEASURE, qasm3Parser.BARRIER, qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.quantumStatement()
                pass
            elif token in [qasm3Parser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(qasm3Parser.LBRACE)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.BOX) | (1 << qasm3Parser.U_) | (1 << qasm3Parser.CX) | (1 << qasm3Parser.GPHASE) | (1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL) | (1 << qasm3Parser.BuiltinTimingInstruction) | (1 << qasm3Parser.RESET) | (1 << qasm3Parser.MEASURE) | (1 << qasm3Parser.BARRIER))) != 0) or _la==qasm3Parser.Identifier:
                    self.state = 556
                    self.quantumStatement()
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 562
                self.match(qasm3Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumInstruction(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def timingStatement(self):
            return self.getTypedRuleContext(qasm3Parser.TimingStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumStatement" ):
                listener.enterQuantumStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumStatement" ):
                listener.exitQuantumStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumStatement" ):
                return visitor.visitQuantumStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumStatement(self):

        localctx = qasm3Parser.QuantumStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_quantumStatement)
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.U_, qasm3Parser.CX, qasm3Parser.GPHASE, qasm3Parser.INV, qasm3Parser.POW, qasm3Parser.CTRL, qasm3Parser.NEGCTRL, qasm3Parser.RESET, qasm3Parser.MEASURE, qasm3Parser.BARRIER, qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.quantumInstruction()
                self.state = 566
                self.match(qasm3Parser.SEMICOLON)
                pass
            elif token in [qasm3Parser.BOX, qasm3Parser.BuiltinTimingInstruction]:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.timingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumInstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateCall(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateCallContext,0)


        def quantumPhase(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumPhaseContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementContext,0)


        def quantumReset(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumResetContext,0)


        def quantumBarrier(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBarrierContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumInstruction" ):
                listener.enterQuantumInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumInstruction" ):
                listener.exitQuantumInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumInstruction" ):
                return visitor.visitQuantumInstruction(self)
            else:
                return visitor.visitChildren(self)




    def quantumInstruction(self):

        localctx = qasm3Parser.QuantumInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_quantumInstruction)
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.quantumGateCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.quantumPhase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.quantumMeasurement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 574
                self.quantumReset()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 575
                self.quantumBarrier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumBarrierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARRIER(self):
            return self.getToken(qasm3Parser.BARRIER, 0)

        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumBarrier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBarrier" ):
                listener.enterQuantumBarrier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBarrier" ):
                listener.exitQuantumBarrier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumBarrier" ):
                return visitor.visitQuantumBarrier(self)
            else:
                return visitor.visitChildren(self)




    def quantumBarrier(self):

        localctx = qasm3Parser.QuantumBarrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_quantumBarrier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(qasm3Parser.BARRIER)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.Identifier:
                self.state = 579
                self.indexedIdentifier()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==qasm3Parser.COMMA:
                    self.state = 580
                    self.match(qasm3Parser.COMMA)
                    self.state = 581
                    self.indexedIdentifier()
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumMeasurementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(qasm3Parser.MEASURE, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumMeasurement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurement" ):
                listener.enterQuantumMeasurement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurement" ):
                listener.exitQuantumMeasurement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumMeasurement" ):
                return visitor.visitQuantumMeasurement(self)
            else:
                return visitor.visitChildren(self)




    def quantumMeasurement(self):

        localctx = qasm3Parser.QuantumMeasurementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_quantumMeasurement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(qasm3Parser.MEASURE)
            self.state = 590
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumPhaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GPHASE(self):
            return self.getToken(qasm3Parser.GPHASE, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumGateModifierContext,i)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumPhase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumPhase" ):
                listener.enterQuantumPhase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumPhase" ):
                listener.exitQuantumPhase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumPhase" ):
                return visitor.visitQuantumPhase(self)
            else:
                return visitor.visitChildren(self)




    def quantumPhase(self):

        localctx = qasm3Parser.QuantumPhaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_quantumPhase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL))) != 0):
                self.state = 592
                self.quantumGateModifier()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 598
            self.match(qasm3Parser.GPHASE)
            self.state = 599
            self.match(qasm3Parser.LPAREN)
            self.state = 600
            self.expression(0)
            self.state = 601
            self.match(qasm3Parser.RPAREN)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.Identifier:
                self.state = 602
                self.indexedIdentifier()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==qasm3Parser.COMMA:
                    self.state = 603
                    self.match(qasm3Parser.COMMA)
                    self.state = 604
                    self.indexedIdentifier()
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumResetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(qasm3Parser.RESET, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumReset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumReset" ):
                listener.enterQuantumReset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumReset" ):
                listener.exitQuantumReset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumReset" ):
                return visitor.visitQuantumReset(self)
            else:
                return visitor.visitChildren(self)




    def quantumReset(self):

        localctx = qasm3Parser.QuantumResetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_quantumReset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(qasm3Parser.RESET)
            self.state = 613
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumMeasurementAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementContext,0)


        def ARROW(self):
            return self.getToken(qasm3Parser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,0)


        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumMeasurementAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurementAssignment" ):
                listener.enterQuantumMeasurementAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurementAssignment" ):
                listener.exitQuantumMeasurementAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumMeasurementAssignment" ):
                return visitor.visitQuantumMeasurementAssignment(self)
            else:
                return visitor.visitChildren(self)




    def quantumMeasurementAssignment(self):

        localctx = qasm3Parser.QuantumMeasurementAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_quantumMeasurementAssignment)
        self._la = 0 # Token type
        try:
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.MEASURE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.quantumMeasurement()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.ARROW:
                    self.state = 616
                    self.match(qasm3Parser.ARROW)
                    self.state = 617
                    self.indexedIdentifier()


                pass
            elif token in [qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.indexedIdentifier()
                self.state = 621
                self.match(qasm3Parser.EQUALS)
                self.state = 622
                self.quantumMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POW(self):
            return self.getToken(qasm3Parser.POW, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_powModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowModifier" ):
                listener.enterPowModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowModifier" ):
                listener.exitPowModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowModifier" ):
                return visitor.visitPowModifier(self)
            else:
                return visitor.visitChildren(self)




    def powModifier(self):

        localctx = qasm3Parser.PowModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_powModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(qasm3Parser.POW)
            self.state = 627
            self.match(qasm3Parser.LPAREN)
            self.state = 628
            self.expression(0)
            self.state = 629
            self.match(qasm3Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtrlModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CTRL(self):
            return self.getToken(qasm3Parser.CTRL, 0)

        def NEGCTRL(self):
            return self.getToken(qasm3Parser.NEGCTRL, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_ctrlModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrlModifier" ):
                listener.enterCtrlModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrlModifier" ):
                listener.exitCtrlModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtrlModifier" ):
                return visitor.visitCtrlModifier(self)
            else:
                return visitor.visitChildren(self)




    def ctrlModifier(self):

        localctx = qasm3Parser.CtrlModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_ctrlModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.CTRL or _la==qasm3Parser.NEGCTRL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 632
                self.match(qasm3Parser.LPAREN)
                self.state = 633
                self.expression(0)
                self.state = 634
                self.match(qasm3Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(qasm3Parser.AT, 0)

        def INV(self):
            return self.getToken(qasm3Parser.INV, 0)

        def powModifier(self):
            return self.getTypedRuleContext(qasm3Parser.PowModifierContext,0)


        def ctrlModifier(self):
            return self.getTypedRuleContext(qasm3Parser.CtrlModifierContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateModifier" ):
                listener.enterQuantumGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateModifier" ):
                listener.exitQuantumGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateModifier" ):
                return visitor.visitQuantumGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateModifier(self):

        localctx = qasm3Parser.QuantumGateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_quantumGateModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.INV]:
                self.state = 638
                self.match(qasm3Parser.INV)
                pass
            elif token in [qasm3Parser.POW]:
                self.state = 639
                self.powModifier()
                pass
            elif token in [qasm3Parser.CTRL, qasm3Parser.NEGCTRL]:
                self.state = 640
                self.ctrlModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 643
            self.match(qasm3Parser.AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateNameContext,0)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,i)


        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumGateModifierContext,i)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateCall" ):
                listener.enterQuantumGateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateCall" ):
                listener.exitQuantumGateCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateCall" ):
                return visitor.visitQuantumGateCall(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateCall(self):

        localctx = qasm3Parser.QuantumGateCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_quantumGateCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL))) != 0):
                self.state = 645
                self.quantumGateModifier()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 651
            self.quantumGateName()
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 652
                self.match(qasm3Parser.LPAREN)
                self.state = 653
                self.expressionList()
                self.state = 654
                self.match(qasm3Parser.RPAREN)


            self.state = 658
            self.indexedIdentifier()
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 659
                self.match(qasm3Parser.COMMA)
                self.state = 660
                self.indexedIdentifier()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(qasm3Parser.TILDE, 0)

        def EXCLAMATION_POINT(self):
            return self.getToken(qasm3Parser.EXCLAMATION_POINT, 0)

        def MINUS(self):
            return self.getToken(qasm3Parser.MINUS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = qasm3Parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = qasm3Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.expression(0)
            self.state = 669
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionTerminatorContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(qasm3Parser.UnaryExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.LogicalAndExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def DOUBLE_PIPE(self):
            return self.getToken(qasm3Parser.DOUBLE_PIPE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 672
                self.expressionTerminator()
                pass

            elif la_ == 2:
                self.state = 673
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 674
                self.logicalAndExpression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 677
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 678
                    self.match(qasm3Parser.DOUBLE_PIPE)
                    self.state = 679
                    self.logicalAndExpression(0) 
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.LogicalAndExpressionContext,0)


        def DOUBLE_AMPERSAND(self):
            return self.getToken(qasm3Parser.DOUBLE_AMPERSAND, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.bitOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 688
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 689
                    self.match(qasm3Parser.DOUBLE_AMPERSAND)
                    self.state = 690
                    self.bitOrExpression(0) 
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.XOrExpressionContext,0)


        def bitOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitOrExpressionContext,0)


        def PIPE(self):
            return self.getToken(qasm3Parser.PIPE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_bitOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrExpression" ):
                return visitor.visitBitOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.BitOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_bitOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.xOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 704
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.BitOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitOrExpression)
                    self.state = 699
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 700
                    self.match(qasm3Parser.PIPE)
                    self.state = 701
                    self.xOrExpression(0) 
                self.state = 706
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class XOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitAndExpressionContext,0)


        def xOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.XOrExpressionContext,0)


        def CARET(self):
            return self.getToken(qasm3Parser.CARET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_xOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXOrExpression" ):
                listener.enterXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXOrExpression" ):
                listener.exitXOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXOrExpression" ):
                return visitor.visitXOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def xOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.XOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_xOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.bitAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.XOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xOrExpression)
                    self.state = 710
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 711
                    self.match(qasm3Parser.CARET)
                    self.state = 712
                    self.bitAndExpression(0) 
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualityExpressionContext,0)


        def bitAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitAndExpressionContext,0)


        def AMPERSAND(self):
            return self.getToken(qasm3Parser.AMPERSAND, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_bitAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndExpression" ):
                return visitor.visitBitAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.BitAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_bitAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.BitAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitAndExpression)
                    self.state = 721
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 722
                    self.match(qasm3Parser.AMPERSAND)
                    self.state = 723
                    self.equalityExpression(0) 
                self.state = 728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonExpression(self):
            return self.getTypedRuleContext(qasm3Parser.ComparisonExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualityExpressionContext,0)


        def EqualityOperator(self):
            return self.getToken(qasm3Parser.EqualityOperator, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.comparisonExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                    self.state = 732
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 733
                    self.match(qasm3Parser.EqualityOperator)
                    self.state = 734
                    self.comparisonExpression(0) 
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitShiftExpressionContext,0)


        def comparisonExpression(self):
            return self.getTypedRuleContext(qasm3Parser.ComparisonExpressionContext,0)


        def ComparisonOperator(self):
            return self.getToken(qasm3Parser.ComparisonOperator, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_comparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)



    def comparisonExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.ComparisonExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_comparisonExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.bitShiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.ComparisonExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                    self.state = 743
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 744
                    self.match(qasm3Parser.ComparisonOperator)
                    self.state = 745
                    self.bitShiftExpression(0) 
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(qasm3Parser.AdditiveExpressionContext,0)


        def bitShiftExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitShiftExpressionContext,0)


        def BitshiftOperator(self):
            return self.getToken(qasm3Parser.BitshiftOperator, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_bitShiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitShiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.BitShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_bitShiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.BitShiftExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitShiftExpression)
                    self.state = 754
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 755
                    self.match(qasm3Parser.BitshiftOperator)
                    self.state = 756
                    self.additiveExpression(0) 
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(qasm3Parser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(qasm3Parser.AdditiveExpressionContext,0)


        def PLUS(self):
            return self.getToken(qasm3Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(qasm3Parser.MINUS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_additiveExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                    self.state = 765
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 766
                    _la = self._input.LA(1)
                    if not(_la==qasm3Parser.PLUS or _la==qasm3Parser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 767
                    self.multiplicativeExpression(0) 
                self.state = 772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(qasm3Parser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(qasm3Parser.MultiplicativeExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(qasm3Parser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(qasm3Parser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(qasm3Parser.PERCENT, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_multiplicativeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.unaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                    self.state = 776
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 777
                    _la = self._input.LA(1)
                    if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (qasm3Parser.ASTERISK - 68)) | (1 << (qasm3Parser.SLASH - 68)) | (1 << (qasm3Parser.PERCENT - 68)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 778
                    self.unaryExpression() 
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powerExpression(self):
            return self.getTypedRuleContext(qasm3Parser.PowerExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(qasm3Parser.UnaryOperatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = qasm3Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)))) != 0):
                self.state = 784
                self.unaryOperator()


            self.state = 787
            self.powerExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpression(self):
            return self.getTypedRuleContext(qasm3Parser.IndexExpressionContext,0)


        def powerExpression(self):
            return self.getTypedRuleContext(qasm3Parser.PowerExpressionContext,0)


        def DOUBLE_ASTERISK(self):
            return self.getToken(qasm3Parser.DOUBLE_ASTERISK, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_powerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)



    def powerExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.PowerExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_powerExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.indexExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.PowerExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_powerExpression)
                    self.state = 792
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 793
                    self.match(qasm3Parser.DOUBLE_ASTERISK)
                    self.state = 794
                    self.indexExpression(0) 
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def discreteSet(self):
            return self.getTypedRuleContext(qasm3Parser.DiscreteSetContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def rangeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.RangeDefinitionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.RangeDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = qasm3Parser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(qasm3Parser.LBRACKET)
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.LBRACE]:
                self.state = 801
                self.discreteSet()
                pass
            elif token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.COLON, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                self.state = 804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 802
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 803
                    self.rangeDefinition()
                    pass


                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==qasm3Parser.COMMA:
                    self.state = 806
                    self.match(qasm3Parser.COMMA)
                    self.state = 809
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 807
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 808
                        self.rangeDefinition()
                        pass


                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 818
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionTerminatorContext,0)


        def indexExpression(self):
            return self.getTypedRuleContext(qasm3Parser.IndexExpressionContext,0)


        def indexOperator(self):
            return self.getTypedRuleContext(qasm3Parser.IndexOperatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_indexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)



    def indexExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.IndexExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_indexExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.expressionTerminator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.IndexExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indexExpression)
                    self.state = 823
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 824
                    self.indexOperator() 
                self.state = 829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = qasm3Parser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(qasm3Parser.Identifier)
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.LBRACKET:
                self.state = 831
                self.indexOperator()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionTerminatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constant(self):
            return self.getToken(qasm3Parser.Constant, 0)

        def BinaryIntegerLiteral(self):
            return self.getToken(qasm3Parser.BinaryIntegerLiteral, 0)

        def OctalIntegerLiteral(self):
            return self.getToken(qasm3Parser.OctalIntegerLiteral, 0)

        def DecimalIntegerLiteral(self):
            return self.getToken(qasm3Parser.DecimalIntegerLiteral, 0)

        def HexIntegerLiteral(self):
            return self.getToken(qasm3Parser.HexIntegerLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(qasm3Parser.FloatLiteral, 0)

        def ImaginaryLiteral(self):
            return self.getToken(qasm3Parser.ImaginaryLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(qasm3Parser.BooleanLiteral, 0)

        def BitstringLiteral(self):
            return self.getToken(qasm3Parser.BitstringLiteral, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def builtInCall(self):
            return self.getTypedRuleContext(qasm3Parser.BuiltInCallContext,0)


        def externOrSubroutineCall(self):
            return self.getTypedRuleContext(qasm3Parser.ExternOrSubroutineCallContext,0)


        def timingIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.TimingIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expressionTerminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionTerminator" ):
                listener.enterExpressionTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionTerminator" ):
                listener.exitExpressionTerminator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionTerminator" ):
                return visitor.visitExpressionTerminator(self)
            else:
                return visitor.visitChildren(self)




    def expressionTerminator(self):

        localctx = qasm3Parser.ExpressionTerminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_expressionTerminator)
        try:
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.match(qasm3Parser.Constant)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(qasm3Parser.BinaryIntegerLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 839
                self.match(qasm3Parser.OctalIntegerLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 840
                self.match(qasm3Parser.DecimalIntegerLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 841
                self.match(qasm3Parser.HexIntegerLiteral)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 842
                self.match(qasm3Parser.FloatLiteral)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 843
                self.match(qasm3Parser.ImaginaryLiteral)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 844
                self.match(qasm3Parser.BooleanLiteral)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 845
                self.match(qasm3Parser.BitstringLiteral)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 846
                self.match(qasm3Parser.Identifier)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 847
                self.builtInCall()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 848
                self.externOrSubroutineCall()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 849
                self.timingIdentifier()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 850
                self.match(qasm3Parser.LPAREN)
                self.state = 851
                self.expression(0)
                self.state = 852
                self.match(qasm3Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def BuiltinMath(self):
            return self.getToken(qasm3Parser.BuiltinMath, 0)

        def castOperator(self):
            return self.getTypedRuleContext(qasm3Parser.CastOperatorContext,0)


        def SIZEOF(self):
            return self.getToken(qasm3Parser.SIZEOF, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_builtInCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInCall" ):
                listener.enterBuiltInCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInCall" ):
                listener.exitBuiltInCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltInCall" ):
                return visitor.visitBuiltInCall(self)
            else:
                return visitor.visitChildren(self)




    def builtInCall(self):

        localctx = qasm3Parser.BuiltInCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_builtInCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.BuiltinMath]:
                self.state = 856
                self.match(qasm3Parser.BuiltinMath)
                pass
            elif token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH]:
                self.state = 857
                self.castOperator()
                pass
            elif token in [qasm3Parser.SIZEOF]:
                self.state = 858
                self.match(qasm3Parser.SIZEOF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 861
            self.match(qasm3Parser.LPAREN)
            self.state = 862
            self.expressionList()
            self.state = 863
            self.match(qasm3Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_castOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperator" ):
                listener.enterCastOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperator" ):
                listener.exitCastOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastOperator" ):
                return visitor.visitCastOperator(self)
            else:
                return visitor.visitChildren(self)




    def castOperator(self):

        localctx = qasm3Parser.CastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_castOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = qasm3Parser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.expression(0)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 868
                self.match(qasm3Parser.COMMA)
                self.state = 869
                self.expression(0)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_equalsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualsExpression" ):
                return visitor.visitEqualsExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalsExpression(self):

        localctx = qasm3Parser.EqualsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_equalsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(qasm3Parser.EQUALS)
            self.state = 876
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def CompoundAssignmentOperator(self):
            return self.getToken(qasm3Parser.CompoundAssignmentOperator, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = qasm3Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.EQUALS or _la==qasm3Parser.CompoundAssignmentOperator):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscreteSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_discreteSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscreteSet" ):
                listener.enterDiscreteSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscreteSet" ):
                listener.exitDiscreteSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscreteSet" ):
                return visitor.visitDiscreteSet(self)
            else:
                return visitor.visitChildren(self)




    def discreteSet(self):

        localctx = qasm3Parser.DiscreteSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_discreteSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(qasm3Parser.LBRACE)
            self.state = 881
            self.expression(0)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 882
                self.match(qasm3Parser.COMMA)
                self.state = 883
                self.expression(0)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discreteSet(self):
            return self.getTypedRuleContext(qasm3Parser.DiscreteSetContext,0)


        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.RangeDefinitionContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_setDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDeclaration" ):
                listener.enterSetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDeclaration" ):
                listener.exitSetDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetDeclaration" ):
                return visitor.visitSetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def setDeclaration(self):

        localctx = qasm3Parser.SetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_setDeclaration)
        try:
            self.state = 897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.discreteSet()
                pass
            elif token in [qasm3Parser.LBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.match(qasm3Parser.LBRACKET)
                self.state = 893
                self.rangeDefinition()
                self.state = 894
                self.match(qasm3Parser.RBRACKET)
                pass
            elif token in [qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def controlDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ControlDirectiveContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ControlDirectiveContext,i)


        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_programBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramBlock" ):
                listener.enterProgramBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramBlock" ):
                listener.exitProgramBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramBlock" ):
                return visitor.visitProgramBlock(self)
            else:
                return visitor.visitChildren(self)




    def programBlock(self):

        localctx = qasm3Parser.ProgramBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_programBlock)
        self._la = 0 # Token type
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.controlDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 901
                self.match(qasm3Parser.LBRACE)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.BOX) | (1 << qasm3Parser.LET) | (1 << qasm3Parser.BREAK) | (1 << qasm3Parser.CONTINUE) | (1 << qasm3Parser.IF) | (1 << qasm3Parser.END) | (1 << qasm3Parser.RETURN) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.CONST) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.U_) | (1 << qasm3Parser.CX) | (1 << qasm3Parser.GPHASE) | (1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BuiltinTimingInstruction) | (1 << qasm3Parser.RESET) | (1 << qasm3Parser.MEASURE) | (1 << qasm3Parser.BARRIER) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                    self.state = 904
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        self.state = 902
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 903
                        self.controlDirective()
                        pass


                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 909
                self.match(qasm3Parser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(qasm3Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def programBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ProgramBlockContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ProgramBlockContext,i)


        def ELSE(self):
            return self.getToken(qasm3Parser.ELSE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_branchingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranchingStatement" ):
                listener.enterBranchingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranchingStatement" ):
                listener.exitBranchingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBranchingStatement" ):
                return visitor.visitBranchingStatement(self)
            else:
                return visitor.visitChildren(self)




    def branchingStatement(self):

        localctx = qasm3Parser.BranchingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_branchingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(qasm3Parser.IF)
            self.state = 913
            self.match(qasm3Parser.LPAREN)
            self.state = 914
            self.expression(0)
            self.state = 915
            self.match(qasm3Parser.RPAREN)
            self.state = 916
            self.programBlock()
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 917
                self.match(qasm3Parser.ELSE)
                self.state = 918
                self.programBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(qasm3Parser.FOR, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def IN(self):
            return self.getToken(qasm3Parser.IN, 0)

        def setDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.SetDeclarationContext,0)


        def WHILE(self):
            return self.getToken(qasm3Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_loopSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopSignature" ):
                listener.enterLoopSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopSignature" ):
                listener.exitLoopSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopSignature" ):
                return visitor.visitLoopSignature(self)
            else:
                return visitor.visitChildren(self)




    def loopSignature(self):

        localctx = qasm3Parser.LoopSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_loopSignature)
        try:
            self.state = 930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.match(qasm3Parser.FOR)
                self.state = 922
                self.match(qasm3Parser.Identifier)
                self.state = 923
                self.match(qasm3Parser.IN)
                self.state = 924
                self.setDeclaration()
                pass
            elif token in [qasm3Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.match(qasm3Parser.WHILE)
                self.state = 926
                self.match(qasm3Parser.LPAREN)
                self.state = 927
                self.expression(0)
                self.state = 928
                self.match(qasm3Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(qasm3Parser.LoopSignatureContext,0)


        def programBlock(self):
            return self.getTypedRuleContext(qasm3Parser.ProgramBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = qasm3Parser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_loopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.loopSignature()
            self.state = 933
            self.programBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(qasm3Parser.END, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = qasm3Parser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(qasm3Parser.END)
            self.state = 936
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(qasm3Parser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = qasm3Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(qasm3Parser.RETURN)
            self.state = 941
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.CREG, qasm3Parser.BOOL, qasm3Parser.BIT, qasm3Parser.INT, qasm3Parser.UINT, qasm3Parser.FLOAT, qasm3Parser.ANGLE, qasm3Parser.COMPLEX, qasm3Parser.ARRAY, qasm3Parser.DURATION, qasm3Parser.STRETCH, qasm3Parser.SIZEOF, qasm3Parser.BuiltinMath, qasm3Parser.DURATIONOF, qasm3Parser.BooleanLiteral, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.TILDE, qasm3Parser.EXCLAMATION_POINT, qasm3Parser.ImaginaryLiteral, qasm3Parser.Constant, qasm3Parser.BinaryIntegerLiteral, qasm3Parser.OctalIntegerLiteral, qasm3Parser.DecimalIntegerLiteral, qasm3Parser.HexIntegerLiteral, qasm3Parser.Identifier, qasm3Parser.FloatLiteral, qasm3Parser.TimingLiteral, qasm3Parser.BitstringLiteral]:
                self.state = 939
                self.expression(0)
                pass
            elif token in [qasm3Parser.MEASURE]:
                self.state = 940
                self.quantumMeasurement()
                pass
            elif token in [qasm3Parser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 943
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(qasm3Parser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(qasm3Parser.CONTINUE, 0)

        def endStatement(self):
            return self.getTypedRuleContext(qasm3Parser.EndStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_controlDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlDirective" ):
                listener.enterControlDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlDirective" ):
                listener.exitControlDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlDirective" ):
                return visitor.visitControlDirective(self)
            else:
                return visitor.visitChildren(self)




    def controlDirective(self):

        localctx = qasm3Parser.ControlDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_controlDirective)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.BREAK, qasm3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                _la = self._input.LA(1)
                if not(_la==qasm3Parser.BREAK or _la==qasm3Parser.CONTINUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 946
                self.match(qasm3Parser.SEMICOLON)
                pass
            elif token in [qasm3Parser.END]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.endStatement()
                pass
            elif token in [qasm3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(qasm3Parser.EXTERN, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def classicalTypeList(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_externDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternDeclaration" ):
                listener.enterExternDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternDeclaration" ):
                listener.exitExternDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternDeclaration" ):
                return visitor.visitExternDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externDeclaration(self):

        localctx = qasm3Parser.ExternDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_externDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(qasm3Parser.EXTERN)
            self.state = 952
            self.match(qasm3Parser.Identifier)
            self.state = 953
            self.match(qasm3Parser.LPAREN)
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH))) != 0):
                self.state = 954
                self.classicalTypeList()


            self.state = 957
            self.match(qasm3Parser.RPAREN)
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.ARROW:
                self.state = 958
                self.returnSignature()


            self.state = 961
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternOrSubroutineCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_externOrSubroutineCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternOrSubroutineCall" ):
                listener.enterExternOrSubroutineCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternOrSubroutineCall" ):
                listener.exitExternOrSubroutineCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternOrSubroutineCall" ):
                return visitor.visitExternOrSubroutineCall(self)
            else:
                return visitor.visitChildren(self)




    def externOrSubroutineCall(self):

        localctx = qasm3Parser.ExternOrSubroutineCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externOrSubroutineCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(qasm3Parser.Identifier)
            self.state = 964
            self.match(qasm3Parser.LPAREN)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                self.state = 965
                self.expressionList()


            self.state = 968
            self.match(qasm3Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(qasm3Parser.DEF, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def subroutineBlock(self):
            return self.getTypedRuleContext(qasm3Parser.SubroutineBlockContext,0)


        def anyTypeArgumentList(self):
            return self.getTypedRuleContext(qasm3Parser.AnyTypeArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_subroutineDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDefinition" ):
                listener.enterSubroutineDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDefinition" ):
                listener.exitSubroutineDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineDefinition" ):
                return visitor.visitSubroutineDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subroutineDefinition(self):

        localctx = qasm3Parser.SubroutineDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_subroutineDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(qasm3Parser.DEF)
            self.state = 971
            self.match(qasm3Parser.Identifier)
            self.state = 972
            self.match(qasm3Parser.LPAREN)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CONST) | (1 << qasm3Parser.MUTABLE) | (1 << qasm3Parser.QREG) | (1 << qasm3Parser.QUBIT) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH))) != 0):
                self.state = 973
                self.anyTypeArgumentList()


            self.state = 976
            self.match(qasm3Parser.RPAREN)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.ARROW:
                self.state = 977
                self.returnSignature()


            self.state = 980
            self.subroutineBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def returnStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_subroutineBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineBlock" ):
                listener.enterSubroutineBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineBlock" ):
                listener.exitSubroutineBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineBlock" ):
                return visitor.visitSubroutineBlock(self)
            else:
                return visitor.visitChildren(self)




    def subroutineBlock(self):

        localctx = qasm3Parser.SubroutineBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_subroutineBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(qasm3Parser.LBRACE)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.BOX) | (1 << qasm3Parser.LET) | (1 << qasm3Parser.IF) | (1 << qasm3Parser.END) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.CONST) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.U_) | (1 << qasm3Parser.CX) | (1 << qasm3Parser.GPHASE) | (1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BuiltinTimingInstruction) | (1 << qasm3Parser.RESET) | (1 << qasm3Parser.MEASURE) | (1 << qasm3Parser.BARRIER) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                self.state = 983
                self.statement()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.RETURN:
                self.state = 989
                self.returnStatement()


            self.state = 992
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(qasm3Parser.PRAGMA, 0)

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = qasm3Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(qasm3Parser.PRAGMA)
            self.state = 995
            self.match(qasm3Parser.LBRACE)
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.BOX) | (1 << qasm3Parser.LET) | (1 << qasm3Parser.IF) | (1 << qasm3Parser.END) | (1 << qasm3Parser.FOR) | (1 << qasm3Parser.WHILE) | (1 << qasm3Parser.CONST) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.U_) | (1 << qasm3Parser.CX) | (1 << qasm3Parser.GPHASE) | (1 << qasm3Parser.INV) | (1 << qasm3Parser.POW) | (1 << qasm3Parser.CTRL) | (1 << qasm3Parser.NEGCTRL) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BuiltinTimingInstruction) | (1 << qasm3Parser.RESET) | (1 << qasm3Parser.MEASURE) | (1 << qasm3Parser.BARRIER) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                self.state = 996
                self.statement()
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1002
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingBoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(qasm3Parser.BOX, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBlockContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingBox" ):
                listener.enterTimingBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingBox" ):
                listener.exitTimingBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingBox" ):
                return visitor.visitTimingBox(self)
            else:
                return visitor.visitChildren(self)




    def timingBox(self):

        localctx = qasm3Parser.TimingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_timingBox)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(qasm3Parser.BOX)
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LBRACKET:
                self.state = 1005
                self.designator()


            self.state = 1008
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimingLiteral(self):
            return self.getToken(qasm3Parser.TimingLiteral, 0)

        def DURATIONOF(self):
            return self.getToken(qasm3Parser.DURATIONOF, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingIdentifier" ):
                listener.enterTimingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingIdentifier" ):
                listener.exitTimingIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingIdentifier" ):
                return visitor.visitTimingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def timingIdentifier(self):

        localctx = qasm3Parser.TimingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_timingIdentifier)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.TimingLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.match(qasm3Parser.TimingLiteral)
                pass
            elif token in [qasm3Parser.DURATIONOF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.match(qasm3Parser.DURATIONOF)
                self.state = 1012
                self.match(qasm3Parser.LPAREN)
                self.state = 1015
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.Identifier]:
                    self.state = 1013
                    self.match(qasm3Parser.Identifier)
                    pass
                elif token in [qasm3Parser.LBRACE]:
                    self.state = 1014
                    self.quantumBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1017
                self.match(qasm3Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingInstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BuiltinTimingInstruction(self):
            return self.getToken(qasm3Parser.BuiltinTimingInstruction, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexedIdentifierContext,i)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstruction" ):
                listener.enterTimingInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstruction" ):
                listener.exitTimingInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingInstruction" ):
                return visitor.visitTimingInstruction(self)
            else:
                return visitor.visitChildren(self)




    def timingInstruction(self):

        localctx = qasm3Parser.TimingInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_timingInstruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(qasm3Parser.BuiltinTimingInstruction)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 1021
                self.match(qasm3Parser.LPAREN)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                    self.state = 1022
                    self.expressionList()


                self.state = 1025
                self.match(qasm3Parser.RPAREN)


            self.state = 1028
            self.designator()
            self.state = 1029
            self.indexedIdentifier()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 1030
                self.match(qasm3Parser.COMMA)
                self.state = 1031
                self.indexedIdentifier()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstruction(self):
            return self.getTypedRuleContext(qasm3Parser.TimingInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def timingBox(self):
            return self.getTypedRuleContext(qasm3Parser.TimingBoxContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingStatement" ):
                listener.enterTimingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingStatement" ):
                listener.exitTimingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingStatement" ):
                return visitor.visitTimingStatement(self)
            else:
                return visitor.visitChildren(self)




    def timingStatement(self):

        localctx = qasm3Parser.TimingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_timingStatement)
        try:
            self.state = 1041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.BuiltinTimingInstruction]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.timingInstruction()
                self.state = 1038
                self.match(qasm3Parser.SEMICOLON)
                pass
            elif token in [qasm3Parser.BOX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.timingBox()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammarDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationGrammarDeclarationContext,0)


        def calibrationDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationDefinitionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_calibration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibration" ):
                listener.enterCalibration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibration" ):
                listener.exitCalibration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibration" ):
                return visitor.visitCalibration(self)
            else:
                return visitor.visitChildren(self)




    def calibration(self):

        localctx = qasm3Parser.CalibrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_calibration)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.DEFCALGRAMMAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.calibrationGrammarDeclaration()
                pass
            elif token in [qasm3Parser.DEFCAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.calibrationDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCALGRAMMAR(self):
            return self.getToken(qasm3Parser.DEFCALGRAMMAR, 0)

        def StringLiteral(self):
            return self.getToken(qasm3Parser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationGrammarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarDeclaration" ):
                listener.enterCalibrationGrammarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarDeclaration" ):
                listener.exitCalibrationGrammarDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarDeclaration" ):
                return visitor.visitCalibrationGrammarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarDeclaration(self):

        localctx = qasm3Parser.CalibrationGrammarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_calibrationGrammarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(qasm3Parser.DEFCALGRAMMAR)
            self.state = 1048
            self.match(qasm3Parser.StringLiteral)
            self.state = 1049
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCAL(self):
            return self.getToken(qasm3Parser.DEFCAL, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IdentifierListContext,0)


        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnSignatureContext,0)


        def calibrationArgumentList(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationArgumentListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationDefinition" ):
                listener.enterCalibrationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationDefinition" ):
                listener.exitCalibrationDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationDefinition" ):
                return visitor.visitCalibrationDefinition(self)
            else:
                return visitor.visitChildren(self)




    def calibrationDefinition(self):

        localctx = qasm3Parser.CalibrationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_calibrationDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(qasm3Parser.DEFCAL)
            self.state = 1052
            self.match(qasm3Parser.Identifier)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 1053
                self.match(qasm3Parser.LPAREN)
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.CONST) | (1 << qasm3Parser.MUTABLE) | (1 << qasm3Parser.CREG) | (1 << qasm3Parser.BOOL) | (1 << qasm3Parser.BIT) | (1 << qasm3Parser.INT) | (1 << qasm3Parser.UINT) | (1 << qasm3Parser.FLOAT) | (1 << qasm3Parser.ANGLE) | (1 << qasm3Parser.COMPLEX) | (1 << qasm3Parser.ARRAY) | (1 << qasm3Parser.DURATION) | (1 << qasm3Parser.STRETCH) | (1 << qasm3Parser.SIZEOF) | (1 << qasm3Parser.BuiltinMath) | (1 << qasm3Parser.DURATIONOF) | (1 << qasm3Parser.BooleanLiteral) | (1 << qasm3Parser.LPAREN))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (qasm3Parser.MINUS - 67)) | (1 << (qasm3Parser.TILDE - 67)) | (1 << (qasm3Parser.EXCLAMATION_POINT - 67)) | (1 << (qasm3Parser.ImaginaryLiteral - 67)) | (1 << (qasm3Parser.Constant - 67)) | (1 << (qasm3Parser.BinaryIntegerLiteral - 67)) | (1 << (qasm3Parser.OctalIntegerLiteral - 67)) | (1 << (qasm3Parser.DecimalIntegerLiteral - 67)) | (1 << (qasm3Parser.HexIntegerLiteral - 67)) | (1 << (qasm3Parser.Identifier - 67)) | (1 << (qasm3Parser.FloatLiteral - 67)) | (1 << (qasm3Parser.TimingLiteral - 67)) | (1 << (qasm3Parser.BitstringLiteral - 67)))) != 0):
                    self.state = 1054
                    self.calibrationArgumentList()


                self.state = 1057
                self.match(qasm3Parser.RPAREN)


            self.state = 1060
            self.identifierList()
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.ARROW:
                self.state = 1061
                self.returnSignature()


            self.state = 1064
            self.match(qasm3Parser.LBRACE)
            self.state = 1068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1065
                    self.matchWildcard() 
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 1071
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgumentList(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalArgumentListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationArgumentList" ):
                listener.enterCalibrationArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationArgumentList" ):
                listener.exitCalibrationArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationArgumentList" ):
                return visitor.visitCalibrationArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def calibrationArgumentList(self):

        localctx = qasm3Parser.CalibrationArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_calibrationArgumentList)
        try:
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.classicalArgumentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[61] = self.expression_sempred
        self._predicates[62] = self.logicalAndExpression_sempred
        self._predicates[63] = self.bitOrExpression_sempred
        self._predicates[64] = self.xOrExpression_sempred
        self._predicates[65] = self.bitAndExpression_sempred
        self._predicates[66] = self.equalityExpression_sempred
        self._predicates[67] = self.comparisonExpression_sempred
        self._predicates[68] = self.bitShiftExpression_sempred
        self._predicates[69] = self.additiveExpression_sempred
        self._predicates[70] = self.multiplicativeExpression_sempred
        self._predicates[72] = self.powerExpression_sempred
        self._predicates[74] = self.indexExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def bitOrExpression_sempred(self, localctx:BitOrExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def xOrExpression_sempred(self, localctx:XOrExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def bitAndExpression_sempred(self, localctx:BitAndExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def comparisonExpression_sempred(self, localctx:ComparisonExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def bitShiftExpression_sempred(self, localctx:BitShiftExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def powerExpression_sempred(self, localctx:PowerExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def indexExpression_sempred(self, localctx:IndexExpressionContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




