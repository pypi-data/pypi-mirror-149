# -*- coding: utf-8 -*-

"""
firstapicalculator

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from firstapicalculator.api_helper import APIHelper
from firstapicalculator.configuration import Server
from firstapicalculator.controllers.base_controller import BaseController


class SimpleCalculatorController(BaseController):

    """A Controller to access Endpoints in the firstapicalculator API."""
    def __init__(self, config):
        super(SimpleCalculatorController, self).__init__(config)

    def calculate(self,
                  operation,
                  x,
                  y):
        """Does a GET request to /{operation}.

        Calculate the expression using specified operation

        Args:
            operation (OperationTypeEnum): operation to perform
            x (float): First value
            y (float): second value

        Returns:
            float: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/{operation}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'operation': {'value': operation, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.DEFAULT)
        _query_builder += _url_path
        _query_parameters = {
            'x': x,
            'y': y
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = float(_response.text)

        return decoded
