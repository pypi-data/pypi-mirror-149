# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseDailyBilling(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'projects': 'list[ResponseProjectBilling]',
        'total': 'float'
    }

    attribute_map = {
        'date': 'date',
        'projects': 'projects',
        'total': 'total'
    }

    def __init__(self, date=None, projects=None, total=None, local_vars_configuration=None):  # noqa: E501
        """ResponseDailyBilling - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._projects = None
        self._total = None
        self.discriminator = None

        self.date = date
        self.projects = projects
        self.total = total

    @property
    def date(self):
        """Gets the date of this ResponseDailyBilling.  # noqa: E501


        :return: The date of this ResponseDailyBilling.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this ResponseDailyBilling.


        :param date: The date of this ResponseDailyBilling.  # noqa: E501
        :type date: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def projects(self):
        """Gets the projects of this ResponseDailyBilling.  # noqa: E501


        :return: The projects of this ResponseDailyBilling.  # noqa: E501
        :rtype: list[ResponseProjectBilling]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ResponseDailyBilling.


        :param projects: The projects of this ResponseDailyBilling.  # noqa: E501
        :type projects: list[ResponseProjectBilling]
        """
        if self.local_vars_configuration.client_side_validation and projects is None:  # noqa: E501
            raise ValueError("Invalid value for `projects`, must not be `None`")  # noqa: E501

        self._projects = projects

    @property
    def total(self):
        """Gets the total of this ResponseDailyBilling.  # noqa: E501


        :return: The total of this ResponseDailyBilling.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ResponseDailyBilling.


        :param total: The total of this ResponseDailyBilling.  # noqa: E501
        :type total: float
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDailyBilling):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseDailyBilling):
            return True

        return self.to_dict() != other.to_dict()
