# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmStorage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'OrmStorageEdges',
        'id': 'int',
        'immutable_slug': 'str',
        'name': 'str',
        'provider_config': 'dict(str, object)',
        'provider_credentials': 'dict(str, object)',
        'region': 'str',
        'source_type': 'str',
        'storage_organization': 'int',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'name': 'name',
        'provider_config': 'provider_config',
        'provider_credentials': 'provider_credentials',
        'region': 'region',
        'source_type': 'source_type',
        'storage_organization': 'storage_organization',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, edges=None, id=None, immutable_slug=None, name=None, provider_config=None, provider_credentials=None, region=None, source_type=None, storage_organization=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmStorage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._id = None
        self._immutable_slug = None
        self._name = None
        self._provider_config = None
        self._provider_credentials = None
        self._region = None
        self._source_type = None
        self._storage_organization = None
        self._updated_dt = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if name is not None:
            self.name = name
        if provider_config is not None:
            self.provider_config = provider_config
        if provider_credentials is not None:
            self.provider_credentials = provider_credentials
        if region is not None:
            self.region = region
        if source_type is not None:
            self.source_type = source_type
        self.storage_organization = storage_organization
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmStorage.  # noqa: E501


        :return: The created_dt of this OrmStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmStorage.


        :param created_dt: The created_dt of this OrmStorage.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmStorage.  # noqa: E501


        :return: The edges of this OrmStorage.  # noqa: E501
        :rtype: OrmStorageEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmStorage.


        :param edges: The edges of this OrmStorage.  # noqa: E501
        :type edges: OrmStorageEdges
        """

        self._edges = edges

    @property
    def id(self):
        """Gets the id of this OrmStorage.  # noqa: E501


        :return: The id of this OrmStorage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmStorage.


        :param id: The id of this OrmStorage.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmStorage.  # noqa: E501


        :return: The immutable_slug of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmStorage.


        :param immutable_slug: The immutable_slug of this OrmStorage.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def name(self):
        """Gets the name of this OrmStorage.  # noqa: E501


        :return: The name of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrmStorage.


        :param name: The name of this OrmStorage.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def provider_config(self):
        """Gets the provider_config of this OrmStorage.  # noqa: E501


        :return: The provider_config of this OrmStorage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._provider_config

    @provider_config.setter
    def provider_config(self, provider_config):
        """Sets the provider_config of this OrmStorage.


        :param provider_config: The provider_config of this OrmStorage.  # noqa: E501
        :type provider_config: dict(str, object)
        """

        self._provider_config = provider_config

    @property
    def provider_credentials(self):
        """Gets the provider_credentials of this OrmStorage.  # noqa: E501


        :return: The provider_credentials of this OrmStorage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._provider_credentials

    @provider_credentials.setter
    def provider_credentials(self, provider_credentials):
        """Sets the provider_credentials of this OrmStorage.


        :param provider_credentials: The provider_credentials of this OrmStorage.  # noqa: E501
        :type provider_credentials: dict(str, object)
        """

        self._provider_credentials = provider_credentials

    @property
    def region(self):
        """Gets the region of this OrmStorage.  # noqa: E501


        :return: The region of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OrmStorage.


        :param region: The region of this OrmStorage.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def source_type(self):
        """Gets the source_type of this OrmStorage.  # noqa: E501


        :return: The source_type of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this OrmStorage.


        :param source_type: The source_type of this OrmStorage.  # noqa: E501
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def storage_organization(self):
        """Gets the storage_organization of this OrmStorage.  # noqa: E501


        :return: The storage_organization of this OrmStorage.  # noqa: E501
        :rtype: int
        """
        return self._storage_organization

    @storage_organization.setter
    def storage_organization(self, storage_organization):
        """Sets the storage_organization of this OrmStorage.


        :param storage_organization: The storage_organization of this OrmStorage.  # noqa: E501
        :type storage_organization: int
        """

        self._storage_organization = storage_organization

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmStorage.  # noqa: E501


        :return: The updated_dt of this OrmStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmStorage.


        :param updated_dt: The updated_dt of this OrmStorage.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmStorage):
            return True

        return self.to_dict() != other.to_dict()
