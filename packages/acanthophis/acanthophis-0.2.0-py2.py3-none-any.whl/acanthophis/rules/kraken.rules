rule kraken:
    input:
        reads="data/reads/samples/{sample}.fastq.gz",
        hash=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/hash.k2d",
        opts=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/opts.k2d",
        taxo=lambda wc: config["kraken"]["dbs"][wc.krakendb] + "/taxo.k2d",
    output: 
        "data/kraken/persample/{krakendb}/{sample}.txt",
    log: "data/log/kraken/persample/{krakendb}~{sample}.log"
    threads: 4
    conda: acanthophis.get_resource("envs/kraken.yml")
    resources: **acanthophis.rule_resources(config, "kraken", time_min=60, mem_gb=8)
    shell:
        "kraken2"
        "   --db $(dirname {input.hash})/"
        "   --threads {threads}"
        "   --use-names"
        "   --output -"
        "   --report {output}"
        "   {input.reads}"
        ">{log} 2>&1"


rule all_kraken:
    input:
        [expand("data/kraken/persample/{krakendb}/{sample}.txt",
               sample=config["SAMPLESETS"][sampleset],
               krakendb=config["kraken"]["samplesets"][sampleset],
               ) for sampleset in config["kraken"]["samplesets"]]


