"""
─────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████─██████████████───████████──████████─██████─────────██████████████─████████──████████─
─██░░░░░░░░░░██─██░░░░░░░░░░██───██░░░░██──██░░░░██─██░░██─────────██░░░░░░░░░░██─██░░░░██──██░░░░██─
─██░░██████████─██░░██████░░██───████░░██──██░░████─██░░██─────────██░░██████░░██─████░░██──██░░████─
─██░░██─────────██░░██──██░░██─────██░░░░██░░░░██───██░░██─────────██░░██──██░░██───██░░░░██░░░░██───
─██░░██─────────██░░██──██░░██─────████░░░░░░████───██░░██─────────██░░██████░░██───████░░░░░░████───
─██░░██──██████─██░░██──██░░██───────████░░████─────██░░██─────────██░░░░░░░░░░██─────████░░████─────
─██░░██──██░░██─██░░██──██░░██─────────██░░██───────██░░██─────────██░░██████████───────██░░██───────
─██░░██──██░░██─██░░██──██░░██─────────██░░██───────██░░██─────────██░░██───────────────██░░██───────
─██░░██████░░██─██░░██████░░████───────██░░██───────██░░██████████─██░░██───────────────██░░██───────
─██░░░░░░░░░░██─██░░░░░░░░░░░░██───────██░░██───────██░░░░░░░░░░██─██░░██───────────────██░░██───────
─██████████████─████████████████───────██████───────██████████████─██████───────────────██████───────
─────────────────────────────────────────────────────────────────────────────────────────────────────

Copyright © 2022 GQYLPY <http://gqylpy.com>
SPDX-License-Identifier: Apache-2.0
"""
__version__ = 1, 0
__author__ = '竹永康 <gqylpy@outlook.com>'
__source__ = 'https://github.com/gqylpy/gqylpy-import'


def __call__(path: str, attr: str = None, *, define=None) -> 'Any':
    """
    Import a module, variable, function, class, or any other object.

    @param path: An absolute path of module.
    @param attr: An attribute in the module path.
    @param define: If not None, if the module path or attribue does not exist,
                   return this parameter instead of throwing an exception.

    >>> import gqylpy_import as gimport
    >>> gimport('sys', 'platform')
    'linux'
    """


class ______歌______琪______怡______玲______萍______云______:

    import sys

    __import__(f'{__name__}.g {__name__[7:]}')

    gpack = sys.modules[__name__]
    gcode = globals()[f'g {__name__[7:]}']

    sys.modules[__name__] = gpack.__call__ = gcode.__call__
    del gcode.__call__.__module__

    for gname, gvalue in globals().items():
        if gname[:2] == '__' and gname != '__builtins__':
            setattr(gcode.__call__, gname, gvalue)


from typing import Any
