{"version":3,"sources":["AwesomeTable.tsx","index.tsx"],"names":["AwesomeTable","state","numClicks","isFocused","render","data","JSON","parse","props","args","columns","console","log","theme","style","borderStyling","primaryColor","border","outline","className","map","column","scope","label","ICONBUTTON","IMAGE","dtype","name","href","target","rel","icon","src","alt","onClicked","setState","prevState","Streamlit","setComponentValue","_onFocus","_onBlur","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAgBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EAEnCC,OAAS,WAGd,IAAMC,EAAOC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,MAClBC,EAAU,EAAKF,MAAMC,KAAX,QAChBE,QAAQC,IAAIF,GAKZ,IAAQG,EAAU,EAAKL,MAAfK,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKd,MAAME,UAAYU,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,yBAAKI,UAAU,oBACb,2BAAOA,UAAU,mCACf,+BAEIT,EAAQU,KAAI,SAACC,GACX,OACA,wBAAIC,MAAM,OAAOD,EAAOE,WAI9B,+BACGlB,EAAKA,KAAKe,KAAI,SAACf,GACd,IAAMmB,EAAa,CACf,QAAW,eACX,YAAa,UACb,MAAS,UACT,OAAU,UACV,cAAe,OACf,QAAW,eAETC,EAAQ,CACZ,OAAU,IAEZ,OACE,4BACIf,EAAQU,KAAI,SAACC,GACX,MAAoB,WAAjBA,EAAOK,OAAuC,aAAjBL,EAAOK,MAEnC,4BAAKrB,EAAKgB,EAAOM,OAGD,eAAjBN,EAAOK,MAEN,4BACE,uBAAGE,KAAMvB,EAAKgB,EAAOM,MAAOE,OAAO,SAASC,IAAI,uBAAsB,uBAAGhB,MAAOU,EAAYL,UAAWE,EAAOU,SAIhG,aAAjBV,EAAOK,MAEN,wBAAIP,UAAU,4BAA2B,uBAAGS,KAAMvB,EAAKgB,EAAOM,MAAOE,OAAO,SAASC,IAAI,uBAAsB,uBAAGhB,MAAOU,EAAYL,UAAU,mCAG/H,SAAjBE,EAAOK,MAEN,wBAAIP,UAAU,4BAA2B,uBAAGS,KAAMvB,EAAKgB,EAAOM,MAAOE,OAAO,SAASC,IAAI,uBAAsB,uBAAGhB,MAAOU,EAAYL,UAAU,uCAG/H,UAAjBE,EAAOK,MAEN,wBAAIP,UAAU,4BAA2B,yBAAKL,MAAOW,EAAOO,IAAK3B,EAAKgB,EAAOM,MAAOM,IAAKZ,EAAOM,QAG9F,+BA5BR,wB,EAwCVO,UAAY,WAGlB,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAElC,UAAWkC,EAAUlC,UAAY,MACjD,kBAAMmC,IAAUC,kBAAkB,EAAKrC,MAAMC,e,EAKzCqC,SAAW,WACjB,EAAKJ,SAAS,CAAEhC,WAAW,K,EAIrBqC,QAAU,WAChB,EAAKL,SAAS,CAAEhC,WAAW,K,yBAlHJsC,KA2HZC,cAAwB1C,G,YCrIvC2C,IAASvC,OACP,kBAAC,IAAMwC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.92daa278.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n  isFocused: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass AwesomeTable extends StreamlitComponentBase<State> {\r\n  public state = { numClicks: 0, isFocused: false }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const data = JSON.parse(this.props.args[\"data\"])\r\n    const columns = this.props.args[\"columns\"]\r\n    console.log(columns)\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-striped table-hover\">\r\n          <thead>\r\n            {\r\n              columns.map((column: any) => {\r\n                return(\r\n                <th scope=\"col\">{column.label}</th>\r\n              )\r\n            })}\r\n          </thead>\r\n          <tbody>\r\n            {data.data.map((data: any) => {\r\n              const ICONBUTTON = {\r\n                  \"display\": \"inline-block\",\r\n                  \"font-size\": \"1.25rem\",\r\n                  \"color\": \"#212529\",\r\n                  \"cursor\": \"pointer\",\r\n                  \"user-select\": \"none\",\r\n                  \"padding\": \"0.5rem 1rem\"\r\n              }\r\n              const IMAGE = {\r\n                \"height\": 50,\r\n              }\r\n              return (\r\n                <tr>{\r\n                    columns.map((column: any) => {\r\n                      if(column.dtype === \"STRING\" || column.dtype === \"DATETIME\") {\r\n                        return (\r\n                          <td>{data[column.name]}</td>\r\n                        )\r\n                      }\r\n                      if(column.dtype === \"ICONBUTTON\") {\r\n                        return (\r\n                          <td>\r\n                            <a href={data[column.name]} target=\"_blank\" rel=\"noopener noreferrer\"><i style={ICONBUTTON} className={column.icon}></i></a>\r\n                          </td>\r\n                        )\r\n                      }\r\n                      if(column.dtype === \"DOWNLOAD\") {\r\n                        return (\r\n                          <td className=\"align-middle text-center\"><a href={data[column.name]} target=\"_blank\" rel=\"noopener noreferrer\"><i style={ICONBUTTON} className=\"fa-solid fa-cloud-arrow-down\"></i></a></td>\r\n                        )\r\n                      }\r\n                      if(column.dtype === \"LINK\") {\r\n                        return (\r\n                          <td className=\"align-middle text-center\"><a href={data[column.name]} target=\"_blank\" rel=\"noopener noreferrer\"><i style={ICONBUTTON} className=\"fa-solid fa-up-right-from-square\"></i></a></td>\r\n                        )\r\n                      }\r\n                      if(column.dtype === \"IMAGE\") {\r\n                        return(\r\n                          <td className=\"align-middle text-center\"><img style={IMAGE} src={data[column.name]} alt={column.name}/></td>\r\n                        )\r\n                    }\r\n                    return (<td></td>)\r\n                  }, this)}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(AwesomeTable)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport AwesomeTable from \"./AwesomeTable\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '@fortawesome/fontawesome-free/css/all.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AwesomeTable />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}