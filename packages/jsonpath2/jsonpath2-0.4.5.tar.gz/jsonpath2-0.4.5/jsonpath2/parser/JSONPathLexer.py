# Generated from jsonpath2/parser/JSONPath.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,214,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,
        1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,
        1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,5,26,147,8,26,
        10,26,12,26,150,9,26,1,27,1,27,1,27,5,27,155,8,27,10,27,12,27,158,
        9,27,1,27,1,27,1,28,1,28,1,28,3,28,165,8,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,3,32,178,8,32,1,32,1,32,1,32,
        4,32,183,8,32,11,32,12,32,184,3,32,187,8,32,1,32,3,32,190,8,32,1,
        33,1,33,1,33,5,33,195,8,33,10,33,12,33,198,9,33,3,33,200,8,33,1,
        34,1,34,3,34,204,8,34,1,34,1,34,1,35,4,35,209,8,35,11,35,12,35,210,
        1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,0,61,0,63,0,65,29,
        67,0,69,0,71,30,1,0,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,
        116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,1,0,48,57,1,0,49,
        57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,32,219,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,65,1,0,0,0,0,71,1,0,0,0,1,73,1,
        0,0,0,3,75,1,0,0,0,5,78,1,0,0,0,7,80,1,0,0,0,9,82,1,0,0,0,11,84,
        1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,93,1,0,0,0,19,95,1,0,0,0,
        21,98,1,0,0,0,23,100,1,0,0,0,25,103,1,0,0,0,27,107,1,0,0,0,29,110,
        1,0,0,0,31,115,1,0,0,0,33,121,1,0,0,0,35,126,1,0,0,0,37,128,1,0,
        0,0,39,130,1,0,0,0,41,132,1,0,0,0,43,134,1,0,0,0,45,136,1,0,0,0,
        47,138,1,0,0,0,49,140,1,0,0,0,51,142,1,0,0,0,53,144,1,0,0,0,55,151,
        1,0,0,0,57,161,1,0,0,0,59,166,1,0,0,0,61,172,1,0,0,0,63,174,1,0,
        0,0,65,177,1,0,0,0,67,199,1,0,0,0,69,201,1,0,0,0,71,208,1,0,0,0,
        73,74,5,64,0,0,74,2,1,0,0,0,75,76,5,46,0,0,76,77,5,46,0,0,77,4,1,
        0,0,0,78,79,5,36,0,0,79,6,1,0,0,0,80,81,5,46,0,0,81,8,1,0,0,0,82,
        83,5,42,0,0,83,10,1,0,0,0,84,85,5,97,0,0,85,86,5,110,0,0,86,87,5,
        100,0,0,87,12,1,0,0,0,88,89,5,61,0,0,89,14,1,0,0,0,90,91,5,62,0,
        0,91,92,5,61,0,0,92,16,1,0,0,0,93,94,5,62,0,0,94,18,1,0,0,0,95,96,
        5,60,0,0,96,97,5,61,0,0,97,20,1,0,0,0,98,99,5,60,0,0,99,22,1,0,0,
        0,100,101,5,33,0,0,101,102,5,61,0,0,102,24,1,0,0,0,103,104,5,110,
        0,0,104,105,5,111,0,0,105,106,5,116,0,0,106,26,1,0,0,0,107,108,5,
        111,0,0,108,109,5,114,0,0,109,28,1,0,0,0,110,111,5,116,0,0,111,112,
        5,114,0,0,112,113,5,117,0,0,113,114,5,101,0,0,114,30,1,0,0,0,115,
        116,5,102,0,0,116,117,5,97,0,0,117,118,5,108,0,0,118,119,5,115,0,
        0,119,120,5,101,0,0,120,32,1,0,0,0,121,122,5,110,0,0,122,123,5,117,
        0,0,123,124,5,108,0,0,124,125,5,108,0,0,125,34,1,0,0,0,126,127,5,
        123,0,0,127,36,1,0,0,0,128,129,5,125,0,0,129,38,1,0,0,0,130,131,
        5,91,0,0,131,40,1,0,0,0,132,133,5,93,0,0,133,42,1,0,0,0,134,135,
        5,58,0,0,135,44,1,0,0,0,136,137,5,44,0,0,137,46,1,0,0,0,138,139,
        5,40,0,0,139,48,1,0,0,0,140,141,5,41,0,0,141,50,1,0,0,0,142,143,
        5,63,0,0,143,52,1,0,0,0,144,148,7,0,0,0,145,147,7,1,0,0,146,145,
        1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,54,1,
        0,0,0,150,148,1,0,0,0,151,156,5,34,0,0,152,155,3,57,28,0,153,155,
        3,63,31,0,154,152,1,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,
        1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,
        5,34,0,0,160,56,1,0,0,0,161,164,5,92,0,0,162,165,7,2,0,0,163,165,
        3,59,29,0,164,162,1,0,0,0,164,163,1,0,0,0,165,58,1,0,0,0,166,167,
        5,117,0,0,167,168,3,61,30,0,168,169,3,61,30,0,169,170,3,61,30,0,
        170,171,3,61,30,0,171,60,1,0,0,0,172,173,7,3,0,0,173,62,1,0,0,0,
        174,175,8,4,0,0,175,64,1,0,0,0,176,178,5,45,0,0,177,176,1,0,0,0,
        177,178,1,0,0,0,178,179,1,0,0,0,179,186,3,67,33,0,180,182,5,46,0,
        0,181,183,7,5,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,
        0,184,185,1,0,0,0,185,187,1,0,0,0,186,180,1,0,0,0,186,187,1,0,0,
        0,187,189,1,0,0,0,188,190,3,69,34,0,189,188,1,0,0,0,189,190,1,0,
        0,0,190,66,1,0,0,0,191,200,5,48,0,0,192,196,7,6,0,0,193,195,7,5,
        0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,
        0,0,197,200,1,0,0,0,198,196,1,0,0,0,199,191,1,0,0,0,199,192,1,0,
        0,0,200,68,1,0,0,0,201,203,7,7,0,0,202,204,7,8,0,0,203,202,1,0,0,
        0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,3,67,33,0,206,70,1,0,0,
        0,207,209,7,9,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,208,1,0,0,
        0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,6,35,0,0,213,72,1,0,0,
        0,13,0,148,154,156,164,177,184,186,189,196,199,203,210,1,6,0,0
    ]

class JSONPathLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CURRENT_VALUE = 1
    RECURSIVE_DESCENT = 2
    ROOT_VALUE = 3
    SUBSCRIPT = 4
    WILDCARD_SUBSCRIPT = 5
    AND = 6
    EQ = 7
    GE = 8
    GT = 9
    LE = 10
    LT = 11
    NE = 12
    NOT = 13
    OR = 14
    TRUE = 15
    FALSE = 16
    NULL = 17
    BRACE_LEFT = 18
    BRACE_RIGHT = 19
    BRACKET_LEFT = 20
    BRACKET_RIGHT = 21
    COLON = 22
    COMMA = 23
    PAREN_LEFT = 24
    PAREN_RIGHT = 25
    QUESTION = 26
    ID = 27
    STRING = 28
    NUMBER = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'..'", "'$'", "'.'", "'*'", "'and'", "'='", "'>='",
            "'>'", "'<='", "'<'", "'!='", "'not'", "'or'", "'true'", "'false'",
            "'null'", "'{'", "'}'", "'['", "']'", "':'", "','", "'('", "')'",
            "'?'" ]

    symbolicNames = [ "<INVALID>",
            "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT",
            "WILDCARD_SUBSCRIPT", "AND", "EQ", "GE", "GT", "LE", "LT", "NE",
            "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT", "BRACE_RIGHT",
            "BRACKET_LEFT", "BRACKET_RIGHT", "COLON", "COMMA", "PAREN_LEFT",
            "PAREN_RIGHT", "QUESTION", "ID", "STRING", "NUMBER", "WS" ]

    ruleNames = [ "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT",
                  "WILDCARD_SUBSCRIPT", "AND", "EQ", "GE", "GT", "LE", "LT",
                  "NE", "NOT", "OR", "TRUE", "FALSE", "NULL", "BRACE_LEFT",
                  "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "COLON",
                  "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", "ID",
                  "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "NUMBER",
                  "INT", "EXP", "WS" ]

    grammarFileName = "JSONPath.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
